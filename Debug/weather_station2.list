
weather_station2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c78  08002c78  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002c78  08002c78  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c78  08002c78  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c78  08002c78  00012c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c7c  08002c7c  00012c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000064  08002ce4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08002ce4  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006328  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001628  00000000  00000000  000263bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000380  00000000  00000000  000279e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002a8  00000000  00000000  00027d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff70  00000000  00000000  00028010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004fb2  00000000  00000000  00037f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054e52  00000000  00000000  0003cf32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00091d84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017c8  00000000  00000000  00091dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002bb8 	.word	0x08002bb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08002bb8 	.word	0x08002bb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <calculate_SYSCFG_values>:
 *  Created on: Nov 29, 2021
 *      Author: toni
 */
#include "EXTI_lib.h"

static void calculate_SYSCFG_values(uint8_t pin_num, uint8_t *buf) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]

	uint8_t SYSCFG_num = pin_num / 4;
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	089b      	lsrs	r3, r3, #2
 8000290:	73fb      	strb	r3, [r7, #15]
	uint8_t SYSCFG_pos = pin_num % 4 * 4;
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 0303 	and.w	r3, r3, #3
 8000298:	b2db      	uxtb	r3, r3
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	73bb      	strb	r3, [r7, #14]

	buf[0] = SYSCFG_num;
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	7bfa      	ldrb	r2, [r7, #15]
 80002a2:	701a      	strb	r2, [r3, #0]
	buf[1] = SYSCFG_pos;
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	3301      	adds	r3, #1
 80002a8:	7bba      	ldrb	r2, [r7, #14]
 80002aa:	701a      	strb	r2, [r3, #0]

}
 80002ac:	bf00      	nop
 80002ae:	3714      	adds	r7, #20
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <enable_EXTI>:

void enable_EXTI(uint8_t pin_num, uint8_t gpio, uint8_t edge) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
 80002c2:	460b      	mov	r3, r1
 80002c4:	71bb      	strb	r3, [r7, #6]
 80002c6:	4613      	mov	r3, r2
 80002c8:	717b      	strb	r3, [r7, #5]

	RCC->APB2ENR |= 1u << 14;
 80002ca:	4b2c      	ldr	r3, [pc, #176]	; (800037c <enable_EXTI+0xc4>)
 80002cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ce:	4a2b      	ldr	r2, [pc, #172]	; (800037c <enable_EXTI+0xc4>)
 80002d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002d4:	6453      	str	r3, [r2, #68]	; 0x44

	//enable correct port from SYSCFG register for EXTI
	uint8_t SYSCFG_values[2];
	calculate_SYSCFG_values(pin_num, SYSCFG_values);
 80002d6:	f107 020c 	add.w	r2, r7, #12
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	4611      	mov	r1, r2
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ffce 	bl	8000280 <calculate_SYSCFG_values>

	SYSCFG->EXTICR[SYSCFG_values[0]] |= (gpio << SYSCFG_values[1]);
 80002e4:	4a26      	ldr	r2, [pc, #152]	; (8000380 <enable_EXTI+0xc8>)
 80002e6:	7b3b      	ldrb	r3, [r7, #12]
 80002e8:	3302      	adds	r3, #2
 80002ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ee:	79ba      	ldrb	r2, [r7, #6]
 80002f0:	7b79      	ldrb	r1, [r7, #13]
 80002f2:	408a      	lsls	r2, r1
 80002f4:	4922      	ldr	r1, [pc, #136]	; (8000380 <enable_EXTI+0xc8>)
 80002f6:	7b38      	ldrb	r0, [r7, #12]
 80002f8:	431a      	orrs	r2, r3
 80002fa:	1c83      	adds	r3, r0, #2
 80002fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	switch (edge) {
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	2b02      	cmp	r3, #2
 8000304:	d006      	beq.n	8000314 <enable_EXTI+0x5c>
 8000306:	2b02      	cmp	r3, #2
 8000308:	dc2b      	bgt.n	8000362 <enable_EXTI+0xaa>
 800030a:	2b00      	cmp	r3, #0
 800030c:	d015      	beq.n	800033a <enable_EXTI+0x82>
 800030e:	2b01      	cmp	r3, #1
 8000310:	d01d      	beq.n	800034e <enable_EXTI+0x96>
 8000312:	e026      	b.n	8000362 <enable_EXTI+0xaa>
	case EXTI_REFE:
		EXTI->FTSR |= 1u << pin_num;
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <enable_EXTI+0xcc>)
 8000316:	68da      	ldr	r2, [r3, #12]
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	2101      	movs	r1, #1
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	4918      	ldr	r1, [pc, #96]	; (8000384 <enable_EXTI+0xcc>)
 8000322:	4313      	orrs	r3, r2
 8000324:	60cb      	str	r3, [r1, #12]
		EXTI->RTSR |= 1u << pin_num;
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <enable_EXTI+0xcc>)
 8000328:	689a      	ldr	r2, [r3, #8]
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	2101      	movs	r1, #1
 800032e:	fa01 f303 	lsl.w	r3, r1, r3
 8000332:	4914      	ldr	r1, [pc, #80]	; (8000384 <enable_EXTI+0xcc>)
 8000334:	4313      	orrs	r3, r2
 8000336:	608b      	str	r3, [r1, #8]
		break;
 8000338:	e013      	b.n	8000362 <enable_EXTI+0xaa>

	case EXTI_RE:
		EXTI->RTSR |= 1u << pin_num;
 800033a:	4b12      	ldr	r3, [pc, #72]	; (8000384 <enable_EXTI+0xcc>)
 800033c:	689a      	ldr	r2, [r3, #8]
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2101      	movs	r1, #1
 8000342:	fa01 f303 	lsl.w	r3, r1, r3
 8000346:	490f      	ldr	r1, [pc, #60]	; (8000384 <enable_EXTI+0xcc>)
 8000348:	4313      	orrs	r3, r2
 800034a:	608b      	str	r3, [r1, #8]
		break;
 800034c:	e009      	b.n	8000362 <enable_EXTI+0xaa>

	case EXTI_FE:
		EXTI->FTSR |= 1u << pin_num;
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <enable_EXTI+0xcc>)
 8000350:	68da      	ldr	r2, [r3, #12]
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2101      	movs	r1, #1
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	490a      	ldr	r1, [pc, #40]	; (8000384 <enable_EXTI+0xcc>)
 800035c:	4313      	orrs	r3, r2
 800035e:	60cb      	str	r3, [r1, #12]
		break;
 8000360:	bf00      	nop
	}

	EXTI->IMR |= 1u << pin_num;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <enable_EXTI+0xcc>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	2101      	movs	r1, #1
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	4905      	ldr	r1, [pc, #20]	; (8000384 <enable_EXTI+0xcc>)
 8000370:	4313      	orrs	r3, r2
 8000372:	600b      	str	r3, [r1, #0]

}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40023800 	.word	0x40023800
 8000380:	40013800 	.word	0x40013800
 8000384:	40013c00 	.word	0x40013c00

08000388 <disable_EXTI>:

void disable_EXTI(uint8_t pin_num) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	uint8_t SYSCFG_values[2];
	calculate_SYSCFG_values(pin_num, SYSCFG_values);
 8000392:	f107 020c 	add.w	r2, r7, #12
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	4611      	mov	r1, r2
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ff70 	bl	8000280 <calculate_SYSCFG_values>

	SYSCFG->EXTICR[SYSCFG_values[0]] &= ~(0xFu << SYSCFG_values[1]);
 80003a0:	4a18      	ldr	r2, [pc, #96]	; (8000404 <disable_EXTI+0x7c>)
 80003a2:	7b3b      	ldrb	r3, [r7, #12]
 80003a4:	3302      	adds	r3, #2
 80003a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003aa:	7b7b      	ldrb	r3, [r7, #13]
 80003ac:	4619      	mov	r1, r3
 80003ae:	230f      	movs	r3, #15
 80003b0:	408b      	lsls	r3, r1
 80003b2:	43db      	mvns	r3, r3
 80003b4:	4913      	ldr	r1, [pc, #76]	; (8000404 <disable_EXTI+0x7c>)
 80003b6:	7b38      	ldrb	r0, [r7, #12]
 80003b8:	401a      	ands	r2, r3
 80003ba:	1c83      	adds	r3, r0, #2
 80003bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	EXTI->FTSR &= ~(1u << pin_num);
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <disable_EXTI+0x80>)
 80003c2:	68da      	ldr	r2, [r3, #12]
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	2101      	movs	r1, #1
 80003c8:	fa01 f303 	lsl.w	r3, r1, r3
 80003cc:	43db      	mvns	r3, r3
 80003ce:	490e      	ldr	r1, [pc, #56]	; (8000408 <disable_EXTI+0x80>)
 80003d0:	4013      	ands	r3, r2
 80003d2:	60cb      	str	r3, [r1, #12]
	EXTI->RTSR &= ~(1u << pin_num);
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <disable_EXTI+0x80>)
 80003d6:	689a      	ldr	r2, [r3, #8]
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	2101      	movs	r1, #1
 80003dc:	fa01 f303 	lsl.w	r3, r1, r3
 80003e0:	43db      	mvns	r3, r3
 80003e2:	4909      	ldr	r1, [pc, #36]	; (8000408 <disable_EXTI+0x80>)
 80003e4:	4013      	ands	r3, r2
 80003e6:	608b      	str	r3, [r1, #8]

	EXTI->IMR &= ~(1u << pin_num);
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <disable_EXTI+0x80>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	2101      	movs	r1, #1
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	43db      	mvns	r3, r3
 80003f6:	4904      	ldr	r1, [pc, #16]	; (8000408 <disable_EXTI+0x80>)
 80003f8:	4013      	ands	r3, r2
 80003fa:	600b      	str	r3, [r1, #0]



}
 80003fc:	bf00      	nop
 80003fe:	3710      	adds	r7, #16
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40013800 	.word	0x40013800
 8000408:	40013c00 	.word	0x40013c00

0800040c <enable_GPIOx_clock>:
#include "GPIO_Lib.h"

static void enable_GPIOx_clock(GPIO_TypeDef *gpio) {
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]

	if (gpio == GPIOA) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a23      	ldr	r2, [pc, #140]	; (80004a4 <enable_GPIOx_clock+0x98>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <enable_GPIOx_clock+0x1e>

		RCC->AHB1ENR |= GPIOA_CLOCK_EN;
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	6313      	str	r3, [r2, #48]	; 0x30

	} else if (gpio == GPIOH) {

		RCC->AHB1ENR |= GPIOH_CLOCK_EN;
	}
}
 8000428:	e035      	b.n	8000496 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOB) {
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a1f      	ldr	r2, [pc, #124]	; (80004ac <enable_GPIOx_clock+0xa0>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <enable_GPIOx_clock+0x34>
		RCC->AHB1ENR |= GPIOB_CLOCK_EN;
 8000432:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a1c      	ldr	r2, [pc, #112]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000438:	f043 0302 	orr.w	r3, r3, #2
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043e:	e02a      	b.n	8000496 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOC) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a1b      	ldr	r2, [pc, #108]	; (80004b0 <enable_GPIOx_clock+0xa4>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <enable_GPIOx_clock+0x4a>
		RCC->AHB1ENR |= GPIOC_CLOCK_EN;
 8000448:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a16      	ldr	r2, [pc, #88]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 800044e:	f043 0304 	orr.w	r3, r3, #4
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000454:	e01f      	b.n	8000496 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOD) {
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a16      	ldr	r2, [pc, #88]	; (80004b4 <enable_GPIOx_clock+0xa8>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <enable_GPIOx_clock+0x60>
		RCC->AHB1ENR |= GPIOD_CLOCK_EN;
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a11      	ldr	r2, [pc, #68]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000464:	f043 0308 	orr.w	r3, r3, #8
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046a:	e014      	b.n	8000496 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOE) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <enable_GPIOx_clock+0xac>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <enable_GPIOx_clock+0x76>
		RCC->AHB1ENR |= GPIOE_CLOCK_EN;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a0b      	ldr	r2, [pc, #44]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 800047a:	f043 0310 	orr.w	r3, r3, #16
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000480:	e009      	b.n	8000496 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOH) {
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <enable_GPIOx_clock+0xb0>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d105      	bne.n	8000496 <enable_GPIOx_clock+0x8a>
		RCC->AHB1ENR |= GPIOH_CLOCK_EN;
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048e:	4a06      	ldr	r2, [pc, #24]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000494:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40020000 	.word	0x40020000
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40020400 	.word	0x40020400
 80004b0:	40020800 	.word	0x40020800
 80004b4:	40020c00 	.word	0x40020c00
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40021c00 	.word	0x40021c00

080004c0 <init_pin>:

void init_pin(pin_type *pin, GPIO_TypeDef *_gpio, uint8_t _pin_num,
		uint8_t _mode) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	4611      	mov	r1, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	460b      	mov	r3, r1
 80004d0:	71fb      	strb	r3, [r7, #7]
 80004d2:	4613      	mov	r3, r2
 80004d4:	71bb      	strb	r3, [r7, #6]
	pin->gpio = _gpio;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	68ba      	ldr	r2, [r7, #8]
 80004da:	601a      	str	r2, [r3, #0]
	pin->pin_num = _pin_num;
 80004dc:	79fa      	ldrb	r2, [r7, #7]
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	605a      	str	r2, [r3, #4]

	enable_GPIOx_clock(_gpio);
 80004e2:	68b8      	ldr	r0, [r7, #8]
 80004e4:	f7ff ff92 	bl	800040c <enable_GPIOx_clock>

	if (_mode < 3) {
 80004e8:	79bb      	ldrb	r3, [r7, #6]
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d805      	bhi.n	80004fa <init_pin+0x3a>
		set_input(pin, _mode);
 80004ee:	79bb      	ldrb	r3, [r7, #6]
 80004f0:	4619      	mov	r1, r3
 80004f2:	68f8      	ldr	r0, [r7, #12]
 80004f4:	f000 f843 	bl	800057e <set_input>
		set_output(pin, _mode);
	} else {
		pin->gpio->MODER |= 2u << ((pin->pin_num * 2));
	}

}
 80004f8:	e014      	b.n	8000524 <init_pin+0x64>
	} else if (_mode != alternate_function) {
 80004fa:	79bb      	ldrb	r3, [r7, #6]
 80004fc:	2b05      	cmp	r3, #5
 80004fe:	d005      	beq.n	800050c <init_pin+0x4c>
		set_output(pin, _mode);
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	4619      	mov	r1, r3
 8000504:	68f8      	ldr	r0, [r7, #12]
 8000506:	f000 f88c 	bl	8000622 <set_output>
}
 800050a:	e00b      	b.n	8000524 <init_pin+0x64>
		pin->gpio->MODER |= 2u << ((pin->pin_num * 2));
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6819      	ldr	r1, [r3, #0]
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	2202      	movs	r2, #2
 800051a:	409a      	lsls	r2, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	430a      	orrs	r2, r1
 8000522:	601a      	str	r2, [r3, #0]
}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <set_AF_num>:

void set_AF_num(pin_type* pin, uint8_t num) {
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]
	uint8_t reg_H_L = pin->pin_num < 8 ? 0 : 1;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	2b07      	cmp	r3, #7
 800053e:	bf8c      	ite	hi
 8000540:	2301      	movhi	r3, #1
 8000542:	2300      	movls	r3, #0
 8000544:	b2db      	uxtb	r3, r3
 8000546:	73fb      	strb	r3, [r7, #15]

	pin->gpio->AFR[reg_H_L] |= (15u & num) << (pin->pin_num * 4);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	7bfa      	ldrb	r2, [r7, #15]
 800054e:	3208      	adds	r2, #8
 8000550:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	f003 020f 	and.w	r2, r3, #15
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	fa02 f103 	lsl.w	r1, r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	7bfa      	ldrb	r2, [r7, #15]
 800056a:	4301      	orrs	r1, r0
 800056c:	3208      	adds	r2, #8
 800056e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <set_input>:

void set_input(pin_type *pin, uint8_t mode) {
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
 8000586:	460b      	mov	r3, r1
 8000588:	70fb      	strb	r3, [r7, #3]
	pin->gpio->MODER &= ~(3u << ((pin->pin_num * 2)));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6819      	ldr	r1, [r3, #0]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	2203      	movs	r2, #3
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	43da      	mvns	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	400a      	ands	r2, r1
 80005a4:	601a      	str	r2, [r3, #0]
	pin->gpio->PUPDR &= ~(3u << ((pin->pin_num * 2)));
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	68d9      	ldr	r1, [r3, #12]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	2203      	movs	r2, #3
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	43da      	mvns	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	400a      	ands	r2, r1
 80005c0:	60da      	str	r2, [r3, #12]

	switch (mode) {
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d015      	beq.n	80005f4 <set_input+0x76>
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	dc21      	bgt.n	8000610 <set_input+0x92>
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d021      	beq.n	8000614 <set_input+0x96>
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d000      	beq.n	80005d6 <set_input+0x58>

	case INPUT_PD:
		pin->gpio->PUPDR |= (PD << ((pin->pin_num * 2)));

	default:
		break;
 80005d4:	e01c      	b.n	8000610 <set_input+0x92>
		pin->gpio->PUPDR |= (PU << ((pin->pin_num * 2)));
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	68da      	ldr	r2, [r3, #12]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	2101      	movs	r1, #1
 80005e4:	fa01 f303 	lsl.w	r3, r1, r3
 80005e8:	4619      	mov	r1, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	430a      	orrs	r2, r1
 80005f0:	60da      	str	r2, [r3, #12]
		break;
 80005f2:	e010      	b.n	8000616 <set_input+0x98>
		pin->gpio->PUPDR |= (PD << ((pin->pin_num * 2)));
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	68da      	ldr	r2, [r3, #12]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	2102      	movs	r1, #2
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	4619      	mov	r1, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	430a      	orrs	r2, r1
 800060e:	60da      	str	r2, [r3, #12]
		break;
 8000610:	bf00      	nop
 8000612:	e000      	b.n	8000616 <set_input+0x98>
		break;
 8000614:	bf00      	nop

	}

}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <set_output>:

void set_output(pin_type *pin, uint8_t mode) {
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	460b      	mov	r3, r1
 800062c:	70fb      	strb	r3, [r7, #3]
	pin->gpio->MODER &= ~(3u << ((pin->pin_num * 2)));
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	6819      	ldr	r1, [r3, #0]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	2203      	movs	r2, #3
 800063c:	fa02 f303 	lsl.w	r3, r2, r3
 8000640:	43da      	mvns	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	400a      	ands	r2, r1
 8000648:	601a      	str	r2, [r3, #0]
	pin->gpio->MODER |= 1u << ((pin->pin_num * 2));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	6819      	ldr	r1, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	2201      	movs	r2, #1
 8000658:	409a      	lsls	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	430a      	orrs	r2, r1
 8000660:	601a      	str	r2, [r3, #0]

	switch (mode) {
 8000662:	78fb      	ldrb	r3, [r7, #3]
 8000664:	2b03      	cmp	r3, #3
 8000666:	d010      	beq.n	800068a <set_output+0x68>
 8000668:	2b04      	cmp	r3, #4
 800066a:	d000      	beq.n	800066e <set_output+0x4c>
	case OUTPUT_OD:
		pin->gpio->OTYPER |= (OD << (pin->pin_num));
		break;

	default:
		break;
 800066c:	e00e      	b.n	800068c <set_output+0x6a>
		pin->gpio->OTYPER |= (OD << (pin->pin_num));
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	2101      	movs	r1, #1
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	4619      	mov	r1, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	430a      	orrs	r2, r1
 8000686:	605a      	str	r2, [r3, #4]
		break;
 8000688:	e000      	b.n	800068c <set_output+0x6a>
		break;
 800068a:	bf00      	nop
	}

}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <write_pin>:

pin_state write_pin(pin_type *pin, pin_state state) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
	if (state == HIGH) {
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d10b      	bne.n	80006c2 <write_pin+0x2a>
		pin->gpio->ODR |= (1u << pin->pin_num);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	6959      	ldr	r1, [r3, #20]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	2201      	movs	r2, #1
 80006b6:	409a      	lsls	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	430a      	orrs	r2, r1
 80006be:	615a      	str	r2, [r3, #20]
 80006c0:	e00c      	b.n	80006dc <write_pin+0x44>
	} else {
		pin->gpio->ODR &= ~(1u << pin->pin_num);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6959      	ldr	r1, [r3, #20]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	2201      	movs	r2, #1
 80006ce:	fa02 f303 	lsl.w	r3, r2, r3
 80006d2:	43da      	mvns	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	400a      	ands	r2, r1
 80006da:	615a      	str	r2, [r3, #20]
	}

	return state;
 80006dc:	78fb      	ldrb	r3, [r7, #3]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <read_pin>:

pin_state read_pin(pin_type *pin) {
 80006ea:	b480      	push	{r7}
 80006ec:	b085      	sub	sp, #20
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
	uint32_t state = (pin->gpio->IDR >> pin->pin_num) & 1u;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	691a      	ldr	r2, [r3, #16]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	60fb      	str	r3, [r7, #12]

	if (state == 1) {
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d101      	bne.n	8000710 <read_pin+0x26>
		return HIGH;
 800070c:	2301      	movs	r3, #1
 800070e:	e000      	b.n	8000712 <read_pin+0x28>
	}

	return LOW;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <I2C_enable_clock>:
 */
#include "I2C_lib.h"
#include "clocks_lib.h"
#include "NVIC_lib.h"

static void I2C_enable_clock(I2C_handle_type *handle) {
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]

	if (handle->peripheral == I2C1) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a13      	ldr	r2, [pc, #76]	; (800077c <I2C_enable_clock+0x5c>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <I2C_enable_clock+0x20>
		RCC->APB1ENR |= 1u << 21;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <I2C_enable_clock+0x60>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <I2C_enable_clock+0x60>)
 8000738:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800073c:	6413      	str	r3, [r2, #64]	; 0x40
	} else if (handle->peripheral == I2C2) {
		RCC->APB1ENR |= 1u << 22;
	} else if (handle->peripheral == I2C3) {
		RCC->APB1ENR |= 1u << 23;
	}
}
 800073e:	e016      	b.n	800076e <I2C_enable_clock+0x4e>
	} else if (handle->peripheral == I2C2) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <I2C_enable_clock+0x64>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d106      	bne.n	8000758 <I2C_enable_clock+0x38>
		RCC->APB1ENR |= 1u << 22;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <I2C_enable_clock+0x60>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	4a0c      	ldr	r2, [pc, #48]	; (8000780 <I2C_enable_clock+0x60>)
 8000750:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000754:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000756:	e00a      	b.n	800076e <I2C_enable_clock+0x4e>
	} else if (handle->peripheral == I2C3) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <I2C_enable_clock+0x68>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d105      	bne.n	800076e <I2C_enable_clock+0x4e>
		RCC->APB1ENR |= 1u << 23;
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <I2C_enable_clock+0x60>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	4a06      	ldr	r2, [pc, #24]	; (8000780 <I2C_enable_clock+0x60>)
 8000768:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800076c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40005400 	.word	0x40005400
 8000780:	40023800 	.word	0x40023800
 8000784:	40005800 	.word	0x40005800
 8000788:	40005c00 	.word	0x40005c00

0800078c <I2C_enable_IR>:

static void I2C_enable_IR(I2C_handle_type *handle) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

	if (handle->peripheral == I2C1) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <I2C_enable_IR+0x58>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d106      	bne.n	80007ac <I2C_enable_IR+0x20>
		enable_IR(I2C1_EV_IRQn);
 800079e:	201f      	movs	r0, #31
 80007a0:	f000 f944 	bl	8000a2c <enable_IR>
		enable_IR(I2C1_ER_IRQn);
 80007a4:	2020      	movs	r0, #32
 80007a6:	f000 f941 	bl	8000a2c <enable_IR>
		enable_IR(I2C2_ER_IRQn);
	} else if (handle->peripheral == I2C3) {
		enable_IR(I2C3_EV_IRQn);
		enable_IR(I2C3_ER_IRQn);
	}
}
 80007aa:	e016      	b.n	80007da <I2C_enable_IR+0x4e>
	} else if (handle->peripheral == I2C2) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <I2C_enable_IR+0x5c>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d106      	bne.n	80007c4 <I2C_enable_IR+0x38>
		enable_IR(I2C2_EV_IRQn);
 80007b6:	2021      	movs	r0, #33	; 0x21
 80007b8:	f000 f938 	bl	8000a2c <enable_IR>
		enable_IR(I2C2_ER_IRQn);
 80007bc:	2022      	movs	r0, #34	; 0x22
 80007be:	f000 f935 	bl	8000a2c <enable_IR>
}
 80007c2:	e00a      	b.n	80007da <I2C_enable_IR+0x4e>
	} else if (handle->peripheral == I2C3) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a08      	ldr	r2, [pc, #32]	; (80007ec <I2C_enable_IR+0x60>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d105      	bne.n	80007da <I2C_enable_IR+0x4e>
		enable_IR(I2C3_EV_IRQn);
 80007ce:	2048      	movs	r0, #72	; 0x48
 80007d0:	f000 f92c 	bl	8000a2c <enable_IR>
		enable_IR(I2C3_ER_IRQn);
 80007d4:	2049      	movs	r0, #73	; 0x49
 80007d6:	f000 f929 	bl	8000a2c <enable_IR>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40005400 	.word	0x40005400
 80007e8:	40005800 	.word	0x40005800
 80007ec:	40005c00 	.word	0x40005c00

080007f0 <I2C_init>:

void I2C_init(I2C_handle_type *handle) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	I2C_pins_init();
 80007f8:	f000 fdf6 	bl	80013e8 <I2C_pins_init>
	I2C_enable_clock(handle);
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ff8f 	bl	8000720 <I2C_enable_clock>
	I2C_enable_IR(handle);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffc2 	bl	800078c <I2C_enable_IR>

	//Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
	uint8_t APB1_clk_MHz = get_APB1_clock() / 1000000;
 8000808:	f000 fb72 	bl	8000ef0 <get_APB1_clock>
 800080c:	4603      	mov	r3, r0
 800080e:	4a18      	ldr	r2, [pc, #96]	; (8000870 <I2C_init+0x80>)
 8000810:	fba2 2303 	umull	r2, r3, r2, r3
 8000814:	0c9b      	lsrs	r3, r3, #18
 8000816:	73fb      	strb	r3, [r7, #15]
	handle->peripheral->CR2 |= 0x1Fu & APB1_clk_MHz;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6859      	ldr	r1, [r3, #4]
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	f003 021f 	and.w	r2, r3, #31
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	430a      	orrs	r2, r1
 800082a:	605a      	str	r2, [r3, #4]

	//Configure the clock control registers
	uint16_t ccr = 5000 / (APB1_clk_MHz / 1000);
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <I2C_init+0x84>)
 8000830:	fb82 1203 	smull	r1, r2, r2, r3
 8000834:	1192      	asrs	r2, r2, #6
 8000836:	17db      	asrs	r3, r3, #31
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	f241 3288 	movw	r2, #5000	; 0x1388
 800083e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000842:	81bb      	strh	r3, [r7, #12]
	handle->peripheral->CCR = ccr;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	89ba      	ldrh	r2, [r7, #12]
 800084a:	61da      	str	r2, [r3, #28]

	//Configure the rise time register
	handle->peripheral->TRISE = ccr + 1;
 800084c:	89bb      	ldrh	r3, [r7, #12]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	621a      	str	r2, [r3, #32]

	//enable interrupts
	handle->peripheral->CR2 |= 7u << 8;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	685a      	ldr	r2, [r3, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8000864:	605a      	str	r2, [r3, #4]
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	431bde83 	.word	0x431bde83
 8000874:	10624dd3 	.word	0x10624dd3

08000878 <handle_start_condition>:

	return 0;

}

static void handle_start_condition(I2C_handle_type *handle) {
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

	if (handle->addressing_mode == I2C_7_BIT_ADDRESSING) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d105      	bne.n	8000894 <handle_start_condition+0x1c>

		handle->peripheral->DR = handle->slave_address;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	88da      	ldrh	r2, [r3, #6]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	611a      	str	r2, [r3, #16]
		uint8_t header = 0xF0;
		uint8_t bits_9_8 = handle->slave_address >> 8;

		header |= (0b11 << 1) & bits_9_8;
	}
}
 8000892:	e00d      	b.n	80008b0 <handle_start_condition+0x38>
		uint8_t header = 0xF0;
 8000894:	23f0      	movs	r3, #240	; 0xf0
 8000896:	73fb      	strb	r3, [r7, #15]
		uint8_t bits_9_8 = handle->slave_address >> 8;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	88db      	ldrh	r3, [r3, #6]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	b29b      	uxth	r3, r3
 80008a0:	73bb      	strb	r3, [r7, #14]
		header |= (0b11 << 1) & bits_9_8;
 80008a2:	7bbb      	ldrb	r3, [r7, #14]
 80008a4:	f003 0306 	and.w	r3, r3, #6
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	73fb      	strb	r3, [r7, #15]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <I2C_handle_EV>:

void I2C_handle_EV(I2C_handle_type *handle) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

	if (handle->peripheral->SR1 & 1u) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d003      	beq.n	80008da <I2C_handle_EV+0x1e>
		//start condition
		handle_start_condition(handle);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ffd0 	bl	8000878 <handle_start_condition>
			handle->peripheral->CR1 &= ~1u;
			handle->status = I2C_STATUS_IDLE;

		}
	}
}
 80008d8:	e04c      	b.n	8000974 <I2C_handle_EV+0xb8>
	} else if (handle->peripheral->SR1 & (1u << 3)) {
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	f003 0308 	and.w	r3, r3, #8
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d005      	beq.n	80008f4 <I2C_handle_EV+0x38>
		handle->peripheral->DR = handle->slave_address;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	88da      	ldrh	r2, [r3, #6]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	611a      	str	r2, [r3, #16]
}
 80008f2:	e03f      	b.n	8000974 <I2C_handle_EV+0xb8>
	} else if (handle->peripheral->SR1 & 2u) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d00c      	beq.n	800091c <I2C_handle_EV+0x60>
		handle->peripheral->DR = *(handle->data++);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	1c59      	adds	r1, r3, #1
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	6091      	str	r1, [r2, #8]
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	611a      	str	r2, [r3, #16]
		(void) handle->peripheral->SR2;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	699b      	ldr	r3, [r3, #24]
}
 800091a:	e02b      	b.n	8000974 <I2C_handle_EV+0xb8>
	} else if (handle->peripheral->SR1 & (1u << 7)) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	2b00      	cmp	r3, #0
 8000928:	d024      	beq.n	8000974 <I2C_handle_EV+0xb8>
		handle->peripheral->DR = *(handle->data++);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	1c59      	adds	r1, r3, #1
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	6091      	str	r1, [r2, #8]
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	611a      	str	r2, [r3, #16]
		if (--handle->data_len == 0) {
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d112      	bne.n	8000974 <I2C_handle_EV+0xb8>
			handle->peripheral->CR1 |= 1u << 9;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800095c:	601a      	str	r2, [r3, #0]
			handle->peripheral->CR1 &= ~1u;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f022 0201 	bic.w	r2, r2, #1
 800096c:	601a      	str	r2, [r3, #0]
			handle->status = I2C_STATUS_IDLE;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2200      	movs	r2, #0
 8000972:	741a      	strb	r2, [r3, #16]
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <I2C_handle_ER>:

uint8_t I2C_handle_ER(I2C_handle_type *handle) {
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	uint8_t error_code;

	if (handle->peripheral->SR1 & (1u << 8)) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <I2C_handle_ER+0x1c>
		error_code = 8;
 8000992:	2308      	movs	r3, #8
 8000994:	73fb      	strb	r3, [r7, #15]
 8000996:	e01c      	b.n	80009d2 <I2C_handle_ER+0x56>
	} else if (handle->peripheral->SR1 & (1u << 10)) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d002      	beq.n	80009ac <I2C_handle_ER+0x30>
		error_code = 10;
 80009a6:	230a      	movs	r3, #10
 80009a8:	73fb      	strb	r3, [r7, #15]
 80009aa:	e012      	b.n	80009d2 <I2C_handle_ER+0x56>
	} else if (handle->peripheral->SR1 & (1u << 11)) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d002      	beq.n	80009c0 <I2C_handle_ER+0x44>
		error_code = 11;
 80009ba:	230b      	movs	r3, #11
 80009bc:	73fb      	strb	r3, [r7, #15]
 80009be:	e008      	b.n	80009d2 <I2C_handle_ER+0x56>
	} else if (handle->peripheral->SR1 & (1u << 14)) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <I2C_handle_ER+0x56>
		error_code = 14;
 80009ce:	230e      	movs	r3, #14
 80009d0:	73fb      	strb	r3, [r7, #15]
	}

	handle->peripheral->CR1 &= ~1u;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f022 0201 	bic.w	r2, r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
	handle->status = I2C_STATUS_IDLE;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	741a      	strb	r2, [r3, #16]

	return error_code;
 80009e8:	7bfb      	ldrb	r3, [r7, #15]

}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <calculate_ISER_values>:
#include "NVIC_lib.h"
#include "stm32f4xx.h"

static void calculate_ISER_values(uint8_t IRQn, uint8_t *buf) {
 80009f6:	b480      	push	{r7}
 80009f8:	b085      	sub	sp, #20
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	6039      	str	r1, [r7, #0]
 8000a00:	71fb      	strb	r3, [r7, #7]

	uint8_t ISER_num = IRQn / 32;
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	095b      	lsrs	r3, r3, #5
 8000a06:	73fb      	strb	r3, [r7, #15]
	uint8_t ISER_pos = IRQn % 32;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 031f 	and.w	r3, r3, #31
 8000a0e:	73bb      	strb	r3, [r7, #14]

	buf[0] = ISER_num;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	7bfa      	ldrb	r2, [r7, #15]
 8000a14:	701a      	strb	r2, [r3, #0]
	buf[1] = ISER_pos;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	7bba      	ldrb	r2, [r7, #14]
 8000a1c:	701a      	strb	r2, [r3, #0]

}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <enable_IR>:

void enable_IR(uint8_t IRQn) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]

	uint8_t ISER_values[2];
	calculate_ISER_values(IRQn, ISER_values);
 8000a36:	f107 020c 	add.w	r2, r7, #12
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ffd9 	bl	80009f6 <calculate_ISER_values>

	NVIC->ISER[ISER_values[0]] |= 1u << ISER_values[1];
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <enable_IR+0x3c>)
 8000a46:	7b3a      	ldrb	r2, [r7, #12]
 8000a48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a4c:	7b7b      	ldrb	r3, [r7, #13]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	2301      	movs	r3, #1
 8000a52:	408b      	lsls	r3, r1
 8000a54:	4904      	ldr	r1, [pc, #16]	; (8000a68 <enable_IR+0x3c>)
 8000a56:	7b38      	ldrb	r0, [r7, #12]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	e000e100 	.word	0xe000e100

08000a6c <enable_uart_clock>:
 *      Author: toni
 */
#include "UART_lib.h"
#include "clocks_lib.h"

static void enable_uart_clock(USART_TypeDef* uart) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

	if (uart == USART2) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <enable_uart_clock+0x54>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d106      	bne.n	8000a8a <enable_uart_clock+0x1e>
		RCC->APB1ENR |= 1u << 17;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <enable_uart_clock+0x58>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <enable_uart_clock+0x58>)
 8000a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a86:	6413      	str	r3, [r2, #64]	; 0x40
		RCC->APB2ENR |= 1u << 4;
	} else if (uart == USART6) {
		RCC->APB2ENR |= 1u << 5;
	}

}
 8000a88:	e014      	b.n	8000ab4 <enable_uart_clock+0x48>
	} else if (uart == USART1) {
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <enable_uart_clock+0x5c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d106      	bne.n	8000aa0 <enable_uart_clock+0x34>
		RCC->APB2ENR |= 1u << 4;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <enable_uart_clock+0x58>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <enable_uart_clock+0x58>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a9e:	e009      	b.n	8000ab4 <enable_uart_clock+0x48>
	} else if (uart == USART6) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <enable_uart_clock+0x60>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d105      	bne.n	8000ab4 <enable_uart_clock+0x48>
		RCC->APB2ENR |= 1u << 5;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <enable_uart_clock+0x58>)
 8000aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aac:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <enable_uart_clock+0x58>)
 8000aae:	f043 0320 	orr.w	r3, r3, #32
 8000ab2:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	40004400 	.word	0x40004400
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40011000 	.word	0x40011000
 8000acc:	40011400 	.word	0x40011400

08000ad0 <set_BRR>:

static void set_BRR(uint32_t baudrate, USART_TypeDef* uart) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
	uint32_t clk_speed;
	if (uart == USART2) {
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <set_BRR+0x34>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d103      	bne.n	8000aea <set_BRR+0x1a>
		clk_speed = get_APB1_clock();
 8000ae2:	f000 fa05 	bl	8000ef0 <get_APB1_clock>
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	e002      	b.n	8000af0 <set_BRR+0x20>
	} else {
		clk_speed = get_APB2_clock();
 8000aea:	f000 fa0d 	bl	8000f08 <get_APB2_clock>
 8000aee:	60f8      	str	r0, [r7, #12]
	}

	uart->BRR = clk_speed / baudrate;
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	609a      	str	r2, [r3, #8]
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40004400 	.word	0x40004400

08000b08 <uart_init>:


void uart_init(USART_TypeDef* uart, uint8_t word_length, uint8_t stop_bits, uint32_t baudrate) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	460b      	mov	r3, r1
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	4613      	mov	r3, r2
 8000b18:	72bb      	strb	r3, [r7, #10]
	enable_uart_clock(uart);
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff ffa6 	bl	8000a6c <enable_uart_clock>

	uart_pins_init();
 8000b20:	f000 fc40 	bl	80013a4 <uart_pins_init>

	//Enable the USART
	uart->CR1 |= 1u << 13;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	60da      	str	r2, [r3, #12]

	//Program the M bit in USART_CR1 to define the word length
	uart->CR1 |= word_length << 12;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	7afa      	ldrb	r2, [r7, #11]
 8000b36:	0312      	lsls	r2, r2, #12
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	60da      	str	r2, [r3, #12]

	//Program the number of stop bits in USART_CR2.
	uart->CR2 |= stop_bits << 12;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	7aba      	ldrb	r2, [r7, #10]
 8000b44:	0312      	lsls	r2, r2, #12
 8000b46:	431a      	orrs	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	611a      	str	r2, [r3, #16]

	//Select the desired baud rate using the baud rate register USART_BRR
	set_BRR(baudrate, uart);
 8000b4c:	68f9      	ldr	r1, [r7, #12]
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffbe 	bl	8000ad0 <set_BRR>

	//Set the RE bit USART_CR1. This enables the receiver which begins searching for a start bit.
	uart->CR1 |= 1u << 2;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	f043 0204 	orr.w	r2, r3, #4
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	60da      	str	r2, [r3, #12]

}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <uart_transmit_data>:

void uart_transmit_data(USART_TypeDef* uart, uint8_t* data_buffer, uint32_t len) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]

	//Set the TE bit in USART_CR1 to send an idle frame as first transmission.
	uart->CR1 |= 1u << 3;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	f043 0208 	orr.w	r2, r3, #8
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	60da      	str	r2, [r3, #12]

	//Write the data to send in the USART_DR register (this clears the TXE bit). Repeat this
	//for each data to be transmitted in case of single buffer.
	for (int i = 0; i < len; i++) {
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	e010      	b.n	8000ba8 <uart_transmit_data+0x40>
		uart->DR = data_buffer[i];
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	605a      	str	r2, [r3, #4]

		while (!(uart->SR & (1u << 7)));
 8000b94:	bf00      	nop
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f9      	beq.n	8000b96 <uart_transmit_data+0x2e>
	for (int i = 0; i < len; i++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8ea      	bhi.n	8000b86 <uart_transmit_data+0x1e>
	//After writing the last data into the USART_DR register, wait until TC=1. This indicates
	//that the transmission of the last frame is complete. This is required for instance when
	//the USART is disabled or enters the Halt mode to avoid corrupting the last
	//transmission.

	while(!(uart->SR & (1u << 6)));
 8000bb0:	bf00      	nop
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f9      	beq.n	8000bb2 <uart_transmit_data+0x4a>

	//disable transmission and clear TC bit
	uint32_t temp = uart->SR;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	613b      	str	r3, [r7, #16]
	uart->DR = 0;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
	(void) temp;
	uart->CR1 &= ~(1u << 3);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	f023 0208 	bic.w	r2, r3, #8
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	60da      	str	r2, [r3, #12]


}
 8000bd6:	bf00      	nop
 8000bd8:	371c      	adds	r7, #28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <get_AHB_prescaler>:

static void select_clk_source(uint8_t clk_source) {
	RCC->CFGR |= clk_source;
}

static uint16_t get_AHB_prescaler() {
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
	uint8_t bits = (15u << 4) & RCC->CFGR;
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <get_AHB_prescaler+0x94>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	f023 030f 	bic.w	r3, r3, #15
 8000bf4:	717b      	strb	r3, [r7, #5]
	uint16_t AHB_prescaler;

	if (!(bits & 8u)) {
 8000bf6:	797b      	ldrb	r3, [r7, #5]
 8000bf8:	f003 0308 	and.w	r3, r3, #8
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d101      	bne.n	8000c04 <get_AHB_prescaler+0x20>
		return 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e032      	b.n	8000c6a <get_AHB_prescaler+0x86>
	}

	switch (bits) {
 8000c04:	797b      	ldrb	r3, [r7, #5]
 8000c06:	3b08      	subs	r3, #8
 8000c08:	2b07      	cmp	r3, #7
 8000c0a:	d82d      	bhi.n	8000c68 <get_AHB_prescaler+0x84>
 8000c0c:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <get_AHB_prescaler+0x30>)
 8000c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c12:	bf00      	nop
 8000c14:	08000c35 	.word	0x08000c35
 8000c18:	08000c3b 	.word	0x08000c3b
 8000c1c:	08000c41 	.word	0x08000c41
 8000c20:	08000c47 	.word	0x08000c47
 8000c24:	08000c4d 	.word	0x08000c4d
 8000c28:	08000c53 	.word	0x08000c53
 8000c2c:	08000c59 	.word	0x08000c59
 8000c30:	08000c61 	.word	0x08000c61
	case AHB_PRESCALER_2:
		AHB_prescaler = 2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	80fb      	strh	r3, [r7, #6]
		break;
 8000c38:	e016      	b.n	8000c68 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_4:
		AHB_prescaler = 4;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	80fb      	strh	r3, [r7, #6]
		break;
 8000c3e:	e013      	b.n	8000c68 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_8:
		AHB_prescaler = 8;
 8000c40:	2308      	movs	r3, #8
 8000c42:	80fb      	strh	r3, [r7, #6]
		break;
 8000c44:	e010      	b.n	8000c68 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_16:
		AHB_prescaler = 16;
 8000c46:	2310      	movs	r3, #16
 8000c48:	80fb      	strh	r3, [r7, #6]
		break;
 8000c4a:	e00d      	b.n	8000c68 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_64:
		AHB_prescaler = 64;
 8000c4c:	2340      	movs	r3, #64	; 0x40
 8000c4e:	80fb      	strh	r3, [r7, #6]
		break;
 8000c50:	e00a      	b.n	8000c68 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_128:
		AHB_prescaler = 128;
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	80fb      	strh	r3, [r7, #6]
		break;
 8000c56:	e007      	b.n	8000c68 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_256:
		AHB_prescaler = 256;
 8000c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5c:	80fb      	strh	r3, [r7, #6]
		break;
 8000c5e:	e003      	b.n	8000c68 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_512:
		AHB_prescaler = 512;
 8000c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c64:	80fb      	strh	r3, [r7, #6]
		break;
 8000c66:	bf00      	nop
	}

	return AHB_prescaler;
 8000c68:	88fb      	ldrh	r3, [r7, #6]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <get_PLLM>:



static uint8_t get_PLLM() {
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

	return RCC->PLLCFGR & 63u;
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <get_PLLM+0x1c>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c8a:	b2db      	uxtb	r3, r3
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <get_PLLN>:

static uint16_t get_PLLN() {
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

	return (RCC->PLLCFGR & (511u << 6)) >> 6;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <get_PLLN+0x1c>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	099b      	lsrs	r3, r3, #6
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cac:	b29b      	uxth	r3, r3
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	40023800 	.word	0x40023800

08000cbc <get_PLLP>:

static uint8_t get_PLLP() {
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
	uint8_t PLLP;

	switch ((RCC->PLLCFGR & (3u << 16)) >> 16) {
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <get_PLLP+0x54>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	0c1b      	lsrs	r3, r3, #16
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d817      	bhi.n	8000d00 <get_PLLP+0x44>
 8000cd0:	a201      	add	r2, pc, #4	; (adr r2, 8000cd8 <get_PLLP+0x1c>)
 8000cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd6:	bf00      	nop
 8000cd8:	08000ce9 	.word	0x08000ce9
 8000cdc:	08000cef 	.word	0x08000cef
 8000ce0:	08000cf5 	.word	0x08000cf5
 8000ce4:	08000cfb 	.word	0x08000cfb
	case PLLP_2:
		PLLP = 2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	71fb      	strb	r3, [r7, #7]
		break;
 8000cec:	e008      	b.n	8000d00 <get_PLLP+0x44>
	case PLLP_4:
		PLLP = 4;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	71fb      	strb	r3, [r7, #7]
		break;
 8000cf2:	e005      	b.n	8000d00 <get_PLLP+0x44>
	case PLLP_6:
		PLLP = 6;
 8000cf4:	2306      	movs	r3, #6
 8000cf6:	71fb      	strb	r3, [r7, #7]
		break;
 8000cf8:	e002      	b.n	8000d00 <get_PLLP+0x44>
	case PLLP_8:
		PLLP = 8;
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	71fb      	strb	r3, [r7, #7]
		break;
 8000cfe:	bf00      	nop
	}

	return PLLP;
 8000d00:	79fb      	ldrb	r3, [r7, #7]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <get_clk_value>:

static uint32_t get_clk_value(uint8_t clk_source) {
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
	uint32_t clk_value;
	if (clk_source == HSI) {
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <get_clk_value+0x16>
		clk_value = 16000000;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <get_clk_value+0x30>)
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	e004      	b.n	8000d34 <get_clk_value+0x20>
	} else if (clk_source == HSE) {
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d101      	bne.n	8000d34 <get_clk_value+0x20>
		clk_value = 8000000;
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <get_clk_value+0x34>)
 8000d32:	60fb      	str	r3, [r7, #12]
	}

	return clk_value;
 8000d34:	68fb      	ldr	r3, [r7, #12]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	00f42400 	.word	0x00f42400
 8000d48:	007a1200 	.word	0x007a1200

08000d4c <calculate_PLL_clk>:

static uint32_t calculate_PLL_clk(uint32_t clk_value, uint8_t PLLM,
		uint16_t PLLN, uint8_t PLLP) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	4608      	mov	r0, r1
 8000d56:	4611      	mov	r1, r2
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	70fb      	strb	r3, [r7, #3]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	803b      	strh	r3, [r7, #0]
 8000d62:	4613      	mov	r3, r2
 8000d64:	70bb      	strb	r3, [r7, #2]

	return clk_value / PLLM * PLLN / PLLP;
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	883a      	ldrh	r2, [r7, #0]
 8000d70:	fb02 f203 	mul.w	r2, r2, r3
 8000d74:	78bb      	ldrb	r3, [r7, #2]
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <get_APB1_prescaler>:
	RCC->CFGR |= AHB_prescaler << 4;
	RCC->CFGR |= APB1_prescaler << 10;
	RCC->CFGR |= APB2_prescaler << 13;
}

uint8_t get_APB1_prescaler() {
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
	uint8_t bits = ((7u << 10) & RCC->CFGR) >> 10;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <get_APB1_prescaler+0x68>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	0a9b      	lsrs	r3, r3, #10
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	71bb      	strb	r3, [r7, #6]
	uint8_t APB1_prescaler;

	if (!(bits & 4u)) {
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <get_APB1_prescaler+0x22>
		return 1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e01b      	b.n	8000de2 <get_APB1_prescaler+0x5a>
	}

	switch (bits) {
 8000daa:	79bb      	ldrb	r3, [r7, #6]
 8000dac:	3b04      	subs	r3, #4
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d816      	bhi.n	8000de0 <get_APB1_prescaler+0x58>
 8000db2:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <get_APB1_prescaler+0x30>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000dc9 	.word	0x08000dc9
 8000dbc:	08000dcf 	.word	0x08000dcf
 8000dc0:	08000dd5 	.word	0x08000dd5
 8000dc4:	08000ddb 	.word	0x08000ddb
	case APBx_PRESCALER_2:
		APB1_prescaler = 2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	71fb      	strb	r3, [r7, #7]
		break;
 8000dcc:	e008      	b.n	8000de0 <get_APB1_prescaler+0x58>
	case APBx_PRESCALER_4:
		APB1_prescaler = 4;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	71fb      	strb	r3, [r7, #7]
		break;
 8000dd2:	e005      	b.n	8000de0 <get_APB1_prescaler+0x58>
	case APBx_PRESCALER_8:
		APB1_prescaler = 8;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	71fb      	strb	r3, [r7, #7]
		break;
 8000dd8:	e002      	b.n	8000de0 <get_APB1_prescaler+0x58>
	case APBx_PRESCALER_16:
		APB1_prescaler = 16;
 8000dda:	2310      	movs	r3, #16
 8000ddc:	71fb      	strb	r3, [r7, #7]
		break;
 8000dde:	bf00      	nop
	}

	return APB1_prescaler;
 8000de0:	79fb      	ldrb	r3, [r7, #7]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <get_APB2_prescaler>:

uint8_t get_APB2_prescaler() {
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	uint8_t bits = (7u << 13) & RCC->CFGR;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <get_APB2_prescaler+0x64>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	717b      	strb	r3, [r7, #5]
	uint16_t APB2_prescaler;

	if (!(bits & 4u)) {
 8000e02:	797b      	ldrb	r3, [r7, #5]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d101      	bne.n	8000e10 <get_APB2_prescaler+0x1c>
		return 1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e01d      	b.n	8000e4c <get_APB2_prescaler+0x58>
	}

	switch (bits) {
 8000e10:	797b      	ldrb	r3, [r7, #5]
 8000e12:	3b04      	subs	r3, #4
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d817      	bhi.n	8000e48 <get_APB2_prescaler+0x54>
 8000e18:	a201      	add	r2, pc, #4	; (adr r2, 8000e20 <get_APB2_prescaler+0x2c>)
 8000e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1e:	bf00      	nop
 8000e20:	08000e31 	.word	0x08000e31
 8000e24:	08000e37 	.word	0x08000e37
 8000e28:	08000e3d 	.word	0x08000e3d
 8000e2c:	08000e43 	.word	0x08000e43
	case APBx_PRESCALER_2:
		APB2_prescaler = 2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	80fb      	strh	r3, [r7, #6]
		break;
 8000e34:	e008      	b.n	8000e48 <get_APB2_prescaler+0x54>
	case APBx_PRESCALER_4:
		APB2_prescaler = 4;
 8000e36:	2304      	movs	r3, #4
 8000e38:	80fb      	strh	r3, [r7, #6]
		break;
 8000e3a:	e005      	b.n	8000e48 <get_APB2_prescaler+0x54>
	case APBx_PRESCALER_8:
		APB2_prescaler = 8;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	80fb      	strh	r3, [r7, #6]
		break;
 8000e40:	e002      	b.n	8000e48 <get_APB2_prescaler+0x54>
	case APBx_PRESCALER_16:
		APB2_prescaler = 16;
 8000e42:	2310      	movs	r3, #16
 8000e44:	80fb      	strh	r3, [r7, #6]
		break;
 8000e46:	bf00      	nop
	}

	return APB2_prescaler;
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	b2db      	uxtb	r3, r3
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	40023800 	.word	0x40023800

08000e5c <get_SYSCLK>:

uint32_t get_SYSCLK() {
 8000e5c:	b5b0      	push	{r4, r5, r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

	uint8_t clk_source = 3u & RCC->CFGR;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <get_SYSCLK+0x70>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	70fb      	strb	r3, [r7, #3]
	uint32_t clk_speed;

	if (clk_source == HSI || clk_source == HSE) {
 8000e6e:	78fb      	ldrb	r3, [r7, #3]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <get_SYSCLK+0x1e>
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d107      	bne.n	8000e8a <get_SYSCLK+0x2e>
		clk_speed = get_clk_value(clk_source);
 8000e7a:	78fb      	ldrb	r3, [r7, #3]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff49 	bl	8000d14 <get_clk_value>
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	bf00      	nop

		return calculate_PLL_clk(clk_speed, get_PLLM(), get_PLLN(), get_PLLP());

	}

	return clk_speed;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	e01b      	b.n	8000ec2 <get_SYSCLK+0x66>
		if ((1u << 22) & RCC->PLLCFGR) {
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <get_SYSCLK+0x70>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <get_SYSCLK+0x40>
			clk_speed = 8000000;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <get_SYSCLK+0x74>)
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	e001      	b.n	8000ea0 <get_SYSCLK+0x44>
			clk_speed = 16000000;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <get_SYSCLK+0x78>)
 8000e9e:	607b      	str	r3, [r7, #4]
		return calculate_PLL_clk(clk_speed, get_PLLM(), get_PLLN(), get_PLLP());
 8000ea0:	f7ff feec 	bl	8000c7c <get_PLLM>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461c      	mov	r4, r3
 8000ea8:	f7ff fef8 	bl	8000c9c <get_PLLN>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461d      	mov	r5, r3
 8000eb0:	f7ff ff04 	bl	8000cbc <get_PLLP>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	462a      	mov	r2, r5
 8000eb8:	4621      	mov	r1, r4
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff46 	bl	8000d4c <calculate_PLL_clk>
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	007a1200 	.word	0x007a1200
 8000ed4:	00f42400 	.word	0x00f42400

08000ed8 <get_AHB_clock>:

uint32_t get_AHB_clock() {
 8000ed8:	b598      	push	{r3, r4, r7, lr}
 8000eda:	af00      	add	r7, sp, #0

	return get_SYSCLK() / get_AHB_prescaler();
 8000edc:	f7ff ffbe 	bl	8000e5c <get_SYSCLK>
 8000ee0:	4604      	mov	r4, r0
 8000ee2:	f7ff fe7f 	bl	8000be4 <get_AHB_prescaler>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	bd98      	pop	{r3, r4, r7, pc}

08000ef0 <get_APB1_clock>:

uint32_t get_APB1_clock() {
 8000ef0:	b598      	push	{r3, r4, r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

	return get_AHB_clock() / get_APB1_prescaler();
 8000ef4:	f7ff fff0 	bl	8000ed8 <get_AHB_clock>
 8000ef8:	4604      	mov	r4, r0
 8000efa:	f7ff ff45 	bl	8000d88 <get_APB1_prescaler>
 8000efe:	4603      	mov	r3, r0
 8000f00:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	bd98      	pop	{r3, r4, r7, pc}

08000f08 <get_APB2_clock>:

uint32_t get_APB2_clock() {
 8000f08:	b598      	push	{r3, r4, r7, lr}
 8000f0a:	af00      	add	r7, sp, #0

	return get_AHB_clock() / get_APB2_prescaler();
 8000f0c:	f7ff ffe4 	bl	8000ed8 <get_AHB_clock>
 8000f10:	4604      	mov	r4, r0
 8000f12:	f7ff ff6f 	bl	8000df4 <get_APB2_prescaler>
 8000f16:	4603      	mov	r3, r0
 8000f18:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	bd98      	pop	{r3, r4, r7, pc}

08000f20 <enable_timer_clock>:
 *      Author: toni
 */
#include "delay_timer_lib.h"
#include "clocks_lib.h"

static void enable_timer_clock(TIM_TypeDef *timer) {
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	if (timer == TIM1) {
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a2e      	ldr	r2, [pc, #184]	; (8000fe4 <enable_timer_clock+0xc4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d106      	bne.n	8000f3e <enable_timer_clock+0x1e>
		RCC->APB2ENR |= 1u;
 8000f30:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f34:	4a2c      	ldr	r2, [pc, #176]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6453      	str	r3, [r2, #68]	; 0x44
	} else if (timer == TIM10) {
		RCC->APB2ENR |= 1u << 17;
	} else if (timer == TIM11) {
		RCC->APB2ENR |= 1u << 18;
	}
}
 8000f3c:	e04b      	b.n	8000fd6 <enable_timer_clock+0xb6>
	} else if (timer == TIM2) {
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f44:	d106      	bne.n	8000f54 <enable_timer_clock+0x34>
		RCC->APB1ENR |= 1u;
 8000f46:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f52:	e040      	b.n	8000fd6 <enable_timer_clock+0xb6>
	} else if (timer == TIM3) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a25      	ldr	r2, [pc, #148]	; (8000fec <enable_timer_clock+0xcc>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d106      	bne.n	8000f6a <enable_timer_clock+0x4a>
		RCC->APB1ENR |= 2u;
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f68:	e035      	b.n	8000fd6 <enable_timer_clock+0xb6>
	} else if (timer == TIM4) {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a20      	ldr	r2, [pc, #128]	; (8000ff0 <enable_timer_clock+0xd0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d106      	bne.n	8000f80 <enable_timer_clock+0x60>
		RCC->APB1ENR |= 4u;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f7e:	e02a      	b.n	8000fd6 <enable_timer_clock+0xb6>
	} else if (timer == TIM5) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <enable_timer_clock+0xd4>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d106      	bne.n	8000f96 <enable_timer_clock+0x76>
		RCC->APB1ENR |= 8u;
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f94:	e01f      	b.n	8000fd6 <enable_timer_clock+0xb6>
	} else if (timer == TIM9) {
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <enable_timer_clock+0xd8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d106      	bne.n	8000fac <enable_timer_clock+0x8c>
		RCC->APB2ENR |= 1u << 16;
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a11      	ldr	r2, [pc, #68]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000faa:	e014      	b.n	8000fd6 <enable_timer_clock+0xb6>
	} else if (timer == TIM10) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <enable_timer_clock+0xdc>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d106      	bne.n	8000fc2 <enable_timer_clock+0xa2>
		RCC->APB2ENR |= 1u << 17;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbe:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000fc0:	e009      	b.n	8000fd6 <enable_timer_clock+0xb6>
	} else if (timer == TIM11) {
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <enable_timer_clock+0xe0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d105      	bne.n	8000fd6 <enable_timer_clock+0xb6>
		RCC->APB2ENR |= 1u << 18;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <enable_timer_clock+0xc8>)
 8000fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd4:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40010000 	.word	0x40010000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40000400 	.word	0x40000400
 8000ff0:	40000800 	.word	0x40000800
 8000ff4:	40000c00 	.word	0x40000c00
 8000ff8:	40014000 	.word	0x40014000
 8000ffc:	40014400 	.word	0x40014400
 8001000:	40014800 	.word	0x40014800

08001004 <get_timer_base_clock>:

static uint32_t get_timer_base_clock(TIM_TypeDef *timer) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	uint32_t clk_speed;
	uint8_t prescaler;

	if (timer == TIM2 || timer == TIM3 || timer == TIM4 || timer == TIM5) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001012:	d00b      	beq.n	800102c <get_timer_base_clock+0x28>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <get_timer_base_clock+0x5c>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d007      	beq.n	800102c <get_timer_base_clock+0x28>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a11      	ldr	r2, [pc, #68]	; (8001064 <get_timer_base_clock+0x60>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d003      	beq.n	800102c <get_timer_base_clock+0x28>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a10      	ldr	r2, [pc, #64]	; (8001068 <get_timer_base_clock+0x64>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d107      	bne.n	800103c <get_timer_base_clock+0x38>
		clk_speed = get_APB1_clock();
 800102c:	f7ff ff60 	bl	8000ef0 <get_APB1_clock>
 8001030:	60f8      	str	r0, [r7, #12]
		prescaler = get_APB1_prescaler();
 8001032:	f7ff fea9 	bl	8000d88 <get_APB1_prescaler>
 8001036:	4603      	mov	r3, r0
 8001038:	72fb      	strb	r3, [r7, #11]
 800103a:	e006      	b.n	800104a <get_timer_base_clock+0x46>
	} else {
		clk_speed = get_APB2_clock();
 800103c:	f7ff ff64 	bl	8000f08 <get_APB2_clock>
 8001040:	60f8      	str	r0, [r7, #12]
		prescaler = get_APB2_prescaler();
 8001042:	f7ff fed7 	bl	8000df4 <get_APB2_prescaler>
 8001046:	4603      	mov	r3, r0
 8001048:	72fb      	strb	r3, [r7, #11]
	}

	if (prescaler != 1) {
 800104a:	7afb      	ldrb	r3, [r7, #11]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d002      	beq.n	8001056 <get_timer_base_clock+0x52>
		clk_speed *= 2;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
	}

	return clk_speed;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40000400 	.word	0x40000400
 8001064:	40000800 	.word	0x40000800
 8001068:	40000c00 	.word	0x40000c00

0800106c <get_timer_clock>:

static uint32_t get_timer_clock(TIM_TypeDef *timer) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

	uint16_t prescaler = timer->PSC;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001078:	81fb      	strh	r3, [r7, #14]

	return get_timer_base_clock(timer) / (prescaler + 1);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffc2 	bl	8001004 <get_timer_base_clock>
 8001080:	4602      	mov	r2, r0
 8001082:	89fb      	ldrh	r3, [r7, #14]
 8001084:	3301      	adds	r3, #1
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <init_timer>:

void init_timer(TIM_TypeDef *timer, uint16_t prescaler) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	807b      	strh	r3, [r7, #2]
	enable_timer_clock(timer);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ff3e 	bl	8000f20 <enable_timer_clock>
	timer->PSC = prescaler - 1;
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	461a      	mov	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28

}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <delay>:

uint8_t delay(uint32_t ms, TIM_TypeDef *timer) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
	uint32_t max = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]

	if (timer == TIM2 || timer == TIM5) {
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010cc:	d003      	beq.n	80010d6 <delay+0x1e>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <delay+0xa0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d103      	bne.n	80010de <delay+0x26>
		max--;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3b01      	subs	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	e002      	b.n	80010e4 <delay+0x2c>
	} else {
		max = 65535;
 80010de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e2:	617b      	str	r3, [r7, #20]
	}

	uint32_t timer_clock = get_timer_clock(timer);
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f7ff ffc1 	bl	800106c <get_timer_clock>
 80010ea:	6138      	str	r0, [r7, #16]
	uint8_t status = ms < (max / (timer_clock / 1000)) ? OK : OF_ERROR;
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4a1b      	ldr	r2, [pc, #108]	; (800115c <delay+0xa4>)
 80010f0:	fba2 2303 	umull	r2, r3, r2, r3
 80010f4:	099b      	lsrs	r3, r3, #6
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	429a      	cmp	r2, r3
 8001100:	bf2c      	ite	cs
 8001102:	2301      	movcs	r3, #1
 8001104:	2300      	movcc	r3, #0
 8001106:	b2db      	uxtb	r3, r3
 8001108:	73fb      	strb	r3, [r7, #15]

	if (status == OK) {
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d11d      	bne.n	800114c <delay+0x94>
		timer->ARR = ms * (timer_clock / 1000) - 1;
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <delay+0xa4>)
 8001114:	fba2 2303 	umull	r2, r3, r2, r3
 8001118:	099b      	lsrs	r3, r3, #6
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	fb02 f303 	mul.w	r3, r2, r3
 8001120:	1e5a      	subs	r2, r3, #1
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	62da      	str	r2, [r3, #44]	; 0x2c
		timer->CR1 |= 1u;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f043 0201 	orr.w	r2, r3, #1
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	601a      	str	r2, [r3, #0]
		while (!(timer->SR & 1u));
 8001132:	bf00      	nop
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f9      	beq.n	8001134 <delay+0x7c>
		timer->SR &= ~1u;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	f023 0201 	bic.w	r2, r3, #1
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	611a      	str	r2, [r3, #16]
	}


	return status;
 800114c:	7bfb      	ldrb	r3, [r7, #15]

}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40000c00 	.word	0x40000c00
 800115c:	10624dd3 	.word	0x10624dd3

08001160 <read_bit>:
uint16_t temperature_temp;
uint16_t humidity_temp;

int bits_read;

static void read_bit(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	pin_state value = read_pin(&dht22);
 8001166:	482b      	ldr	r0, [pc, #172]	; (8001214 <read_bit+0xb4>)
 8001168:	f7ff fabf 	bl	80006ea <read_pin>
 800116c:	4603      	mov	r3, r0
 800116e:	71fb      	strb	r3, [r7, #7]

	if (bits_read == 32) {
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <read_bit+0xb8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b20      	cmp	r3, #32
 8001176:	d11a      	bne.n	80011ae <read_bit+0x4e>

		disable_EXTI(10);
 8001178:	200a      	movs	r0, #10
 800117a:	f7ff f905 	bl	8000388 <disable_EXTI>

		dht22_data.temperature = temperature_temp;
 800117e:	4b27      	ldr	r3, [pc, #156]	; (800121c <read_bit+0xbc>)
 8001180:	881a      	ldrh	r2, [r3, #0]
 8001182:	4b27      	ldr	r3, [pc, #156]	; (8001220 <read_bit+0xc0>)
 8001184:	801a      	strh	r2, [r3, #0]
		dht22_data.humidity = humidity_temp;
 8001186:	4b27      	ldr	r3, [pc, #156]	; (8001224 <read_bit+0xc4>)
 8001188:	881a      	ldrh	r2, [r3, #0]
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <read_bit+0xc0>)
 800118c:	805a      	strh	r2, [r3, #2]

		temperature_temp = 0;
 800118e:	4b23      	ldr	r3, [pc, #140]	; (800121c <read_bit+0xbc>)
 8001190:	2200      	movs	r2, #0
 8001192:	801a      	strh	r2, [r3, #0]
		humidity_temp = 0;
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <read_bit+0xc4>)
 8001196:	2200      	movs	r2, #0
 8001198:	801a      	strh	r2, [r3, #0]
		bits_read = -1;
 800119a:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <read_bit+0xb8>)
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	601a      	str	r2, [r3, #0]

		dht_status = SLEEPING;
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <read_bit+0xc8>)
 80011a4:	2203      	movs	r2, #3
 80011a6:	701a      	strb	r2, [r3, #0]
		dht22_application_callback();
 80011a8:	f000 f8e8 	bl	800137c <dht22_application_callback>
 80011ac:	e028      	b.n	8001200 <read_bit+0xa0>

	} else if (bits_read < 16) {
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <read_bit+0xb8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b0f      	cmp	r3, #15
 80011b4:	dc10      	bgt.n	80011d8 <read_bit+0x78>

		humidity_temp |= (value << (15 - bits_read));
 80011b6:	79fa      	ldrb	r2, [r7, #7]
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <read_bit+0xb8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f1c3 030f 	rsb	r3, r3, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <read_bit+0xc4>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <read_bit+0xc4>)
 80011d4:	801a      	strh	r2, [r3, #0]
 80011d6:	e013      	b.n	8001200 <read_bit+0xa0>

	} else if (bits_read < 32) {
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <read_bit+0xb8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b1f      	cmp	r3, #31
 80011de:	dc0f      	bgt.n	8001200 <read_bit+0xa0>

		temperature_temp |= (value << (31 - bits_read));
 80011e0:	79fa      	ldrb	r2, [r7, #7]
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <read_bit+0xb8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f1c3 031f 	rsb	r3, r3, #31
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <read_bit+0xbc>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <read_bit+0xbc>)
 80011fe:	801a      	strh	r2, [r3, #0]

	}

	bits_read++;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <read_bit+0xb8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <read_bit+0xb8>)
 8001208:	6013      	str	r3, [r2, #0]

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000144 	.word	0x20000144
 8001218:	2000013c 	.word	0x2000013c
 800121c:	2000012e 	.word	0x2000012e
 8001220:	20000134 	.word	0x20000134
 8001224:	2000012c 	.word	0x2000012c
 8001228:	20000140 	.word	0x20000140

0800122c <dht22_handle_data_pin_IT>:

void dht22_handle_data_pin_IT() {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	IR_timer_micros(35);
 8001230:	2023      	movs	r0, #35	; 0x23
 8001232:	f000 f9d7 	bl	80015e4 <IR_timer_micros>

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <dht22_handle_delay_IT>:


void dht22_handle_delay_IT(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

	if (dht_status == INITIALIZING) {
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <dht22_handle_delay_IT+0x4c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d10a      	bne.n	800125e <dht22_handle_delay_IT+0x22>

		dht_status = INITIALIZING_2;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <dht22_handle_delay_IT+0x4c>)
 800124a:	2202      	movs	r2, #2
 800124c:	701a      	strb	r2, [r3, #0]

		set_input(&dht22, INPUT_PU);
 800124e:	2101      	movs	r1, #1
 8001250:	480e      	ldr	r0, [pc, #56]	; (800128c <dht22_handle_delay_IT+0x50>)
 8001252:	f7ff f994 	bl	800057e <set_input>

		IR_timer_micros(185);
 8001256:	20b9      	movs	r0, #185	; 0xb9
 8001258:	f000 f9c4 	bl	80015e4 <IR_timer_micros>

	} else if (dht_status == SENDING_DATA) {
		read_bit();
	}

}
 800125c:	e012      	b.n	8001284 <dht22_handle_delay_IT+0x48>
	} else if (dht_status == INITIALIZING_2) {
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <dht22_handle_delay_IT+0x4c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d108      	bne.n	8001278 <dht22_handle_delay_IT+0x3c>
		dht_status = SENDING_DATA;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <dht22_handle_delay_IT+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
		enable_EXTI(10, EXTI_GPIOA, EXTI_RE);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	200a      	movs	r0, #10
 8001272:	f7ff f821 	bl	80002b8 <enable_EXTI>
}
 8001276:	e005      	b.n	8001284 <dht22_handle_delay_IT+0x48>
	} else if (dht_status == SENDING_DATA) {
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <dht22_handle_delay_IT+0x4c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <dht22_handle_delay_IT+0x48>
		read_bit();
 8001280:	f7ff ff6e 	bl	8001160 <read_bit>
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000140 	.word	0x20000140
 800128c:	20000144 	.word	0x20000144

08001290 <init_dht22>:

void init_dht22() {
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

	dht_status = SLEEPING;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <init_dht22+0x20>)
 8001296:	2203      	movs	r2, #3
 8001298:	701a      	strb	r2, [r3, #0]

	init_pin(&dht22, GPIOA, 10, INPUT_PU);
 800129a:	2301      	movs	r3, #1
 800129c:	220a      	movs	r2, #10
 800129e:	4905      	ldr	r1, [pc, #20]	; (80012b4 <init_dht22+0x24>)
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <init_dht22+0x28>)
 80012a2:	f7ff f90d 	bl	80004c0 <init_pin>
	enable_IR(EXTI15_10_IRQn);
 80012a6:	2028      	movs	r0, #40	; 0x28
 80012a8:	f7ff fbc0 	bl	8000a2c <enable_IR>

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000140 	.word	0x20000140
 80012b4:	40020000 	.word	0x40020000
 80012b8:	20000144 	.word	0x20000144

080012bc <dht22_get_data>:

uint8_t dht22_get_data() {
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	if (dht_status == SLEEPING) {
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <dht22_get_data+0x34>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d10e      	bne.n	80012e6 <dht22_get_data+0x2a>
		dht_status = INITIALIZING;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <dht22_get_data+0x34>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]

		set_output(&dht22, OUTPUT_PP);
 80012ce:	2103      	movs	r1, #3
 80012d0:	4808      	ldr	r0, [pc, #32]	; (80012f4 <dht22_get_data+0x38>)
 80012d2:	f7ff f9a6 	bl	8000622 <set_output>
		write_pin(&dht22, LOW);
 80012d6:	2100      	movs	r1, #0
 80012d8:	4806      	ldr	r0, [pc, #24]	; (80012f4 <dht22_get_data+0x38>)
 80012da:	f7ff f9dd 	bl	8000698 <write_pin>
		IR_timer_micros(1000);
 80012de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e2:	f000 f97f 	bl	80015e4 <IR_timer_micros>

	}

	return dht_status;
 80012e6:	4b02      	ldr	r3, [pc, #8]	; (80012f0 <dht22_get_data+0x34>)
 80012e8:	781b      	ldrb	r3, [r3, #0]

}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000140 	.word	0x20000140
 80012f4:	20000144 	.word	0x20000144

080012f8 <SysTick_Handler>:
#include "dht22.h"
#include "main.h"
#include "UART_lib.h"
#include "stdio.h"

void SysTick_Handler() {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <SysTick_Handler+0x14>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
	dht22_handle_delay_IT();
 8001302:	f7ff ff9b 	bl	800123c <dht22_handle_delay_IT>

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler() {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0

	dht22_handle_data_pin_IT();
 8001314:	f7ff ff8a 	bl	800122c <dht22_handle_data_pin_IT>
	EXTI->PR |= 1u << 10;
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <EXTI15_10_IRQHandler+0x18>)
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	4a02      	ldr	r2, [pc, #8]	; (8001328 <EXTI15_10_IRQHandler+0x18>)
 800131e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001322:	6153      	str	r3, [r2, #20]

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40013c00 	.word	0x40013c00

0800132c <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler() {
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	I2C_handle_EV(&I2C_handle);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <I2C1_EV_IRQHandler+0x10>)
 8001332:	f7ff fac3 	bl	80008bc <I2C_handle_EV>
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000014c 	.word	0x2000014c

08001340 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler() {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	uint8_t error_code = I2C_handle_ER(&I2C_handle);
 8001346:	480a      	ldr	r0, [pc, #40]	; (8001370 <I2C1_ER_IRQHandler+0x30>)
 8001348:	f7ff fb18 	bl	800097c <I2C_handle_ER>
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
	char number[2];
	sprintf(number, "%d", error_code);
 8001350:	79fa      	ldrb	r2, [r7, #7]
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <I2C1_ER_IRQHandler+0x34>)
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f9c8 	bl	80016ec <siprintf>

	uart_transmit_data(USART2, (uint8_t*) number, 2);
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2202      	movs	r2, #2
 8001360:	4619      	mov	r1, r3
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <I2C1_ER_IRQHandler+0x38>)
 8001364:	f7ff fc00 	bl	8000b68 <uart_transmit_data>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000014c 	.word	0x2000014c
 8001374:	08002bd0 	.word	0x08002bd0
 8001378:	40004400 	.word	0x40004400

0800137c <dht22_application_callback>:
#include "main.h"
#include "string.h"

pin_type test_pin;

void dht22_application_callback() {
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	printf("%d\n", (int) dht22_data.temperature);
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <dht22_application_callback+0x20>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <dht22_application_callback+0x24>)
 8001388:	f000 f998 	bl	80016bc <iprintf>
	printf("%d\n", (int) dht22_data.humidity);
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <dht22_application_callback+0x20>)
 800138e:	885b      	ldrh	r3, [r3, #2]
 8001390:	4619      	mov	r1, r3
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <dht22_application_callback+0x24>)
 8001394:	f000 f992 	bl	80016bc <iprintf>

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000134 	.word	0x20000134
 80013a0:	08002bd4 	.word	0x08002bd4

080013a4 <uart_pins_init>:

void uart_pins_init() {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
	//pins PA2 and PA3
	pin_type uartTX, uartRX;
	init_pin(&uartTX, GPIOA, 2, alternate_function);
 80013aa:	f107 0008 	add.w	r0, r7, #8
 80013ae:	2305      	movs	r3, #5
 80013b0:	2202      	movs	r2, #2
 80013b2:	490c      	ldr	r1, [pc, #48]	; (80013e4 <uart_pins_init+0x40>)
 80013b4:	f7ff f884 	bl	80004c0 <init_pin>
	init_pin(&uartRX, GPIOA, 3, alternate_function);
 80013b8:	4638      	mov	r0, r7
 80013ba:	2305      	movs	r3, #5
 80013bc:	2203      	movs	r2, #3
 80013be:	4909      	ldr	r1, [pc, #36]	; (80013e4 <uart_pins_init+0x40>)
 80013c0:	f7ff f87e 	bl	80004c0 <init_pin>

	set_AF_num(&uartTX, 7);
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	2107      	movs	r1, #7
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f8ae 	bl	800052c <set_AF_num>
	set_AF_num(&uartRX, 7);
 80013d0:	463b      	mov	r3, r7
 80013d2:	2107      	movs	r1, #7
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f8a9 	bl	800052c <set_AF_num>
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40020000 	.word	0x40020000

080013e8 <I2C_pins_init>:

void I2C_pins_init() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
	pin_type SCL, SDA;
	init_pin(&SCL, GPIOB, 6, alternate_function);
 80013ee:	f107 0008 	add.w	r0, r7, #8
 80013f2:	2305      	movs	r3, #5
 80013f4:	2206      	movs	r2, #6
 80013f6:	490c      	ldr	r1, [pc, #48]	; (8001428 <I2C_pins_init+0x40>)
 80013f8:	f7ff f862 	bl	80004c0 <init_pin>
	init_pin(&SDA, GPIOB, 7, alternate_function);
 80013fc:	4638      	mov	r0, r7
 80013fe:	2305      	movs	r3, #5
 8001400:	2207      	movs	r2, #7
 8001402:	4909      	ldr	r1, [pc, #36]	; (8001428 <I2C_pins_init+0x40>)
 8001404:	f7ff f85c 	bl	80004c0 <init_pin>

	set_AF_num(&SCL, 4);
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	2104      	movs	r1, #4
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f88c 	bl	800052c <set_AF_num>
	set_AF_num(&SDA, 4);
 8001414:	463b      	mov	r3, r7
 8001416:	2104      	movs	r1, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f887 	bl	800052c <set_AF_num>
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40020400 	.word	0x40020400

0800142c <main>:

int main(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0

	init_systick();
 8001432:	f000 f8b5 	bl	80015a0 <init_systick>
	init_timer(TIM2, 1);
 8001436:	2101      	movs	r1, #1
 8001438:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800143c:	f7ff fe29 	bl	8001092 <init_timer>
	init_dht22();
 8001440:	f7ff ff26 	bl	8001290 <init_dht22>

	init_pin(&test_pin, GPIOA, 0, OUTPUT_PP);
 8001444:	2303      	movs	r3, #3
 8001446:	2200      	movs	r2, #0
 8001448:	4918      	ldr	r1, [pc, #96]	; (80014ac <main+0x80>)
 800144a:	4819      	ldr	r0, [pc, #100]	; (80014b0 <main+0x84>)
 800144c:	f7ff f838 	bl	80004c0 <init_pin>

	uart_init(USART2, UART_8BIT, UART_1_STOP_BITS, 115200);
 8001450:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	4816      	ldr	r0, [pc, #88]	; (80014b4 <main+0x88>)
 800145a:	f7ff fb55 	bl	8000b08 <uart_init>
	uint8_t data[] = "moro\n\r";
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <main+0x8c>)
 8001460:	463b      	mov	r3, r7
 8001462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001466:	6018      	str	r0, [r3, #0]
 8001468:	3304      	adds	r3, #4
 800146a:	8019      	strh	r1, [r3, #0]
 800146c:	3302      	adds	r3, #2
 800146e:	0c0a      	lsrs	r2, r1, #16
 8001470:	701a      	strb	r2, [r3, #0]

	memset(&I2C_handle, 0, sizeof(I2C_handle));
 8001472:	2214      	movs	r2, #20
 8001474:	2100      	movs	r1, #0
 8001476:	4811      	ldr	r0, [pc, #68]	; (80014bc <main+0x90>)
 8001478:	f000 f918 	bl	80016ac <memset>
	I2C_handle.addressing_mode = I2C_7_BIT_ADDRESSING;
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <main+0x90>)
 800147e:	2200      	movs	r2, #0
 8001480:	711a      	strb	r2, [r3, #4]
	I2C_handle.peripheral = I2C1;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <main+0x90>)
 8001484:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <main+0x94>)
 8001486:	601a      	str	r2, [r3, #0]

	I2C_init(&I2C_handle);
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <main+0x90>)
 800148a:	f7ff f9b1 	bl	80007f0 <I2C_init>


	while (1) {

		uart_transmit_data(USART2, data, 6);
 800148e:	463b      	mov	r3, r7
 8001490:	2206      	movs	r2, #6
 8001492:	4619      	mov	r1, r3
 8001494:	4807      	ldr	r0, [pc, #28]	; (80014b4 <main+0x88>)
 8001496:	f7ff fb67 	bl	8000b68 <uart_transmit_data>
		dht22_get_data();
 800149a:	f7ff ff0f 	bl	80012bc <dht22_get_data>
		//toggle_pin(&test_pin);
		delay(2000, TIM2);
 800149e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80014a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014a6:	f7ff fe07 	bl	80010b8 <delay>
		uart_transmit_data(USART2, data, 6);
 80014aa:	e7f0      	b.n	800148e <main+0x62>
 80014ac:	40020000 	.word	0x40020000
 80014b0:	20000168 	.word	0x20000168
 80014b4:	40004400 	.word	0x40004400
 80014b8:	08002bd8 	.word	0x08002bd8
 80014bc:	2000014c 	.word	0x2000014c
 80014c0:	40005400 	.word	0x40005400

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f4:	f000 f8b0 	bl	8001658 <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20018000 	.word	0x20018000
 8001524:	00000400 	.word	0x00000400
 8001528:	20000080 	.word	0x20000080
 800152c:	20000180 	.word	0x20000180

08001530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <SystemInit+0x20>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <SystemInit+0x20>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <timer>:
#include <systick_IR_timer_lib.h>
#include "clocks_lib.h"
#include "stm32f4xx.h"

static void timer(uint32_t s, uint32_t unit) {
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]

	SysTick->CTRL = 0;
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <timer+0x48>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <timer+0x48>)
 8001566:	2200      	movs	r2, #0
 8001568:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <timer+0x48>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]

	SysTick->LOAD |= s * unit - 1;
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <timer+0x48>)
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	fb01 f303 	mul.w	r3, r1, r3
 800157c:	3b01      	subs	r3, #1
 800157e:	4907      	ldr	r1, [pc, #28]	; (800159c <timer+0x48>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
	SysTick->CTRL |= 7u;
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <timer+0x48>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <timer+0x48>)
 800158a:	f043 0307 	orr.w	r3, r3, #7
 800158e:	6013      	str	r3, [r2, #0]

}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e010 	.word	0xe000e010

080015a0 <init_systick>:

void init_systick() {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0

	uint32_t processor_clock = get_AHB_clock();
 80015a6:	f7ff fc97 	bl	8000ed8 <get_AHB_clock>
 80015aa:	6078      	str	r0, [r7, #4]
	MILLIS = processor_clock / 1000;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <init_systick+0x34>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	099b      	lsrs	r3, r3, #6
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <init_systick+0x38>)
 80015b8:	6013      	str	r3, [r2, #0]
	MICROS = processor_clock / 1000000;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <init_systick+0x3c>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	0c9b      	lsrs	r3, r3, #18
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <init_systick+0x40>)
 80015c8:	701a      	strb	r2, [r3, #0]
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	10624dd3 	.word	0x10624dd3
 80015d8:	20000130 	.word	0x20000130
 80015dc:	431bde83 	.word	0x431bde83
 80015e0:	20000138 	.word	0x20000138

080015e4 <IR_timer_micros>:

	timer(ms, MILLIS);

}

void IR_timer_micros(uint32_t micros) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

	timer(micros, MICROS);
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <IR_timer_micros+0x1c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffae 	bl	8001554 <timer>

}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000138 	.word	0x20000138

08001604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800160a:	490e      	ldr	r1, [pc, #56]	; (8001644 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001620:	4c0b      	ldr	r4, [pc, #44]	; (8001650 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800162e:	f7ff ff7f 	bl	8001530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001632:	f000 f817 	bl	8001664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001636:	f7ff fef9 	bl	800142c <main>
  bx  lr    
 800163a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800163c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001648:	08002c80 	.word	0x08002c80
  ldr r2, =_sbss
 800164c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001650:	20000180 	.word	0x20000180

08001654 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC_IRQHandler>
	...

08001658 <__errno>:
 8001658:	4b01      	ldr	r3, [pc, #4]	; (8001660 <__errno+0x8>)
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000000 	.word	0x20000000

08001664 <__libc_init_array>:
 8001664:	b570      	push	{r4, r5, r6, lr}
 8001666:	4d0d      	ldr	r5, [pc, #52]	; (800169c <__libc_init_array+0x38>)
 8001668:	4c0d      	ldr	r4, [pc, #52]	; (80016a0 <__libc_init_array+0x3c>)
 800166a:	1b64      	subs	r4, r4, r5
 800166c:	10a4      	asrs	r4, r4, #2
 800166e:	2600      	movs	r6, #0
 8001670:	42a6      	cmp	r6, r4
 8001672:	d109      	bne.n	8001688 <__libc_init_array+0x24>
 8001674:	4d0b      	ldr	r5, [pc, #44]	; (80016a4 <__libc_init_array+0x40>)
 8001676:	4c0c      	ldr	r4, [pc, #48]	; (80016a8 <__libc_init_array+0x44>)
 8001678:	f001 fa9e 	bl	8002bb8 <_init>
 800167c:	1b64      	subs	r4, r4, r5
 800167e:	10a4      	asrs	r4, r4, #2
 8001680:	2600      	movs	r6, #0
 8001682:	42a6      	cmp	r6, r4
 8001684:	d105      	bne.n	8001692 <__libc_init_array+0x2e>
 8001686:	bd70      	pop	{r4, r5, r6, pc}
 8001688:	f855 3b04 	ldr.w	r3, [r5], #4
 800168c:	4798      	blx	r3
 800168e:	3601      	adds	r6, #1
 8001690:	e7ee      	b.n	8001670 <__libc_init_array+0xc>
 8001692:	f855 3b04 	ldr.w	r3, [r5], #4
 8001696:	4798      	blx	r3
 8001698:	3601      	adds	r6, #1
 800169a:	e7f2      	b.n	8001682 <__libc_init_array+0x1e>
 800169c:	08002c78 	.word	0x08002c78
 80016a0:	08002c78 	.word	0x08002c78
 80016a4:	08002c78 	.word	0x08002c78
 80016a8:	08002c7c 	.word	0x08002c7c

080016ac <memset>:
 80016ac:	4402      	add	r2, r0
 80016ae:	4603      	mov	r3, r0
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d100      	bne.n	80016b6 <memset+0xa>
 80016b4:	4770      	bx	lr
 80016b6:	f803 1b01 	strb.w	r1, [r3], #1
 80016ba:	e7f9      	b.n	80016b0 <memset+0x4>

080016bc <iprintf>:
 80016bc:	b40f      	push	{r0, r1, r2, r3}
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <iprintf+0x2c>)
 80016c0:	b513      	push	{r0, r1, r4, lr}
 80016c2:	681c      	ldr	r4, [r3, #0]
 80016c4:	b124      	cbz	r4, 80016d0 <iprintf+0x14>
 80016c6:	69a3      	ldr	r3, [r4, #24]
 80016c8:	b913      	cbnz	r3, 80016d0 <iprintf+0x14>
 80016ca:	4620      	mov	r0, r4
 80016cc:	f000 f886 	bl	80017dc <__sinit>
 80016d0:	ab05      	add	r3, sp, #20
 80016d2:	9a04      	ldr	r2, [sp, #16]
 80016d4:	68a1      	ldr	r1, [r4, #8]
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	4620      	mov	r0, r4
 80016da:	f000 faff 	bl	8001cdc <_vfiprintf_r>
 80016de:	b002      	add	sp, #8
 80016e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016e4:	b004      	add	sp, #16
 80016e6:	4770      	bx	lr
 80016e8:	20000000 	.word	0x20000000

080016ec <siprintf>:
 80016ec:	b40e      	push	{r1, r2, r3}
 80016ee:	b500      	push	{lr}
 80016f0:	b09c      	sub	sp, #112	; 0x70
 80016f2:	ab1d      	add	r3, sp, #116	; 0x74
 80016f4:	9002      	str	r0, [sp, #8]
 80016f6:	9006      	str	r0, [sp, #24]
 80016f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80016fc:	4809      	ldr	r0, [pc, #36]	; (8001724 <siprintf+0x38>)
 80016fe:	9107      	str	r1, [sp, #28]
 8001700:	9104      	str	r1, [sp, #16]
 8001702:	4909      	ldr	r1, [pc, #36]	; (8001728 <siprintf+0x3c>)
 8001704:	f853 2b04 	ldr.w	r2, [r3], #4
 8001708:	9105      	str	r1, [sp, #20]
 800170a:	6800      	ldr	r0, [r0, #0]
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	a902      	add	r1, sp, #8
 8001710:	f000 f9ba 	bl	8001a88 <_svfiprintf_r>
 8001714:	9b02      	ldr	r3, [sp, #8]
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	b01c      	add	sp, #112	; 0x70
 800171c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001720:	b003      	add	sp, #12
 8001722:	4770      	bx	lr
 8001724:	20000000 	.word	0x20000000
 8001728:	ffff0208 	.word	0xffff0208

0800172c <std>:
 800172c:	2300      	movs	r3, #0
 800172e:	b510      	push	{r4, lr}
 8001730:	4604      	mov	r4, r0
 8001732:	e9c0 3300 	strd	r3, r3, [r0]
 8001736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800173a:	6083      	str	r3, [r0, #8]
 800173c:	8181      	strh	r1, [r0, #12]
 800173e:	6643      	str	r3, [r0, #100]	; 0x64
 8001740:	81c2      	strh	r2, [r0, #14]
 8001742:	6183      	str	r3, [r0, #24]
 8001744:	4619      	mov	r1, r3
 8001746:	2208      	movs	r2, #8
 8001748:	305c      	adds	r0, #92	; 0x5c
 800174a:	f7ff ffaf 	bl	80016ac <memset>
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <std+0x38>)
 8001750:	6263      	str	r3, [r4, #36]	; 0x24
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <std+0x3c>)
 8001754:	62a3      	str	r3, [r4, #40]	; 0x28
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <std+0x40>)
 8001758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <std+0x44>)
 800175c:	6224      	str	r4, [r4, #32]
 800175e:	6323      	str	r3, [r4, #48]	; 0x30
 8001760:	bd10      	pop	{r4, pc}
 8001762:	bf00      	nop
 8001764:	08002285 	.word	0x08002285
 8001768:	080022a7 	.word	0x080022a7
 800176c:	080022df 	.word	0x080022df
 8001770:	08002303 	.word	0x08002303

08001774 <_cleanup_r>:
 8001774:	4901      	ldr	r1, [pc, #4]	; (800177c <_cleanup_r+0x8>)
 8001776:	f000 b8af 	b.w	80018d8 <_fwalk_reent>
 800177a:	bf00      	nop
 800177c:	080025dd 	.word	0x080025dd

08001780 <__sfmoreglue>:
 8001780:	b570      	push	{r4, r5, r6, lr}
 8001782:	1e4a      	subs	r2, r1, #1
 8001784:	2568      	movs	r5, #104	; 0x68
 8001786:	4355      	muls	r5, r2
 8001788:	460e      	mov	r6, r1
 800178a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800178e:	f000 f8c5 	bl	800191c <_malloc_r>
 8001792:	4604      	mov	r4, r0
 8001794:	b140      	cbz	r0, 80017a8 <__sfmoreglue+0x28>
 8001796:	2100      	movs	r1, #0
 8001798:	e9c0 1600 	strd	r1, r6, [r0]
 800179c:	300c      	adds	r0, #12
 800179e:	60a0      	str	r0, [r4, #8]
 80017a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80017a4:	f7ff ff82 	bl	80016ac <memset>
 80017a8:	4620      	mov	r0, r4
 80017aa:	bd70      	pop	{r4, r5, r6, pc}

080017ac <__sfp_lock_acquire>:
 80017ac:	4801      	ldr	r0, [pc, #4]	; (80017b4 <__sfp_lock_acquire+0x8>)
 80017ae:	f000 b8b3 	b.w	8001918 <__retarget_lock_acquire_recursive>
 80017b2:	bf00      	nop
 80017b4:	20000178 	.word	0x20000178

080017b8 <__sfp_lock_release>:
 80017b8:	4801      	ldr	r0, [pc, #4]	; (80017c0 <__sfp_lock_release+0x8>)
 80017ba:	f000 b8ae 	b.w	800191a <__retarget_lock_release_recursive>
 80017be:	bf00      	nop
 80017c0:	20000178 	.word	0x20000178

080017c4 <__sinit_lock_acquire>:
 80017c4:	4801      	ldr	r0, [pc, #4]	; (80017cc <__sinit_lock_acquire+0x8>)
 80017c6:	f000 b8a7 	b.w	8001918 <__retarget_lock_acquire_recursive>
 80017ca:	bf00      	nop
 80017cc:	20000173 	.word	0x20000173

080017d0 <__sinit_lock_release>:
 80017d0:	4801      	ldr	r0, [pc, #4]	; (80017d8 <__sinit_lock_release+0x8>)
 80017d2:	f000 b8a2 	b.w	800191a <__retarget_lock_release_recursive>
 80017d6:	bf00      	nop
 80017d8:	20000173 	.word	0x20000173

080017dc <__sinit>:
 80017dc:	b510      	push	{r4, lr}
 80017de:	4604      	mov	r4, r0
 80017e0:	f7ff fff0 	bl	80017c4 <__sinit_lock_acquire>
 80017e4:	69a3      	ldr	r3, [r4, #24]
 80017e6:	b11b      	cbz	r3, 80017f0 <__sinit+0x14>
 80017e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017ec:	f7ff bff0 	b.w	80017d0 <__sinit_lock_release>
 80017f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80017f4:	6523      	str	r3, [r4, #80]	; 0x50
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <__sinit+0x68>)
 80017f8:	4a13      	ldr	r2, [pc, #76]	; (8001848 <__sinit+0x6c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80017fe:	42a3      	cmp	r3, r4
 8001800:	bf04      	itt	eq
 8001802:	2301      	moveq	r3, #1
 8001804:	61a3      	streq	r3, [r4, #24]
 8001806:	4620      	mov	r0, r4
 8001808:	f000 f820 	bl	800184c <__sfp>
 800180c:	6060      	str	r0, [r4, #4]
 800180e:	4620      	mov	r0, r4
 8001810:	f000 f81c 	bl	800184c <__sfp>
 8001814:	60a0      	str	r0, [r4, #8]
 8001816:	4620      	mov	r0, r4
 8001818:	f000 f818 	bl	800184c <__sfp>
 800181c:	2200      	movs	r2, #0
 800181e:	60e0      	str	r0, [r4, #12]
 8001820:	2104      	movs	r1, #4
 8001822:	6860      	ldr	r0, [r4, #4]
 8001824:	f7ff ff82 	bl	800172c <std>
 8001828:	68a0      	ldr	r0, [r4, #8]
 800182a:	2201      	movs	r2, #1
 800182c:	2109      	movs	r1, #9
 800182e:	f7ff ff7d 	bl	800172c <std>
 8001832:	68e0      	ldr	r0, [r4, #12]
 8001834:	2202      	movs	r2, #2
 8001836:	2112      	movs	r1, #18
 8001838:	f7ff ff78 	bl	800172c <std>
 800183c:	2301      	movs	r3, #1
 800183e:	61a3      	str	r3, [r4, #24]
 8001840:	e7d2      	b.n	80017e8 <__sinit+0xc>
 8001842:	bf00      	nop
 8001844:	08002be0 	.word	0x08002be0
 8001848:	08001775 	.word	0x08001775

0800184c <__sfp>:
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184e:	4607      	mov	r7, r0
 8001850:	f7ff ffac 	bl	80017ac <__sfp_lock_acquire>
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <__sfp+0x84>)
 8001856:	681e      	ldr	r6, [r3, #0]
 8001858:	69b3      	ldr	r3, [r6, #24]
 800185a:	b913      	cbnz	r3, 8001862 <__sfp+0x16>
 800185c:	4630      	mov	r0, r6
 800185e:	f7ff ffbd 	bl	80017dc <__sinit>
 8001862:	3648      	adds	r6, #72	; 0x48
 8001864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001868:	3b01      	subs	r3, #1
 800186a:	d503      	bpl.n	8001874 <__sfp+0x28>
 800186c:	6833      	ldr	r3, [r6, #0]
 800186e:	b30b      	cbz	r3, 80018b4 <__sfp+0x68>
 8001870:	6836      	ldr	r6, [r6, #0]
 8001872:	e7f7      	b.n	8001864 <__sfp+0x18>
 8001874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001878:	b9d5      	cbnz	r5, 80018b0 <__sfp+0x64>
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <__sfp+0x88>)
 800187c:	60e3      	str	r3, [r4, #12]
 800187e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001882:	6665      	str	r5, [r4, #100]	; 0x64
 8001884:	f000 f847 	bl	8001916 <__retarget_lock_init_recursive>
 8001888:	f7ff ff96 	bl	80017b8 <__sfp_lock_release>
 800188c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001890:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001894:	6025      	str	r5, [r4, #0]
 8001896:	61a5      	str	r5, [r4, #24]
 8001898:	2208      	movs	r2, #8
 800189a:	4629      	mov	r1, r5
 800189c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80018a0:	f7ff ff04 	bl	80016ac <memset>
 80018a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80018a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80018ac:	4620      	mov	r0, r4
 80018ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018b0:	3468      	adds	r4, #104	; 0x68
 80018b2:	e7d9      	b.n	8001868 <__sfp+0x1c>
 80018b4:	2104      	movs	r1, #4
 80018b6:	4638      	mov	r0, r7
 80018b8:	f7ff ff62 	bl	8001780 <__sfmoreglue>
 80018bc:	4604      	mov	r4, r0
 80018be:	6030      	str	r0, [r6, #0]
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d1d5      	bne.n	8001870 <__sfp+0x24>
 80018c4:	f7ff ff78 	bl	80017b8 <__sfp_lock_release>
 80018c8:	230c      	movs	r3, #12
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	e7ee      	b.n	80018ac <__sfp+0x60>
 80018ce:	bf00      	nop
 80018d0:	08002be0 	.word	0x08002be0
 80018d4:	ffff0001 	.word	0xffff0001

080018d8 <_fwalk_reent>:
 80018d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018dc:	4606      	mov	r6, r0
 80018de:	4688      	mov	r8, r1
 80018e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80018e4:	2700      	movs	r7, #0
 80018e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018ea:	f1b9 0901 	subs.w	r9, r9, #1
 80018ee:	d505      	bpl.n	80018fc <_fwalk_reent+0x24>
 80018f0:	6824      	ldr	r4, [r4, #0]
 80018f2:	2c00      	cmp	r4, #0
 80018f4:	d1f7      	bne.n	80018e6 <_fwalk_reent+0xe>
 80018f6:	4638      	mov	r0, r7
 80018f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018fc:	89ab      	ldrh	r3, [r5, #12]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d907      	bls.n	8001912 <_fwalk_reent+0x3a>
 8001902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001906:	3301      	adds	r3, #1
 8001908:	d003      	beq.n	8001912 <_fwalk_reent+0x3a>
 800190a:	4629      	mov	r1, r5
 800190c:	4630      	mov	r0, r6
 800190e:	47c0      	blx	r8
 8001910:	4307      	orrs	r7, r0
 8001912:	3568      	adds	r5, #104	; 0x68
 8001914:	e7e9      	b.n	80018ea <_fwalk_reent+0x12>

08001916 <__retarget_lock_init_recursive>:
 8001916:	4770      	bx	lr

08001918 <__retarget_lock_acquire_recursive>:
 8001918:	4770      	bx	lr

0800191a <__retarget_lock_release_recursive>:
 800191a:	4770      	bx	lr

0800191c <_malloc_r>:
 800191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191e:	1ccd      	adds	r5, r1, #3
 8001920:	f025 0503 	bic.w	r5, r5, #3
 8001924:	3508      	adds	r5, #8
 8001926:	2d0c      	cmp	r5, #12
 8001928:	bf38      	it	cc
 800192a:	250c      	movcc	r5, #12
 800192c:	2d00      	cmp	r5, #0
 800192e:	4606      	mov	r6, r0
 8001930:	db01      	blt.n	8001936 <_malloc_r+0x1a>
 8001932:	42a9      	cmp	r1, r5
 8001934:	d903      	bls.n	800193e <_malloc_r+0x22>
 8001936:	230c      	movs	r3, #12
 8001938:	6033      	str	r3, [r6, #0]
 800193a:	2000      	movs	r0, #0
 800193c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800193e:	f000 ff27 	bl	8002790 <__malloc_lock>
 8001942:	4921      	ldr	r1, [pc, #132]	; (80019c8 <_malloc_r+0xac>)
 8001944:	680a      	ldr	r2, [r1, #0]
 8001946:	4614      	mov	r4, r2
 8001948:	b99c      	cbnz	r4, 8001972 <_malloc_r+0x56>
 800194a:	4f20      	ldr	r7, [pc, #128]	; (80019cc <_malloc_r+0xb0>)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b923      	cbnz	r3, 800195a <_malloc_r+0x3e>
 8001950:	4621      	mov	r1, r4
 8001952:	4630      	mov	r0, r6
 8001954:	f000 fc86 	bl	8002264 <_sbrk_r>
 8001958:	6038      	str	r0, [r7, #0]
 800195a:	4629      	mov	r1, r5
 800195c:	4630      	mov	r0, r6
 800195e:	f000 fc81 	bl	8002264 <_sbrk_r>
 8001962:	1c43      	adds	r3, r0, #1
 8001964:	d123      	bne.n	80019ae <_malloc_r+0x92>
 8001966:	230c      	movs	r3, #12
 8001968:	6033      	str	r3, [r6, #0]
 800196a:	4630      	mov	r0, r6
 800196c:	f000 ff16 	bl	800279c <__malloc_unlock>
 8001970:	e7e3      	b.n	800193a <_malloc_r+0x1e>
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	1b5b      	subs	r3, r3, r5
 8001976:	d417      	bmi.n	80019a8 <_malloc_r+0x8c>
 8001978:	2b0b      	cmp	r3, #11
 800197a:	d903      	bls.n	8001984 <_malloc_r+0x68>
 800197c:	6023      	str	r3, [r4, #0]
 800197e:	441c      	add	r4, r3
 8001980:	6025      	str	r5, [r4, #0]
 8001982:	e004      	b.n	800198e <_malloc_r+0x72>
 8001984:	6863      	ldr	r3, [r4, #4]
 8001986:	42a2      	cmp	r2, r4
 8001988:	bf0c      	ite	eq
 800198a:	600b      	streq	r3, [r1, #0]
 800198c:	6053      	strne	r3, [r2, #4]
 800198e:	4630      	mov	r0, r6
 8001990:	f000 ff04 	bl	800279c <__malloc_unlock>
 8001994:	f104 000b 	add.w	r0, r4, #11
 8001998:	1d23      	adds	r3, r4, #4
 800199a:	f020 0007 	bic.w	r0, r0, #7
 800199e:	1ac2      	subs	r2, r0, r3
 80019a0:	d0cc      	beq.n	800193c <_malloc_r+0x20>
 80019a2:	1a1b      	subs	r3, r3, r0
 80019a4:	50a3      	str	r3, [r4, r2]
 80019a6:	e7c9      	b.n	800193c <_malloc_r+0x20>
 80019a8:	4622      	mov	r2, r4
 80019aa:	6864      	ldr	r4, [r4, #4]
 80019ac:	e7cc      	b.n	8001948 <_malloc_r+0x2c>
 80019ae:	1cc4      	adds	r4, r0, #3
 80019b0:	f024 0403 	bic.w	r4, r4, #3
 80019b4:	42a0      	cmp	r0, r4
 80019b6:	d0e3      	beq.n	8001980 <_malloc_r+0x64>
 80019b8:	1a21      	subs	r1, r4, r0
 80019ba:	4630      	mov	r0, r6
 80019bc:	f000 fc52 	bl	8002264 <_sbrk_r>
 80019c0:	3001      	adds	r0, #1
 80019c2:	d1dd      	bne.n	8001980 <_malloc_r+0x64>
 80019c4:	e7cf      	b.n	8001966 <_malloc_r+0x4a>
 80019c6:	bf00      	nop
 80019c8:	20000084 	.word	0x20000084
 80019cc:	20000088 	.word	0x20000088

080019d0 <__ssputs_r>:
 80019d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019d4:	688e      	ldr	r6, [r1, #8]
 80019d6:	429e      	cmp	r6, r3
 80019d8:	4682      	mov	sl, r0
 80019da:	460c      	mov	r4, r1
 80019dc:	4690      	mov	r8, r2
 80019de:	461f      	mov	r7, r3
 80019e0:	d838      	bhi.n	8001a54 <__ssputs_r+0x84>
 80019e2:	898a      	ldrh	r2, [r1, #12]
 80019e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80019e8:	d032      	beq.n	8001a50 <__ssputs_r+0x80>
 80019ea:	6825      	ldr	r5, [r4, #0]
 80019ec:	6909      	ldr	r1, [r1, #16]
 80019ee:	eba5 0901 	sub.w	r9, r5, r1
 80019f2:	6965      	ldr	r5, [r4, #20]
 80019f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80019f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80019fc:	3301      	adds	r3, #1
 80019fe:	444b      	add	r3, r9
 8001a00:	106d      	asrs	r5, r5, #1
 8001a02:	429d      	cmp	r5, r3
 8001a04:	bf38      	it	cc
 8001a06:	461d      	movcc	r5, r3
 8001a08:	0553      	lsls	r3, r2, #21
 8001a0a:	d531      	bpl.n	8001a70 <__ssputs_r+0xa0>
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7ff ff85 	bl	800191c <_malloc_r>
 8001a12:	4606      	mov	r6, r0
 8001a14:	b950      	cbnz	r0, 8001a2c <__ssputs_r+0x5c>
 8001a16:	230c      	movs	r3, #12
 8001a18:	f8ca 3000 	str.w	r3, [sl]
 8001a1c:	89a3      	ldrh	r3, [r4, #12]
 8001a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a22:	81a3      	strh	r3, [r4, #12]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a2c:	6921      	ldr	r1, [r4, #16]
 8001a2e:	464a      	mov	r2, r9
 8001a30:	f000 fe86 	bl	8002740 <memcpy>
 8001a34:	89a3      	ldrh	r3, [r4, #12]
 8001a36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a3e:	81a3      	strh	r3, [r4, #12]
 8001a40:	6126      	str	r6, [r4, #16]
 8001a42:	6165      	str	r5, [r4, #20]
 8001a44:	444e      	add	r6, r9
 8001a46:	eba5 0509 	sub.w	r5, r5, r9
 8001a4a:	6026      	str	r6, [r4, #0]
 8001a4c:	60a5      	str	r5, [r4, #8]
 8001a4e:	463e      	mov	r6, r7
 8001a50:	42be      	cmp	r6, r7
 8001a52:	d900      	bls.n	8001a56 <__ssputs_r+0x86>
 8001a54:	463e      	mov	r6, r7
 8001a56:	4632      	mov	r2, r6
 8001a58:	6820      	ldr	r0, [r4, #0]
 8001a5a:	4641      	mov	r1, r8
 8001a5c:	f000 fe7e 	bl	800275c <memmove>
 8001a60:	68a3      	ldr	r3, [r4, #8]
 8001a62:	6822      	ldr	r2, [r4, #0]
 8001a64:	1b9b      	subs	r3, r3, r6
 8001a66:	4432      	add	r2, r6
 8001a68:	60a3      	str	r3, [r4, #8]
 8001a6a:	6022      	str	r2, [r4, #0]
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	e7db      	b.n	8001a28 <__ssputs_r+0x58>
 8001a70:	462a      	mov	r2, r5
 8001a72:	f000 fee9 	bl	8002848 <_realloc_r>
 8001a76:	4606      	mov	r6, r0
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	d1e1      	bne.n	8001a40 <__ssputs_r+0x70>
 8001a7c:	6921      	ldr	r1, [r4, #16]
 8001a7e:	4650      	mov	r0, sl
 8001a80:	f000 fe92 	bl	80027a8 <_free_r>
 8001a84:	e7c7      	b.n	8001a16 <__ssputs_r+0x46>
	...

08001a88 <_svfiprintf_r>:
 8001a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a8c:	4698      	mov	r8, r3
 8001a8e:	898b      	ldrh	r3, [r1, #12]
 8001a90:	061b      	lsls	r3, r3, #24
 8001a92:	b09d      	sub	sp, #116	; 0x74
 8001a94:	4607      	mov	r7, r0
 8001a96:	460d      	mov	r5, r1
 8001a98:	4614      	mov	r4, r2
 8001a9a:	d50e      	bpl.n	8001aba <_svfiprintf_r+0x32>
 8001a9c:	690b      	ldr	r3, [r1, #16]
 8001a9e:	b963      	cbnz	r3, 8001aba <_svfiprintf_r+0x32>
 8001aa0:	2140      	movs	r1, #64	; 0x40
 8001aa2:	f7ff ff3b 	bl	800191c <_malloc_r>
 8001aa6:	6028      	str	r0, [r5, #0]
 8001aa8:	6128      	str	r0, [r5, #16]
 8001aaa:	b920      	cbnz	r0, 8001ab6 <_svfiprintf_r+0x2e>
 8001aac:	230c      	movs	r3, #12
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	e0d1      	b.n	8001c5a <_svfiprintf_r+0x1d2>
 8001ab6:	2340      	movs	r3, #64	; 0x40
 8001ab8:	616b      	str	r3, [r5, #20]
 8001aba:	2300      	movs	r3, #0
 8001abc:	9309      	str	r3, [sp, #36]	; 0x24
 8001abe:	2320      	movs	r3, #32
 8001ac0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ac8:	2330      	movs	r3, #48	; 0x30
 8001aca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001c74 <_svfiprintf_r+0x1ec>
 8001ace:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ad2:	f04f 0901 	mov.w	r9, #1
 8001ad6:	4623      	mov	r3, r4
 8001ad8:	469a      	mov	sl, r3
 8001ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ade:	b10a      	cbz	r2, 8001ae4 <_svfiprintf_r+0x5c>
 8001ae0:	2a25      	cmp	r2, #37	; 0x25
 8001ae2:	d1f9      	bne.n	8001ad8 <_svfiprintf_r+0x50>
 8001ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8001ae8:	d00b      	beq.n	8001b02 <_svfiprintf_r+0x7a>
 8001aea:	465b      	mov	r3, fp
 8001aec:	4622      	mov	r2, r4
 8001aee:	4629      	mov	r1, r5
 8001af0:	4638      	mov	r0, r7
 8001af2:	f7ff ff6d 	bl	80019d0 <__ssputs_r>
 8001af6:	3001      	adds	r0, #1
 8001af8:	f000 80aa 	beq.w	8001c50 <_svfiprintf_r+0x1c8>
 8001afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001afe:	445a      	add	r2, fp
 8001b00:	9209      	str	r2, [sp, #36]	; 0x24
 8001b02:	f89a 3000 	ldrb.w	r3, [sl]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 80a2 	beq.w	8001c50 <_svfiprintf_r+0x1c8>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b16:	f10a 0a01 	add.w	sl, sl, #1
 8001b1a:	9304      	str	r3, [sp, #16]
 8001b1c:	9307      	str	r3, [sp, #28]
 8001b1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b22:	931a      	str	r3, [sp, #104]	; 0x68
 8001b24:	4654      	mov	r4, sl
 8001b26:	2205      	movs	r2, #5
 8001b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b2c:	4851      	ldr	r0, [pc, #324]	; (8001c74 <_svfiprintf_r+0x1ec>)
 8001b2e:	f7fe fb57 	bl	80001e0 <memchr>
 8001b32:	9a04      	ldr	r2, [sp, #16]
 8001b34:	b9d8      	cbnz	r0, 8001b6e <_svfiprintf_r+0xe6>
 8001b36:	06d0      	lsls	r0, r2, #27
 8001b38:	bf44      	itt	mi
 8001b3a:	2320      	movmi	r3, #32
 8001b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b40:	0711      	lsls	r1, r2, #28
 8001b42:	bf44      	itt	mi
 8001b44:	232b      	movmi	r3, #43	; 0x2b
 8001b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8001b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8001b50:	d015      	beq.n	8001b7e <_svfiprintf_r+0xf6>
 8001b52:	9a07      	ldr	r2, [sp, #28]
 8001b54:	4654      	mov	r4, sl
 8001b56:	2000      	movs	r0, #0
 8001b58:	f04f 0c0a 	mov.w	ip, #10
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b62:	3b30      	subs	r3, #48	; 0x30
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	d94e      	bls.n	8001c06 <_svfiprintf_r+0x17e>
 8001b68:	b1b0      	cbz	r0, 8001b98 <_svfiprintf_r+0x110>
 8001b6a:	9207      	str	r2, [sp, #28]
 8001b6c:	e014      	b.n	8001b98 <_svfiprintf_r+0x110>
 8001b6e:	eba0 0308 	sub.w	r3, r0, r8
 8001b72:	fa09 f303 	lsl.w	r3, r9, r3
 8001b76:	4313      	orrs	r3, r2
 8001b78:	9304      	str	r3, [sp, #16]
 8001b7a:	46a2      	mov	sl, r4
 8001b7c:	e7d2      	b.n	8001b24 <_svfiprintf_r+0x9c>
 8001b7e:	9b03      	ldr	r3, [sp, #12]
 8001b80:	1d19      	adds	r1, r3, #4
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	9103      	str	r1, [sp, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bfbb      	ittet	lt
 8001b8a:	425b      	neglt	r3, r3
 8001b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8001b90:	9307      	strge	r3, [sp, #28]
 8001b92:	9307      	strlt	r3, [sp, #28]
 8001b94:	bfb8      	it	lt
 8001b96:	9204      	strlt	r2, [sp, #16]
 8001b98:	7823      	ldrb	r3, [r4, #0]
 8001b9a:	2b2e      	cmp	r3, #46	; 0x2e
 8001b9c:	d10c      	bne.n	8001bb8 <_svfiprintf_r+0x130>
 8001b9e:	7863      	ldrb	r3, [r4, #1]
 8001ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8001ba2:	d135      	bne.n	8001c10 <_svfiprintf_r+0x188>
 8001ba4:	9b03      	ldr	r3, [sp, #12]
 8001ba6:	1d1a      	adds	r2, r3, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	9203      	str	r2, [sp, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bfb8      	it	lt
 8001bb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8001bb4:	3402      	adds	r4, #2
 8001bb6:	9305      	str	r3, [sp, #20]
 8001bb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001c84 <_svfiprintf_r+0x1fc>
 8001bbc:	7821      	ldrb	r1, [r4, #0]
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	4650      	mov	r0, sl
 8001bc2:	f7fe fb0d 	bl	80001e0 <memchr>
 8001bc6:	b140      	cbz	r0, 8001bda <_svfiprintf_r+0x152>
 8001bc8:	2340      	movs	r3, #64	; 0x40
 8001bca:	eba0 000a 	sub.w	r0, r0, sl
 8001bce:	fa03 f000 	lsl.w	r0, r3, r0
 8001bd2:	9b04      	ldr	r3, [sp, #16]
 8001bd4:	4303      	orrs	r3, r0
 8001bd6:	3401      	adds	r4, #1
 8001bd8:	9304      	str	r3, [sp, #16]
 8001bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bde:	4826      	ldr	r0, [pc, #152]	; (8001c78 <_svfiprintf_r+0x1f0>)
 8001be0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001be4:	2206      	movs	r2, #6
 8001be6:	f7fe fafb 	bl	80001e0 <memchr>
 8001bea:	2800      	cmp	r0, #0
 8001bec:	d038      	beq.n	8001c60 <_svfiprintf_r+0x1d8>
 8001bee:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <_svfiprintf_r+0x1f4>)
 8001bf0:	bb1b      	cbnz	r3, 8001c3a <_svfiprintf_r+0x1b2>
 8001bf2:	9b03      	ldr	r3, [sp, #12]
 8001bf4:	3307      	adds	r3, #7
 8001bf6:	f023 0307 	bic.w	r3, r3, #7
 8001bfa:	3308      	adds	r3, #8
 8001bfc:	9303      	str	r3, [sp, #12]
 8001bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c00:	4433      	add	r3, r6
 8001c02:	9309      	str	r3, [sp, #36]	; 0x24
 8001c04:	e767      	b.n	8001ad6 <_svfiprintf_r+0x4e>
 8001c06:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	e7a5      	b.n	8001b5c <_svfiprintf_r+0xd4>
 8001c10:	2300      	movs	r3, #0
 8001c12:	3401      	adds	r4, #1
 8001c14:	9305      	str	r3, [sp, #20]
 8001c16:	4619      	mov	r1, r3
 8001c18:	f04f 0c0a 	mov.w	ip, #10
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c22:	3a30      	subs	r2, #48	; 0x30
 8001c24:	2a09      	cmp	r2, #9
 8001c26:	d903      	bls.n	8001c30 <_svfiprintf_r+0x1a8>
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0c5      	beq.n	8001bb8 <_svfiprintf_r+0x130>
 8001c2c:	9105      	str	r1, [sp, #20]
 8001c2e:	e7c3      	b.n	8001bb8 <_svfiprintf_r+0x130>
 8001c30:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c34:	4604      	mov	r4, r0
 8001c36:	2301      	movs	r3, #1
 8001c38:	e7f0      	b.n	8001c1c <_svfiprintf_r+0x194>
 8001c3a:	ab03      	add	r3, sp, #12
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	462a      	mov	r2, r5
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <_svfiprintf_r+0x1f8>)
 8001c42:	a904      	add	r1, sp, #16
 8001c44:	4638      	mov	r0, r7
 8001c46:	f3af 8000 	nop.w
 8001c4a:	1c42      	adds	r2, r0, #1
 8001c4c:	4606      	mov	r6, r0
 8001c4e:	d1d6      	bne.n	8001bfe <_svfiprintf_r+0x176>
 8001c50:	89ab      	ldrh	r3, [r5, #12]
 8001c52:	065b      	lsls	r3, r3, #25
 8001c54:	f53f af2c 	bmi.w	8001ab0 <_svfiprintf_r+0x28>
 8001c58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c5a:	b01d      	add	sp, #116	; 0x74
 8001c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c60:	ab03      	add	r3, sp, #12
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	462a      	mov	r2, r5
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <_svfiprintf_r+0x1f8>)
 8001c68:	a904      	add	r1, sp, #16
 8001c6a:	4638      	mov	r0, r7
 8001c6c:	f000 f9d4 	bl	8002018 <_printf_i>
 8001c70:	e7eb      	b.n	8001c4a <_svfiprintf_r+0x1c2>
 8001c72:	bf00      	nop
 8001c74:	08002c44 	.word	0x08002c44
 8001c78:	08002c4e 	.word	0x08002c4e
 8001c7c:	00000000 	.word	0x00000000
 8001c80:	080019d1 	.word	0x080019d1
 8001c84:	08002c4a 	.word	0x08002c4a

08001c88 <__sfputc_r>:
 8001c88:	6893      	ldr	r3, [r2, #8]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	b410      	push	{r4}
 8001c90:	6093      	str	r3, [r2, #8]
 8001c92:	da08      	bge.n	8001ca6 <__sfputc_r+0x1e>
 8001c94:	6994      	ldr	r4, [r2, #24]
 8001c96:	42a3      	cmp	r3, r4
 8001c98:	db01      	blt.n	8001c9e <__sfputc_r+0x16>
 8001c9a:	290a      	cmp	r1, #10
 8001c9c:	d103      	bne.n	8001ca6 <__sfputc_r+0x1e>
 8001c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ca2:	f000 bb33 	b.w	800230c <__swbuf_r>
 8001ca6:	6813      	ldr	r3, [r2, #0]
 8001ca8:	1c58      	adds	r0, r3, #1
 8001caa:	6010      	str	r0, [r2, #0]
 8001cac:	7019      	strb	r1, [r3, #0]
 8001cae:	4608      	mov	r0, r1
 8001cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <__sfputs_r>:
 8001cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb8:	4606      	mov	r6, r0
 8001cba:	460f      	mov	r7, r1
 8001cbc:	4614      	mov	r4, r2
 8001cbe:	18d5      	adds	r5, r2, r3
 8001cc0:	42ac      	cmp	r4, r5
 8001cc2:	d101      	bne.n	8001cc8 <__sfputs_r+0x12>
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	e007      	b.n	8001cd8 <__sfputs_r+0x22>
 8001cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ccc:	463a      	mov	r2, r7
 8001cce:	4630      	mov	r0, r6
 8001cd0:	f7ff ffda 	bl	8001c88 <__sfputc_r>
 8001cd4:	1c43      	adds	r3, r0, #1
 8001cd6:	d1f3      	bne.n	8001cc0 <__sfputs_r+0xa>
 8001cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001cdc <_vfiprintf_r>:
 8001cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ce0:	460d      	mov	r5, r1
 8001ce2:	b09d      	sub	sp, #116	; 0x74
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	4698      	mov	r8, r3
 8001ce8:	4606      	mov	r6, r0
 8001cea:	b118      	cbz	r0, 8001cf4 <_vfiprintf_r+0x18>
 8001cec:	6983      	ldr	r3, [r0, #24]
 8001cee:	b90b      	cbnz	r3, 8001cf4 <_vfiprintf_r+0x18>
 8001cf0:	f7ff fd74 	bl	80017dc <__sinit>
 8001cf4:	4b89      	ldr	r3, [pc, #548]	; (8001f1c <_vfiprintf_r+0x240>)
 8001cf6:	429d      	cmp	r5, r3
 8001cf8:	d11b      	bne.n	8001d32 <_vfiprintf_r+0x56>
 8001cfa:	6875      	ldr	r5, [r6, #4]
 8001cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001cfe:	07d9      	lsls	r1, r3, #31
 8001d00:	d405      	bmi.n	8001d0e <_vfiprintf_r+0x32>
 8001d02:	89ab      	ldrh	r3, [r5, #12]
 8001d04:	059a      	lsls	r2, r3, #22
 8001d06:	d402      	bmi.n	8001d0e <_vfiprintf_r+0x32>
 8001d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d0a:	f7ff fe05 	bl	8001918 <__retarget_lock_acquire_recursive>
 8001d0e:	89ab      	ldrh	r3, [r5, #12]
 8001d10:	071b      	lsls	r3, r3, #28
 8001d12:	d501      	bpl.n	8001d18 <_vfiprintf_r+0x3c>
 8001d14:	692b      	ldr	r3, [r5, #16]
 8001d16:	b9eb      	cbnz	r3, 8001d54 <_vfiprintf_r+0x78>
 8001d18:	4629      	mov	r1, r5
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	f000 fb5a 	bl	80023d4 <__swsetup_r>
 8001d20:	b1c0      	cbz	r0, 8001d54 <_vfiprintf_r+0x78>
 8001d22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d24:	07dc      	lsls	r4, r3, #31
 8001d26:	d50e      	bpl.n	8001d46 <_vfiprintf_r+0x6a>
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	b01d      	add	sp, #116	; 0x74
 8001d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d32:	4b7b      	ldr	r3, [pc, #492]	; (8001f20 <_vfiprintf_r+0x244>)
 8001d34:	429d      	cmp	r5, r3
 8001d36:	d101      	bne.n	8001d3c <_vfiprintf_r+0x60>
 8001d38:	68b5      	ldr	r5, [r6, #8]
 8001d3a:	e7df      	b.n	8001cfc <_vfiprintf_r+0x20>
 8001d3c:	4b79      	ldr	r3, [pc, #484]	; (8001f24 <_vfiprintf_r+0x248>)
 8001d3e:	429d      	cmp	r5, r3
 8001d40:	bf08      	it	eq
 8001d42:	68f5      	ldreq	r5, [r6, #12]
 8001d44:	e7da      	b.n	8001cfc <_vfiprintf_r+0x20>
 8001d46:	89ab      	ldrh	r3, [r5, #12]
 8001d48:	0598      	lsls	r0, r3, #22
 8001d4a:	d4ed      	bmi.n	8001d28 <_vfiprintf_r+0x4c>
 8001d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d4e:	f7ff fde4 	bl	800191a <__retarget_lock_release_recursive>
 8001d52:	e7e9      	b.n	8001d28 <_vfiprintf_r+0x4c>
 8001d54:	2300      	movs	r3, #0
 8001d56:	9309      	str	r3, [sp, #36]	; 0x24
 8001d58:	2320      	movs	r3, #32
 8001d5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d62:	2330      	movs	r3, #48	; 0x30
 8001d64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001f28 <_vfiprintf_r+0x24c>
 8001d68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d6c:	f04f 0901 	mov.w	r9, #1
 8001d70:	4623      	mov	r3, r4
 8001d72:	469a      	mov	sl, r3
 8001d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d78:	b10a      	cbz	r2, 8001d7e <_vfiprintf_r+0xa2>
 8001d7a:	2a25      	cmp	r2, #37	; 0x25
 8001d7c:	d1f9      	bne.n	8001d72 <_vfiprintf_r+0x96>
 8001d7e:	ebba 0b04 	subs.w	fp, sl, r4
 8001d82:	d00b      	beq.n	8001d9c <_vfiprintf_r+0xc0>
 8001d84:	465b      	mov	r3, fp
 8001d86:	4622      	mov	r2, r4
 8001d88:	4629      	mov	r1, r5
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	f7ff ff93 	bl	8001cb6 <__sfputs_r>
 8001d90:	3001      	adds	r0, #1
 8001d92:	f000 80aa 	beq.w	8001eea <_vfiprintf_r+0x20e>
 8001d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d98:	445a      	add	r2, fp
 8001d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8001d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80a2 	beq.w	8001eea <_vfiprintf_r+0x20e>
 8001da6:	2300      	movs	r3, #0
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001db0:	f10a 0a01 	add.w	sl, sl, #1
 8001db4:	9304      	str	r3, [sp, #16]
 8001db6:	9307      	str	r3, [sp, #28]
 8001db8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8001dbe:	4654      	mov	r4, sl
 8001dc0:	2205      	movs	r2, #5
 8001dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dc6:	4858      	ldr	r0, [pc, #352]	; (8001f28 <_vfiprintf_r+0x24c>)
 8001dc8:	f7fe fa0a 	bl	80001e0 <memchr>
 8001dcc:	9a04      	ldr	r2, [sp, #16]
 8001dce:	b9d8      	cbnz	r0, 8001e08 <_vfiprintf_r+0x12c>
 8001dd0:	06d1      	lsls	r1, r2, #27
 8001dd2:	bf44      	itt	mi
 8001dd4:	2320      	movmi	r3, #32
 8001dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001dda:	0713      	lsls	r3, r2, #28
 8001ddc:	bf44      	itt	mi
 8001dde:	232b      	movmi	r3, #43	; 0x2b
 8001de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001de4:	f89a 3000 	ldrb.w	r3, [sl]
 8001de8:	2b2a      	cmp	r3, #42	; 0x2a
 8001dea:	d015      	beq.n	8001e18 <_vfiprintf_r+0x13c>
 8001dec:	9a07      	ldr	r2, [sp, #28]
 8001dee:	4654      	mov	r4, sl
 8001df0:	2000      	movs	r0, #0
 8001df2:	f04f 0c0a 	mov.w	ip, #10
 8001df6:	4621      	mov	r1, r4
 8001df8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001dfc:	3b30      	subs	r3, #48	; 0x30
 8001dfe:	2b09      	cmp	r3, #9
 8001e00:	d94e      	bls.n	8001ea0 <_vfiprintf_r+0x1c4>
 8001e02:	b1b0      	cbz	r0, 8001e32 <_vfiprintf_r+0x156>
 8001e04:	9207      	str	r2, [sp, #28]
 8001e06:	e014      	b.n	8001e32 <_vfiprintf_r+0x156>
 8001e08:	eba0 0308 	sub.w	r3, r0, r8
 8001e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8001e10:	4313      	orrs	r3, r2
 8001e12:	9304      	str	r3, [sp, #16]
 8001e14:	46a2      	mov	sl, r4
 8001e16:	e7d2      	b.n	8001dbe <_vfiprintf_r+0xe2>
 8001e18:	9b03      	ldr	r3, [sp, #12]
 8001e1a:	1d19      	adds	r1, r3, #4
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	9103      	str	r1, [sp, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bfbb      	ittet	lt
 8001e24:	425b      	neglt	r3, r3
 8001e26:	f042 0202 	orrlt.w	r2, r2, #2
 8001e2a:	9307      	strge	r3, [sp, #28]
 8001e2c:	9307      	strlt	r3, [sp, #28]
 8001e2e:	bfb8      	it	lt
 8001e30:	9204      	strlt	r2, [sp, #16]
 8001e32:	7823      	ldrb	r3, [r4, #0]
 8001e34:	2b2e      	cmp	r3, #46	; 0x2e
 8001e36:	d10c      	bne.n	8001e52 <_vfiprintf_r+0x176>
 8001e38:	7863      	ldrb	r3, [r4, #1]
 8001e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8001e3c:	d135      	bne.n	8001eaa <_vfiprintf_r+0x1ce>
 8001e3e:	9b03      	ldr	r3, [sp, #12]
 8001e40:	1d1a      	adds	r2, r3, #4
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	9203      	str	r2, [sp, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bfb8      	it	lt
 8001e4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e4e:	3402      	adds	r4, #2
 8001e50:	9305      	str	r3, [sp, #20]
 8001e52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001f38 <_vfiprintf_r+0x25c>
 8001e56:	7821      	ldrb	r1, [r4, #0]
 8001e58:	2203      	movs	r2, #3
 8001e5a:	4650      	mov	r0, sl
 8001e5c:	f7fe f9c0 	bl	80001e0 <memchr>
 8001e60:	b140      	cbz	r0, 8001e74 <_vfiprintf_r+0x198>
 8001e62:	2340      	movs	r3, #64	; 0x40
 8001e64:	eba0 000a 	sub.w	r0, r0, sl
 8001e68:	fa03 f000 	lsl.w	r0, r3, r0
 8001e6c:	9b04      	ldr	r3, [sp, #16]
 8001e6e:	4303      	orrs	r3, r0
 8001e70:	3401      	adds	r4, #1
 8001e72:	9304      	str	r3, [sp, #16]
 8001e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e78:	482c      	ldr	r0, [pc, #176]	; (8001f2c <_vfiprintf_r+0x250>)
 8001e7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e7e:	2206      	movs	r2, #6
 8001e80:	f7fe f9ae 	bl	80001e0 <memchr>
 8001e84:	2800      	cmp	r0, #0
 8001e86:	d03f      	beq.n	8001f08 <_vfiprintf_r+0x22c>
 8001e88:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <_vfiprintf_r+0x254>)
 8001e8a:	bb1b      	cbnz	r3, 8001ed4 <_vfiprintf_r+0x1f8>
 8001e8c:	9b03      	ldr	r3, [sp, #12]
 8001e8e:	3307      	adds	r3, #7
 8001e90:	f023 0307 	bic.w	r3, r3, #7
 8001e94:	3308      	adds	r3, #8
 8001e96:	9303      	str	r3, [sp, #12]
 8001e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e9a:	443b      	add	r3, r7
 8001e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8001e9e:	e767      	b.n	8001d70 <_vfiprintf_r+0x94>
 8001ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ea4:	460c      	mov	r4, r1
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	e7a5      	b.n	8001df6 <_vfiprintf_r+0x11a>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	3401      	adds	r4, #1
 8001eae:	9305      	str	r3, [sp, #20]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f04f 0c0a 	mov.w	ip, #10
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ebc:	3a30      	subs	r2, #48	; 0x30
 8001ebe:	2a09      	cmp	r2, #9
 8001ec0:	d903      	bls.n	8001eca <_vfiprintf_r+0x1ee>
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0c5      	beq.n	8001e52 <_vfiprintf_r+0x176>
 8001ec6:	9105      	str	r1, [sp, #20]
 8001ec8:	e7c3      	b.n	8001e52 <_vfiprintf_r+0x176>
 8001eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ece:	4604      	mov	r4, r0
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e7f0      	b.n	8001eb6 <_vfiprintf_r+0x1da>
 8001ed4:	ab03      	add	r3, sp, #12
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	462a      	mov	r2, r5
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <_vfiprintf_r+0x258>)
 8001edc:	a904      	add	r1, sp, #16
 8001ede:	4630      	mov	r0, r6
 8001ee0:	f3af 8000 	nop.w
 8001ee4:	4607      	mov	r7, r0
 8001ee6:	1c78      	adds	r0, r7, #1
 8001ee8:	d1d6      	bne.n	8001e98 <_vfiprintf_r+0x1bc>
 8001eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001eec:	07d9      	lsls	r1, r3, #31
 8001eee:	d405      	bmi.n	8001efc <_vfiprintf_r+0x220>
 8001ef0:	89ab      	ldrh	r3, [r5, #12]
 8001ef2:	059a      	lsls	r2, r3, #22
 8001ef4:	d402      	bmi.n	8001efc <_vfiprintf_r+0x220>
 8001ef6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ef8:	f7ff fd0f 	bl	800191a <__retarget_lock_release_recursive>
 8001efc:	89ab      	ldrh	r3, [r5, #12]
 8001efe:	065b      	lsls	r3, r3, #25
 8001f00:	f53f af12 	bmi.w	8001d28 <_vfiprintf_r+0x4c>
 8001f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f06:	e711      	b.n	8001d2c <_vfiprintf_r+0x50>
 8001f08:	ab03      	add	r3, sp, #12
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	462a      	mov	r2, r5
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <_vfiprintf_r+0x258>)
 8001f10:	a904      	add	r1, sp, #16
 8001f12:	4630      	mov	r0, r6
 8001f14:	f000 f880 	bl	8002018 <_printf_i>
 8001f18:	e7e4      	b.n	8001ee4 <_vfiprintf_r+0x208>
 8001f1a:	bf00      	nop
 8001f1c:	08002c04 	.word	0x08002c04
 8001f20:	08002c24 	.word	0x08002c24
 8001f24:	08002be4 	.word	0x08002be4
 8001f28:	08002c44 	.word	0x08002c44
 8001f2c:	08002c4e 	.word	0x08002c4e
 8001f30:	00000000 	.word	0x00000000
 8001f34:	08001cb7 	.word	0x08001cb7
 8001f38:	08002c4a 	.word	0x08002c4a

08001f3c <_printf_common>:
 8001f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f40:	4616      	mov	r6, r2
 8001f42:	4699      	mov	r9, r3
 8001f44:	688a      	ldr	r2, [r1, #8]
 8001f46:	690b      	ldr	r3, [r1, #16]
 8001f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	bfb8      	it	lt
 8001f50:	4613      	movlt	r3, r2
 8001f52:	6033      	str	r3, [r6, #0]
 8001f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f58:	4607      	mov	r7, r0
 8001f5a:	460c      	mov	r4, r1
 8001f5c:	b10a      	cbz	r2, 8001f62 <_printf_common+0x26>
 8001f5e:	3301      	adds	r3, #1
 8001f60:	6033      	str	r3, [r6, #0]
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	0699      	lsls	r1, r3, #26
 8001f66:	bf42      	ittt	mi
 8001f68:	6833      	ldrmi	r3, [r6, #0]
 8001f6a:	3302      	addmi	r3, #2
 8001f6c:	6033      	strmi	r3, [r6, #0]
 8001f6e:	6825      	ldr	r5, [r4, #0]
 8001f70:	f015 0506 	ands.w	r5, r5, #6
 8001f74:	d106      	bne.n	8001f84 <_printf_common+0x48>
 8001f76:	f104 0a19 	add.w	sl, r4, #25
 8001f7a:	68e3      	ldr	r3, [r4, #12]
 8001f7c:	6832      	ldr	r2, [r6, #0]
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	42ab      	cmp	r3, r5
 8001f82:	dc26      	bgt.n	8001fd2 <_printf_common+0x96>
 8001f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f88:	1e13      	subs	r3, r2, #0
 8001f8a:	6822      	ldr	r2, [r4, #0]
 8001f8c:	bf18      	it	ne
 8001f8e:	2301      	movne	r3, #1
 8001f90:	0692      	lsls	r2, r2, #26
 8001f92:	d42b      	bmi.n	8001fec <_printf_common+0xb0>
 8001f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f98:	4649      	mov	r1, r9
 8001f9a:	4638      	mov	r0, r7
 8001f9c:	47c0      	blx	r8
 8001f9e:	3001      	adds	r0, #1
 8001fa0:	d01e      	beq.n	8001fe0 <_printf_common+0xa4>
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	68e5      	ldr	r5, [r4, #12]
 8001fa6:	6832      	ldr	r2, [r6, #0]
 8001fa8:	f003 0306 	and.w	r3, r3, #6
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	bf08      	it	eq
 8001fb0:	1aad      	subeq	r5, r5, r2
 8001fb2:	68a3      	ldr	r3, [r4, #8]
 8001fb4:	6922      	ldr	r2, [r4, #16]
 8001fb6:	bf0c      	ite	eq
 8001fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fbc:	2500      	movne	r5, #0
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	bfc4      	itt	gt
 8001fc2:	1a9b      	subgt	r3, r3, r2
 8001fc4:	18ed      	addgt	r5, r5, r3
 8001fc6:	2600      	movs	r6, #0
 8001fc8:	341a      	adds	r4, #26
 8001fca:	42b5      	cmp	r5, r6
 8001fcc:	d11a      	bne.n	8002004 <_printf_common+0xc8>
 8001fce:	2000      	movs	r0, #0
 8001fd0:	e008      	b.n	8001fe4 <_printf_common+0xa8>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	4652      	mov	r2, sl
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	4638      	mov	r0, r7
 8001fda:	47c0      	blx	r8
 8001fdc:	3001      	adds	r0, #1
 8001fde:	d103      	bne.n	8001fe8 <_printf_common+0xac>
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fe8:	3501      	adds	r5, #1
 8001fea:	e7c6      	b.n	8001f7a <_printf_common+0x3e>
 8001fec:	18e1      	adds	r1, r4, r3
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	2030      	movs	r0, #48	; 0x30
 8001ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ff6:	4422      	add	r2, r4
 8001ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002000:	3302      	adds	r3, #2
 8002002:	e7c7      	b.n	8001f94 <_printf_common+0x58>
 8002004:	2301      	movs	r3, #1
 8002006:	4622      	mov	r2, r4
 8002008:	4649      	mov	r1, r9
 800200a:	4638      	mov	r0, r7
 800200c:	47c0      	blx	r8
 800200e:	3001      	adds	r0, #1
 8002010:	d0e6      	beq.n	8001fe0 <_printf_common+0xa4>
 8002012:	3601      	adds	r6, #1
 8002014:	e7d9      	b.n	8001fca <_printf_common+0x8e>
	...

08002018 <_printf_i>:
 8002018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800201c:	460c      	mov	r4, r1
 800201e:	4691      	mov	r9, r2
 8002020:	7e27      	ldrb	r7, [r4, #24]
 8002022:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002024:	2f78      	cmp	r7, #120	; 0x78
 8002026:	4680      	mov	r8, r0
 8002028:	469a      	mov	sl, r3
 800202a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800202e:	d807      	bhi.n	8002040 <_printf_i+0x28>
 8002030:	2f62      	cmp	r7, #98	; 0x62
 8002032:	d80a      	bhi.n	800204a <_printf_i+0x32>
 8002034:	2f00      	cmp	r7, #0
 8002036:	f000 80d8 	beq.w	80021ea <_printf_i+0x1d2>
 800203a:	2f58      	cmp	r7, #88	; 0x58
 800203c:	f000 80a3 	beq.w	8002186 <_printf_i+0x16e>
 8002040:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002048:	e03a      	b.n	80020c0 <_printf_i+0xa8>
 800204a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800204e:	2b15      	cmp	r3, #21
 8002050:	d8f6      	bhi.n	8002040 <_printf_i+0x28>
 8002052:	a001      	add	r0, pc, #4	; (adr r0, 8002058 <_printf_i+0x40>)
 8002054:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002058:	080020b1 	.word	0x080020b1
 800205c:	080020c5 	.word	0x080020c5
 8002060:	08002041 	.word	0x08002041
 8002064:	08002041 	.word	0x08002041
 8002068:	08002041 	.word	0x08002041
 800206c:	08002041 	.word	0x08002041
 8002070:	080020c5 	.word	0x080020c5
 8002074:	08002041 	.word	0x08002041
 8002078:	08002041 	.word	0x08002041
 800207c:	08002041 	.word	0x08002041
 8002080:	08002041 	.word	0x08002041
 8002084:	080021d1 	.word	0x080021d1
 8002088:	080020f5 	.word	0x080020f5
 800208c:	080021b3 	.word	0x080021b3
 8002090:	08002041 	.word	0x08002041
 8002094:	08002041 	.word	0x08002041
 8002098:	080021f3 	.word	0x080021f3
 800209c:	08002041 	.word	0x08002041
 80020a0:	080020f5 	.word	0x080020f5
 80020a4:	08002041 	.word	0x08002041
 80020a8:	08002041 	.word	0x08002041
 80020ac:	080021bb 	.word	0x080021bb
 80020b0:	680b      	ldr	r3, [r1, #0]
 80020b2:	1d1a      	adds	r2, r3, #4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	600a      	str	r2, [r1, #0]
 80020b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80020bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0a3      	b.n	800220c <_printf_i+0x1f4>
 80020c4:	6825      	ldr	r5, [r4, #0]
 80020c6:	6808      	ldr	r0, [r1, #0]
 80020c8:	062e      	lsls	r6, r5, #24
 80020ca:	f100 0304 	add.w	r3, r0, #4
 80020ce:	d50a      	bpl.n	80020e6 <_printf_i+0xce>
 80020d0:	6805      	ldr	r5, [r0, #0]
 80020d2:	600b      	str	r3, [r1, #0]
 80020d4:	2d00      	cmp	r5, #0
 80020d6:	da03      	bge.n	80020e0 <_printf_i+0xc8>
 80020d8:	232d      	movs	r3, #45	; 0x2d
 80020da:	426d      	negs	r5, r5
 80020dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020e0:	485e      	ldr	r0, [pc, #376]	; (800225c <_printf_i+0x244>)
 80020e2:	230a      	movs	r3, #10
 80020e4:	e019      	b.n	800211a <_printf_i+0x102>
 80020e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80020ea:	6805      	ldr	r5, [r0, #0]
 80020ec:	600b      	str	r3, [r1, #0]
 80020ee:	bf18      	it	ne
 80020f0:	b22d      	sxthne	r5, r5
 80020f2:	e7ef      	b.n	80020d4 <_printf_i+0xbc>
 80020f4:	680b      	ldr	r3, [r1, #0]
 80020f6:	6825      	ldr	r5, [r4, #0]
 80020f8:	1d18      	adds	r0, r3, #4
 80020fa:	6008      	str	r0, [r1, #0]
 80020fc:	0628      	lsls	r0, r5, #24
 80020fe:	d501      	bpl.n	8002104 <_printf_i+0xec>
 8002100:	681d      	ldr	r5, [r3, #0]
 8002102:	e002      	b.n	800210a <_printf_i+0xf2>
 8002104:	0669      	lsls	r1, r5, #25
 8002106:	d5fb      	bpl.n	8002100 <_printf_i+0xe8>
 8002108:	881d      	ldrh	r5, [r3, #0]
 800210a:	4854      	ldr	r0, [pc, #336]	; (800225c <_printf_i+0x244>)
 800210c:	2f6f      	cmp	r7, #111	; 0x6f
 800210e:	bf0c      	ite	eq
 8002110:	2308      	moveq	r3, #8
 8002112:	230a      	movne	r3, #10
 8002114:	2100      	movs	r1, #0
 8002116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800211a:	6866      	ldr	r6, [r4, #4]
 800211c:	60a6      	str	r6, [r4, #8]
 800211e:	2e00      	cmp	r6, #0
 8002120:	bfa2      	ittt	ge
 8002122:	6821      	ldrge	r1, [r4, #0]
 8002124:	f021 0104 	bicge.w	r1, r1, #4
 8002128:	6021      	strge	r1, [r4, #0]
 800212a:	b90d      	cbnz	r5, 8002130 <_printf_i+0x118>
 800212c:	2e00      	cmp	r6, #0
 800212e:	d04d      	beq.n	80021cc <_printf_i+0x1b4>
 8002130:	4616      	mov	r6, r2
 8002132:	fbb5 f1f3 	udiv	r1, r5, r3
 8002136:	fb03 5711 	mls	r7, r3, r1, r5
 800213a:	5dc7      	ldrb	r7, [r0, r7]
 800213c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002140:	462f      	mov	r7, r5
 8002142:	42bb      	cmp	r3, r7
 8002144:	460d      	mov	r5, r1
 8002146:	d9f4      	bls.n	8002132 <_printf_i+0x11a>
 8002148:	2b08      	cmp	r3, #8
 800214a:	d10b      	bne.n	8002164 <_printf_i+0x14c>
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	07df      	lsls	r7, r3, #31
 8002150:	d508      	bpl.n	8002164 <_printf_i+0x14c>
 8002152:	6923      	ldr	r3, [r4, #16]
 8002154:	6861      	ldr	r1, [r4, #4]
 8002156:	4299      	cmp	r1, r3
 8002158:	bfde      	ittt	le
 800215a:	2330      	movle	r3, #48	; 0x30
 800215c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002160:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002164:	1b92      	subs	r2, r2, r6
 8002166:	6122      	str	r2, [r4, #16]
 8002168:	f8cd a000 	str.w	sl, [sp]
 800216c:	464b      	mov	r3, r9
 800216e:	aa03      	add	r2, sp, #12
 8002170:	4621      	mov	r1, r4
 8002172:	4640      	mov	r0, r8
 8002174:	f7ff fee2 	bl	8001f3c <_printf_common>
 8002178:	3001      	adds	r0, #1
 800217a:	d14c      	bne.n	8002216 <_printf_i+0x1fe>
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	b004      	add	sp, #16
 8002182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002186:	4835      	ldr	r0, [pc, #212]	; (800225c <_printf_i+0x244>)
 8002188:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	680e      	ldr	r6, [r1, #0]
 8002190:	061f      	lsls	r7, r3, #24
 8002192:	f856 5b04 	ldr.w	r5, [r6], #4
 8002196:	600e      	str	r6, [r1, #0]
 8002198:	d514      	bpl.n	80021c4 <_printf_i+0x1ac>
 800219a:	07d9      	lsls	r1, r3, #31
 800219c:	bf44      	itt	mi
 800219e:	f043 0320 	orrmi.w	r3, r3, #32
 80021a2:	6023      	strmi	r3, [r4, #0]
 80021a4:	b91d      	cbnz	r5, 80021ae <_printf_i+0x196>
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	f023 0320 	bic.w	r3, r3, #32
 80021ac:	6023      	str	r3, [r4, #0]
 80021ae:	2310      	movs	r3, #16
 80021b0:	e7b0      	b.n	8002114 <_printf_i+0xfc>
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	f043 0320 	orr.w	r3, r3, #32
 80021b8:	6023      	str	r3, [r4, #0]
 80021ba:	2378      	movs	r3, #120	; 0x78
 80021bc:	4828      	ldr	r0, [pc, #160]	; (8002260 <_printf_i+0x248>)
 80021be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80021c2:	e7e3      	b.n	800218c <_printf_i+0x174>
 80021c4:	065e      	lsls	r6, r3, #25
 80021c6:	bf48      	it	mi
 80021c8:	b2ad      	uxthmi	r5, r5
 80021ca:	e7e6      	b.n	800219a <_printf_i+0x182>
 80021cc:	4616      	mov	r6, r2
 80021ce:	e7bb      	b.n	8002148 <_printf_i+0x130>
 80021d0:	680b      	ldr	r3, [r1, #0]
 80021d2:	6826      	ldr	r6, [r4, #0]
 80021d4:	6960      	ldr	r0, [r4, #20]
 80021d6:	1d1d      	adds	r5, r3, #4
 80021d8:	600d      	str	r5, [r1, #0]
 80021da:	0635      	lsls	r5, r6, #24
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	d501      	bpl.n	80021e4 <_printf_i+0x1cc>
 80021e0:	6018      	str	r0, [r3, #0]
 80021e2:	e002      	b.n	80021ea <_printf_i+0x1d2>
 80021e4:	0671      	lsls	r1, r6, #25
 80021e6:	d5fb      	bpl.n	80021e0 <_printf_i+0x1c8>
 80021e8:	8018      	strh	r0, [r3, #0]
 80021ea:	2300      	movs	r3, #0
 80021ec:	6123      	str	r3, [r4, #16]
 80021ee:	4616      	mov	r6, r2
 80021f0:	e7ba      	b.n	8002168 <_printf_i+0x150>
 80021f2:	680b      	ldr	r3, [r1, #0]
 80021f4:	1d1a      	adds	r2, r3, #4
 80021f6:	600a      	str	r2, [r1, #0]
 80021f8:	681e      	ldr	r6, [r3, #0]
 80021fa:	6862      	ldr	r2, [r4, #4]
 80021fc:	2100      	movs	r1, #0
 80021fe:	4630      	mov	r0, r6
 8002200:	f7fd ffee 	bl	80001e0 <memchr>
 8002204:	b108      	cbz	r0, 800220a <_printf_i+0x1f2>
 8002206:	1b80      	subs	r0, r0, r6
 8002208:	6060      	str	r0, [r4, #4]
 800220a:	6863      	ldr	r3, [r4, #4]
 800220c:	6123      	str	r3, [r4, #16]
 800220e:	2300      	movs	r3, #0
 8002210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002214:	e7a8      	b.n	8002168 <_printf_i+0x150>
 8002216:	6923      	ldr	r3, [r4, #16]
 8002218:	4632      	mov	r2, r6
 800221a:	4649      	mov	r1, r9
 800221c:	4640      	mov	r0, r8
 800221e:	47d0      	blx	sl
 8002220:	3001      	adds	r0, #1
 8002222:	d0ab      	beq.n	800217c <_printf_i+0x164>
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	079b      	lsls	r3, r3, #30
 8002228:	d413      	bmi.n	8002252 <_printf_i+0x23a>
 800222a:	68e0      	ldr	r0, [r4, #12]
 800222c:	9b03      	ldr	r3, [sp, #12]
 800222e:	4298      	cmp	r0, r3
 8002230:	bfb8      	it	lt
 8002232:	4618      	movlt	r0, r3
 8002234:	e7a4      	b.n	8002180 <_printf_i+0x168>
 8002236:	2301      	movs	r3, #1
 8002238:	4632      	mov	r2, r6
 800223a:	4649      	mov	r1, r9
 800223c:	4640      	mov	r0, r8
 800223e:	47d0      	blx	sl
 8002240:	3001      	adds	r0, #1
 8002242:	d09b      	beq.n	800217c <_printf_i+0x164>
 8002244:	3501      	adds	r5, #1
 8002246:	68e3      	ldr	r3, [r4, #12]
 8002248:	9903      	ldr	r1, [sp, #12]
 800224a:	1a5b      	subs	r3, r3, r1
 800224c:	42ab      	cmp	r3, r5
 800224e:	dcf2      	bgt.n	8002236 <_printf_i+0x21e>
 8002250:	e7eb      	b.n	800222a <_printf_i+0x212>
 8002252:	2500      	movs	r5, #0
 8002254:	f104 0619 	add.w	r6, r4, #25
 8002258:	e7f5      	b.n	8002246 <_printf_i+0x22e>
 800225a:	bf00      	nop
 800225c:	08002c55 	.word	0x08002c55
 8002260:	08002c66 	.word	0x08002c66

08002264 <_sbrk_r>:
 8002264:	b538      	push	{r3, r4, r5, lr}
 8002266:	4d06      	ldr	r5, [pc, #24]	; (8002280 <_sbrk_r+0x1c>)
 8002268:	2300      	movs	r3, #0
 800226a:	4604      	mov	r4, r0
 800226c:	4608      	mov	r0, r1
 800226e:	602b      	str	r3, [r5, #0]
 8002270:	f7ff f928 	bl	80014c4 <_sbrk>
 8002274:	1c43      	adds	r3, r0, #1
 8002276:	d102      	bne.n	800227e <_sbrk_r+0x1a>
 8002278:	682b      	ldr	r3, [r5, #0]
 800227a:	b103      	cbz	r3, 800227e <_sbrk_r+0x1a>
 800227c:	6023      	str	r3, [r4, #0]
 800227e:	bd38      	pop	{r3, r4, r5, pc}
 8002280:	2000017c 	.word	0x2000017c

08002284 <__sread>:
 8002284:	b510      	push	{r4, lr}
 8002286:	460c      	mov	r4, r1
 8002288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800228c:	f000 fb02 	bl	8002894 <_read_r>
 8002290:	2800      	cmp	r0, #0
 8002292:	bfab      	itete	ge
 8002294:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002296:	89a3      	ldrhlt	r3, [r4, #12]
 8002298:	181b      	addge	r3, r3, r0
 800229a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800229e:	bfac      	ite	ge
 80022a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80022a2:	81a3      	strhlt	r3, [r4, #12]
 80022a4:	bd10      	pop	{r4, pc}

080022a6 <__swrite>:
 80022a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022aa:	461f      	mov	r7, r3
 80022ac:	898b      	ldrh	r3, [r1, #12]
 80022ae:	05db      	lsls	r3, r3, #23
 80022b0:	4605      	mov	r5, r0
 80022b2:	460c      	mov	r4, r1
 80022b4:	4616      	mov	r6, r2
 80022b6:	d505      	bpl.n	80022c4 <__swrite+0x1e>
 80022b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022bc:	2302      	movs	r3, #2
 80022be:	2200      	movs	r2, #0
 80022c0:	f000 f9c8 	bl	8002654 <_lseek_r>
 80022c4:	89a3      	ldrh	r3, [r4, #12]
 80022c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022ce:	81a3      	strh	r3, [r4, #12]
 80022d0:	4632      	mov	r2, r6
 80022d2:	463b      	mov	r3, r7
 80022d4:	4628      	mov	r0, r5
 80022d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022da:	f000 b869 	b.w	80023b0 <_write_r>

080022de <__sseek>:
 80022de:	b510      	push	{r4, lr}
 80022e0:	460c      	mov	r4, r1
 80022e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022e6:	f000 f9b5 	bl	8002654 <_lseek_r>
 80022ea:	1c43      	adds	r3, r0, #1
 80022ec:	89a3      	ldrh	r3, [r4, #12]
 80022ee:	bf15      	itete	ne
 80022f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80022f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022fa:	81a3      	strheq	r3, [r4, #12]
 80022fc:	bf18      	it	ne
 80022fe:	81a3      	strhne	r3, [r4, #12]
 8002300:	bd10      	pop	{r4, pc}

08002302 <__sclose>:
 8002302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002306:	f000 b8d3 	b.w	80024b0 <_close_r>
	...

0800230c <__swbuf_r>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	460e      	mov	r6, r1
 8002310:	4614      	mov	r4, r2
 8002312:	4605      	mov	r5, r0
 8002314:	b118      	cbz	r0, 800231e <__swbuf_r+0x12>
 8002316:	6983      	ldr	r3, [r0, #24]
 8002318:	b90b      	cbnz	r3, 800231e <__swbuf_r+0x12>
 800231a:	f7ff fa5f 	bl	80017dc <__sinit>
 800231e:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <__swbuf_r+0x98>)
 8002320:	429c      	cmp	r4, r3
 8002322:	d12b      	bne.n	800237c <__swbuf_r+0x70>
 8002324:	686c      	ldr	r4, [r5, #4]
 8002326:	69a3      	ldr	r3, [r4, #24]
 8002328:	60a3      	str	r3, [r4, #8]
 800232a:	89a3      	ldrh	r3, [r4, #12]
 800232c:	071a      	lsls	r2, r3, #28
 800232e:	d52f      	bpl.n	8002390 <__swbuf_r+0x84>
 8002330:	6923      	ldr	r3, [r4, #16]
 8002332:	b36b      	cbz	r3, 8002390 <__swbuf_r+0x84>
 8002334:	6923      	ldr	r3, [r4, #16]
 8002336:	6820      	ldr	r0, [r4, #0]
 8002338:	1ac0      	subs	r0, r0, r3
 800233a:	6963      	ldr	r3, [r4, #20]
 800233c:	b2f6      	uxtb	r6, r6
 800233e:	4283      	cmp	r3, r0
 8002340:	4637      	mov	r7, r6
 8002342:	dc04      	bgt.n	800234e <__swbuf_r+0x42>
 8002344:	4621      	mov	r1, r4
 8002346:	4628      	mov	r0, r5
 8002348:	f000 f948 	bl	80025dc <_fflush_r>
 800234c:	bb30      	cbnz	r0, 800239c <__swbuf_r+0x90>
 800234e:	68a3      	ldr	r3, [r4, #8]
 8002350:	3b01      	subs	r3, #1
 8002352:	60a3      	str	r3, [r4, #8]
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	6022      	str	r2, [r4, #0]
 800235a:	701e      	strb	r6, [r3, #0]
 800235c:	6963      	ldr	r3, [r4, #20]
 800235e:	3001      	adds	r0, #1
 8002360:	4283      	cmp	r3, r0
 8002362:	d004      	beq.n	800236e <__swbuf_r+0x62>
 8002364:	89a3      	ldrh	r3, [r4, #12]
 8002366:	07db      	lsls	r3, r3, #31
 8002368:	d506      	bpl.n	8002378 <__swbuf_r+0x6c>
 800236a:	2e0a      	cmp	r6, #10
 800236c:	d104      	bne.n	8002378 <__swbuf_r+0x6c>
 800236e:	4621      	mov	r1, r4
 8002370:	4628      	mov	r0, r5
 8002372:	f000 f933 	bl	80025dc <_fflush_r>
 8002376:	b988      	cbnz	r0, 800239c <__swbuf_r+0x90>
 8002378:	4638      	mov	r0, r7
 800237a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <__swbuf_r+0x9c>)
 800237e:	429c      	cmp	r4, r3
 8002380:	d101      	bne.n	8002386 <__swbuf_r+0x7a>
 8002382:	68ac      	ldr	r4, [r5, #8]
 8002384:	e7cf      	b.n	8002326 <__swbuf_r+0x1a>
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <__swbuf_r+0xa0>)
 8002388:	429c      	cmp	r4, r3
 800238a:	bf08      	it	eq
 800238c:	68ec      	ldreq	r4, [r5, #12]
 800238e:	e7ca      	b.n	8002326 <__swbuf_r+0x1a>
 8002390:	4621      	mov	r1, r4
 8002392:	4628      	mov	r0, r5
 8002394:	f000 f81e 	bl	80023d4 <__swsetup_r>
 8002398:	2800      	cmp	r0, #0
 800239a:	d0cb      	beq.n	8002334 <__swbuf_r+0x28>
 800239c:	f04f 37ff 	mov.w	r7, #4294967295
 80023a0:	e7ea      	b.n	8002378 <__swbuf_r+0x6c>
 80023a2:	bf00      	nop
 80023a4:	08002c04 	.word	0x08002c04
 80023a8:	08002c24 	.word	0x08002c24
 80023ac:	08002be4 	.word	0x08002be4

080023b0 <_write_r>:
 80023b0:	b538      	push	{r3, r4, r5, lr}
 80023b2:	4d07      	ldr	r5, [pc, #28]	; (80023d0 <_write_r+0x20>)
 80023b4:	4604      	mov	r4, r0
 80023b6:	4608      	mov	r0, r1
 80023b8:	4611      	mov	r1, r2
 80023ba:	2200      	movs	r2, #0
 80023bc:	602a      	str	r2, [r5, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	f000 fb56 	bl	8002a70 <_write>
 80023c4:	1c43      	adds	r3, r0, #1
 80023c6:	d102      	bne.n	80023ce <_write_r+0x1e>
 80023c8:	682b      	ldr	r3, [r5, #0]
 80023ca:	b103      	cbz	r3, 80023ce <_write_r+0x1e>
 80023cc:	6023      	str	r3, [r4, #0]
 80023ce:	bd38      	pop	{r3, r4, r5, pc}
 80023d0:	2000017c 	.word	0x2000017c

080023d4 <__swsetup_r>:
 80023d4:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <__swsetup_r+0xcc>)
 80023d6:	b570      	push	{r4, r5, r6, lr}
 80023d8:	681d      	ldr	r5, [r3, #0]
 80023da:	4606      	mov	r6, r0
 80023dc:	460c      	mov	r4, r1
 80023de:	b125      	cbz	r5, 80023ea <__swsetup_r+0x16>
 80023e0:	69ab      	ldr	r3, [r5, #24]
 80023e2:	b913      	cbnz	r3, 80023ea <__swsetup_r+0x16>
 80023e4:	4628      	mov	r0, r5
 80023e6:	f7ff f9f9 	bl	80017dc <__sinit>
 80023ea:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <__swsetup_r+0xd0>)
 80023ec:	429c      	cmp	r4, r3
 80023ee:	d10f      	bne.n	8002410 <__swsetup_r+0x3c>
 80023f0:	686c      	ldr	r4, [r5, #4]
 80023f2:	89a3      	ldrh	r3, [r4, #12]
 80023f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023f8:	0719      	lsls	r1, r3, #28
 80023fa:	d42c      	bmi.n	8002456 <__swsetup_r+0x82>
 80023fc:	06dd      	lsls	r5, r3, #27
 80023fe:	d411      	bmi.n	8002424 <__swsetup_r+0x50>
 8002400:	2309      	movs	r3, #9
 8002402:	6033      	str	r3, [r6, #0]
 8002404:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002408:	81a3      	strh	r3, [r4, #12]
 800240a:	f04f 30ff 	mov.w	r0, #4294967295
 800240e:	e03e      	b.n	800248e <__swsetup_r+0xba>
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <__swsetup_r+0xd4>)
 8002412:	429c      	cmp	r4, r3
 8002414:	d101      	bne.n	800241a <__swsetup_r+0x46>
 8002416:	68ac      	ldr	r4, [r5, #8]
 8002418:	e7eb      	b.n	80023f2 <__swsetup_r+0x1e>
 800241a:	4b24      	ldr	r3, [pc, #144]	; (80024ac <__swsetup_r+0xd8>)
 800241c:	429c      	cmp	r4, r3
 800241e:	bf08      	it	eq
 8002420:	68ec      	ldreq	r4, [r5, #12]
 8002422:	e7e6      	b.n	80023f2 <__swsetup_r+0x1e>
 8002424:	0758      	lsls	r0, r3, #29
 8002426:	d512      	bpl.n	800244e <__swsetup_r+0x7a>
 8002428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800242a:	b141      	cbz	r1, 800243e <__swsetup_r+0x6a>
 800242c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002430:	4299      	cmp	r1, r3
 8002432:	d002      	beq.n	800243a <__swsetup_r+0x66>
 8002434:	4630      	mov	r0, r6
 8002436:	f000 f9b7 	bl	80027a8 <_free_r>
 800243a:	2300      	movs	r3, #0
 800243c:	6363      	str	r3, [r4, #52]	; 0x34
 800243e:	89a3      	ldrh	r3, [r4, #12]
 8002440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002444:	81a3      	strh	r3, [r4, #12]
 8002446:	2300      	movs	r3, #0
 8002448:	6063      	str	r3, [r4, #4]
 800244a:	6923      	ldr	r3, [r4, #16]
 800244c:	6023      	str	r3, [r4, #0]
 800244e:	89a3      	ldrh	r3, [r4, #12]
 8002450:	f043 0308 	orr.w	r3, r3, #8
 8002454:	81a3      	strh	r3, [r4, #12]
 8002456:	6923      	ldr	r3, [r4, #16]
 8002458:	b94b      	cbnz	r3, 800246e <__swsetup_r+0x9a>
 800245a:	89a3      	ldrh	r3, [r4, #12]
 800245c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002464:	d003      	beq.n	800246e <__swsetup_r+0x9a>
 8002466:	4621      	mov	r1, r4
 8002468:	4630      	mov	r0, r6
 800246a:	f000 f929 	bl	80026c0 <__smakebuf_r>
 800246e:	89a0      	ldrh	r0, [r4, #12]
 8002470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002474:	f010 0301 	ands.w	r3, r0, #1
 8002478:	d00a      	beq.n	8002490 <__swsetup_r+0xbc>
 800247a:	2300      	movs	r3, #0
 800247c:	60a3      	str	r3, [r4, #8]
 800247e:	6963      	ldr	r3, [r4, #20]
 8002480:	425b      	negs	r3, r3
 8002482:	61a3      	str	r3, [r4, #24]
 8002484:	6923      	ldr	r3, [r4, #16]
 8002486:	b943      	cbnz	r3, 800249a <__swsetup_r+0xc6>
 8002488:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800248c:	d1ba      	bne.n	8002404 <__swsetup_r+0x30>
 800248e:	bd70      	pop	{r4, r5, r6, pc}
 8002490:	0781      	lsls	r1, r0, #30
 8002492:	bf58      	it	pl
 8002494:	6963      	ldrpl	r3, [r4, #20]
 8002496:	60a3      	str	r3, [r4, #8]
 8002498:	e7f4      	b.n	8002484 <__swsetup_r+0xb0>
 800249a:	2000      	movs	r0, #0
 800249c:	e7f7      	b.n	800248e <__swsetup_r+0xba>
 800249e:	bf00      	nop
 80024a0:	20000000 	.word	0x20000000
 80024a4:	08002c04 	.word	0x08002c04
 80024a8:	08002c24 	.word	0x08002c24
 80024ac:	08002be4 	.word	0x08002be4

080024b0 <_close_r>:
 80024b0:	b538      	push	{r3, r4, r5, lr}
 80024b2:	4d06      	ldr	r5, [pc, #24]	; (80024cc <_close_r+0x1c>)
 80024b4:	2300      	movs	r3, #0
 80024b6:	4604      	mov	r4, r0
 80024b8:	4608      	mov	r0, r1
 80024ba:	602b      	str	r3, [r5, #0]
 80024bc:	f000 fb0a 	bl	8002ad4 <_close>
 80024c0:	1c43      	adds	r3, r0, #1
 80024c2:	d102      	bne.n	80024ca <_close_r+0x1a>
 80024c4:	682b      	ldr	r3, [r5, #0]
 80024c6:	b103      	cbz	r3, 80024ca <_close_r+0x1a>
 80024c8:	6023      	str	r3, [r4, #0]
 80024ca:	bd38      	pop	{r3, r4, r5, pc}
 80024cc:	2000017c 	.word	0x2000017c

080024d0 <__sflush_r>:
 80024d0:	898a      	ldrh	r2, [r1, #12]
 80024d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024d6:	4605      	mov	r5, r0
 80024d8:	0710      	lsls	r0, r2, #28
 80024da:	460c      	mov	r4, r1
 80024dc:	d458      	bmi.n	8002590 <__sflush_r+0xc0>
 80024de:	684b      	ldr	r3, [r1, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	dc05      	bgt.n	80024f0 <__sflush_r+0x20>
 80024e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	dc02      	bgt.n	80024f0 <__sflush_r+0x20>
 80024ea:	2000      	movs	r0, #0
 80024ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80024f2:	2e00      	cmp	r6, #0
 80024f4:	d0f9      	beq.n	80024ea <__sflush_r+0x1a>
 80024f6:	2300      	movs	r3, #0
 80024f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80024fc:	682f      	ldr	r7, [r5, #0]
 80024fe:	602b      	str	r3, [r5, #0]
 8002500:	d032      	beq.n	8002568 <__sflush_r+0x98>
 8002502:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002504:	89a3      	ldrh	r3, [r4, #12]
 8002506:	075a      	lsls	r2, r3, #29
 8002508:	d505      	bpl.n	8002516 <__sflush_r+0x46>
 800250a:	6863      	ldr	r3, [r4, #4]
 800250c:	1ac0      	subs	r0, r0, r3
 800250e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002510:	b10b      	cbz	r3, 8002516 <__sflush_r+0x46>
 8002512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002514:	1ac0      	subs	r0, r0, r3
 8002516:	2300      	movs	r3, #0
 8002518:	4602      	mov	r2, r0
 800251a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800251c:	6a21      	ldr	r1, [r4, #32]
 800251e:	4628      	mov	r0, r5
 8002520:	47b0      	blx	r6
 8002522:	1c43      	adds	r3, r0, #1
 8002524:	89a3      	ldrh	r3, [r4, #12]
 8002526:	d106      	bne.n	8002536 <__sflush_r+0x66>
 8002528:	6829      	ldr	r1, [r5, #0]
 800252a:	291d      	cmp	r1, #29
 800252c:	d82c      	bhi.n	8002588 <__sflush_r+0xb8>
 800252e:	4a2a      	ldr	r2, [pc, #168]	; (80025d8 <__sflush_r+0x108>)
 8002530:	40ca      	lsrs	r2, r1
 8002532:	07d6      	lsls	r6, r2, #31
 8002534:	d528      	bpl.n	8002588 <__sflush_r+0xb8>
 8002536:	2200      	movs	r2, #0
 8002538:	6062      	str	r2, [r4, #4]
 800253a:	04d9      	lsls	r1, r3, #19
 800253c:	6922      	ldr	r2, [r4, #16]
 800253e:	6022      	str	r2, [r4, #0]
 8002540:	d504      	bpl.n	800254c <__sflush_r+0x7c>
 8002542:	1c42      	adds	r2, r0, #1
 8002544:	d101      	bne.n	800254a <__sflush_r+0x7a>
 8002546:	682b      	ldr	r3, [r5, #0]
 8002548:	b903      	cbnz	r3, 800254c <__sflush_r+0x7c>
 800254a:	6560      	str	r0, [r4, #84]	; 0x54
 800254c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800254e:	602f      	str	r7, [r5, #0]
 8002550:	2900      	cmp	r1, #0
 8002552:	d0ca      	beq.n	80024ea <__sflush_r+0x1a>
 8002554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002558:	4299      	cmp	r1, r3
 800255a:	d002      	beq.n	8002562 <__sflush_r+0x92>
 800255c:	4628      	mov	r0, r5
 800255e:	f000 f923 	bl	80027a8 <_free_r>
 8002562:	2000      	movs	r0, #0
 8002564:	6360      	str	r0, [r4, #52]	; 0x34
 8002566:	e7c1      	b.n	80024ec <__sflush_r+0x1c>
 8002568:	6a21      	ldr	r1, [r4, #32]
 800256a:	2301      	movs	r3, #1
 800256c:	4628      	mov	r0, r5
 800256e:	47b0      	blx	r6
 8002570:	1c41      	adds	r1, r0, #1
 8002572:	d1c7      	bne.n	8002504 <__sflush_r+0x34>
 8002574:	682b      	ldr	r3, [r5, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0c4      	beq.n	8002504 <__sflush_r+0x34>
 800257a:	2b1d      	cmp	r3, #29
 800257c:	d001      	beq.n	8002582 <__sflush_r+0xb2>
 800257e:	2b16      	cmp	r3, #22
 8002580:	d101      	bne.n	8002586 <__sflush_r+0xb6>
 8002582:	602f      	str	r7, [r5, #0]
 8002584:	e7b1      	b.n	80024ea <__sflush_r+0x1a>
 8002586:	89a3      	ldrh	r3, [r4, #12]
 8002588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800258c:	81a3      	strh	r3, [r4, #12]
 800258e:	e7ad      	b.n	80024ec <__sflush_r+0x1c>
 8002590:	690f      	ldr	r7, [r1, #16]
 8002592:	2f00      	cmp	r7, #0
 8002594:	d0a9      	beq.n	80024ea <__sflush_r+0x1a>
 8002596:	0793      	lsls	r3, r2, #30
 8002598:	680e      	ldr	r6, [r1, #0]
 800259a:	bf08      	it	eq
 800259c:	694b      	ldreq	r3, [r1, #20]
 800259e:	600f      	str	r7, [r1, #0]
 80025a0:	bf18      	it	ne
 80025a2:	2300      	movne	r3, #0
 80025a4:	eba6 0807 	sub.w	r8, r6, r7
 80025a8:	608b      	str	r3, [r1, #8]
 80025aa:	f1b8 0f00 	cmp.w	r8, #0
 80025ae:	dd9c      	ble.n	80024ea <__sflush_r+0x1a>
 80025b0:	6a21      	ldr	r1, [r4, #32]
 80025b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80025b4:	4643      	mov	r3, r8
 80025b6:	463a      	mov	r2, r7
 80025b8:	4628      	mov	r0, r5
 80025ba:	47b0      	blx	r6
 80025bc:	2800      	cmp	r0, #0
 80025be:	dc06      	bgt.n	80025ce <__sflush_r+0xfe>
 80025c0:	89a3      	ldrh	r3, [r4, #12]
 80025c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025c6:	81a3      	strh	r3, [r4, #12]
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	e78e      	b.n	80024ec <__sflush_r+0x1c>
 80025ce:	4407      	add	r7, r0
 80025d0:	eba8 0800 	sub.w	r8, r8, r0
 80025d4:	e7e9      	b.n	80025aa <__sflush_r+0xda>
 80025d6:	bf00      	nop
 80025d8:	20400001 	.word	0x20400001

080025dc <_fflush_r>:
 80025dc:	b538      	push	{r3, r4, r5, lr}
 80025de:	690b      	ldr	r3, [r1, #16]
 80025e0:	4605      	mov	r5, r0
 80025e2:	460c      	mov	r4, r1
 80025e4:	b913      	cbnz	r3, 80025ec <_fflush_r+0x10>
 80025e6:	2500      	movs	r5, #0
 80025e8:	4628      	mov	r0, r5
 80025ea:	bd38      	pop	{r3, r4, r5, pc}
 80025ec:	b118      	cbz	r0, 80025f6 <_fflush_r+0x1a>
 80025ee:	6983      	ldr	r3, [r0, #24]
 80025f0:	b90b      	cbnz	r3, 80025f6 <_fflush_r+0x1a>
 80025f2:	f7ff f8f3 	bl	80017dc <__sinit>
 80025f6:	4b14      	ldr	r3, [pc, #80]	; (8002648 <_fflush_r+0x6c>)
 80025f8:	429c      	cmp	r4, r3
 80025fa:	d11b      	bne.n	8002634 <_fflush_r+0x58>
 80025fc:	686c      	ldr	r4, [r5, #4]
 80025fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ef      	beq.n	80025e6 <_fflush_r+0xa>
 8002606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002608:	07d0      	lsls	r0, r2, #31
 800260a:	d404      	bmi.n	8002616 <_fflush_r+0x3a>
 800260c:	0599      	lsls	r1, r3, #22
 800260e:	d402      	bmi.n	8002616 <_fflush_r+0x3a>
 8002610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002612:	f7ff f981 	bl	8001918 <__retarget_lock_acquire_recursive>
 8002616:	4628      	mov	r0, r5
 8002618:	4621      	mov	r1, r4
 800261a:	f7ff ff59 	bl	80024d0 <__sflush_r>
 800261e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002620:	07da      	lsls	r2, r3, #31
 8002622:	4605      	mov	r5, r0
 8002624:	d4e0      	bmi.n	80025e8 <_fflush_r+0xc>
 8002626:	89a3      	ldrh	r3, [r4, #12]
 8002628:	059b      	lsls	r3, r3, #22
 800262a:	d4dd      	bmi.n	80025e8 <_fflush_r+0xc>
 800262c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800262e:	f7ff f974 	bl	800191a <__retarget_lock_release_recursive>
 8002632:	e7d9      	b.n	80025e8 <_fflush_r+0xc>
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <_fflush_r+0x70>)
 8002636:	429c      	cmp	r4, r3
 8002638:	d101      	bne.n	800263e <_fflush_r+0x62>
 800263a:	68ac      	ldr	r4, [r5, #8]
 800263c:	e7df      	b.n	80025fe <_fflush_r+0x22>
 800263e:	4b04      	ldr	r3, [pc, #16]	; (8002650 <_fflush_r+0x74>)
 8002640:	429c      	cmp	r4, r3
 8002642:	bf08      	it	eq
 8002644:	68ec      	ldreq	r4, [r5, #12]
 8002646:	e7da      	b.n	80025fe <_fflush_r+0x22>
 8002648:	08002c04 	.word	0x08002c04
 800264c:	08002c24 	.word	0x08002c24
 8002650:	08002be4 	.word	0x08002be4

08002654 <_lseek_r>:
 8002654:	b538      	push	{r3, r4, r5, lr}
 8002656:	4d07      	ldr	r5, [pc, #28]	; (8002674 <_lseek_r+0x20>)
 8002658:	4604      	mov	r4, r0
 800265a:	4608      	mov	r0, r1
 800265c:	4611      	mov	r1, r2
 800265e:	2200      	movs	r2, #0
 8002660:	602a      	str	r2, [r5, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	f000 f9f2 	bl	8002a4c <_lseek>
 8002668:	1c43      	adds	r3, r0, #1
 800266a:	d102      	bne.n	8002672 <_lseek_r+0x1e>
 800266c:	682b      	ldr	r3, [r5, #0]
 800266e:	b103      	cbz	r3, 8002672 <_lseek_r+0x1e>
 8002670:	6023      	str	r3, [r4, #0]
 8002672:	bd38      	pop	{r3, r4, r5, pc}
 8002674:	2000017c 	.word	0x2000017c

08002678 <__swhatbuf_r>:
 8002678:	b570      	push	{r4, r5, r6, lr}
 800267a:	460e      	mov	r6, r1
 800267c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002680:	2900      	cmp	r1, #0
 8002682:	b096      	sub	sp, #88	; 0x58
 8002684:	4614      	mov	r4, r2
 8002686:	461d      	mov	r5, r3
 8002688:	da07      	bge.n	800269a <__swhatbuf_r+0x22>
 800268a:	2300      	movs	r3, #0
 800268c:	602b      	str	r3, [r5, #0]
 800268e:	89b3      	ldrh	r3, [r6, #12]
 8002690:	061a      	lsls	r2, r3, #24
 8002692:	d410      	bmi.n	80026b6 <__swhatbuf_r+0x3e>
 8002694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002698:	e00e      	b.n	80026b8 <__swhatbuf_r+0x40>
 800269a:	466a      	mov	r2, sp
 800269c:	f000 f90c 	bl	80028b8 <_fstat_r>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	dbf2      	blt.n	800268a <__swhatbuf_r+0x12>
 80026a4:	9a01      	ldr	r2, [sp, #4]
 80026a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80026aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80026ae:	425a      	negs	r2, r3
 80026b0:	415a      	adcs	r2, r3
 80026b2:	602a      	str	r2, [r5, #0]
 80026b4:	e7ee      	b.n	8002694 <__swhatbuf_r+0x1c>
 80026b6:	2340      	movs	r3, #64	; 0x40
 80026b8:	2000      	movs	r0, #0
 80026ba:	6023      	str	r3, [r4, #0]
 80026bc:	b016      	add	sp, #88	; 0x58
 80026be:	bd70      	pop	{r4, r5, r6, pc}

080026c0 <__smakebuf_r>:
 80026c0:	898b      	ldrh	r3, [r1, #12]
 80026c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026c4:	079d      	lsls	r5, r3, #30
 80026c6:	4606      	mov	r6, r0
 80026c8:	460c      	mov	r4, r1
 80026ca:	d507      	bpl.n	80026dc <__smakebuf_r+0x1c>
 80026cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80026d0:	6023      	str	r3, [r4, #0]
 80026d2:	6123      	str	r3, [r4, #16]
 80026d4:	2301      	movs	r3, #1
 80026d6:	6163      	str	r3, [r4, #20]
 80026d8:	b002      	add	sp, #8
 80026da:	bd70      	pop	{r4, r5, r6, pc}
 80026dc:	ab01      	add	r3, sp, #4
 80026de:	466a      	mov	r2, sp
 80026e0:	f7ff ffca 	bl	8002678 <__swhatbuf_r>
 80026e4:	9900      	ldr	r1, [sp, #0]
 80026e6:	4605      	mov	r5, r0
 80026e8:	4630      	mov	r0, r6
 80026ea:	f7ff f917 	bl	800191c <_malloc_r>
 80026ee:	b948      	cbnz	r0, 8002704 <__smakebuf_r+0x44>
 80026f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026f4:	059a      	lsls	r2, r3, #22
 80026f6:	d4ef      	bmi.n	80026d8 <__smakebuf_r+0x18>
 80026f8:	f023 0303 	bic.w	r3, r3, #3
 80026fc:	f043 0302 	orr.w	r3, r3, #2
 8002700:	81a3      	strh	r3, [r4, #12]
 8002702:	e7e3      	b.n	80026cc <__smakebuf_r+0xc>
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <__smakebuf_r+0x7c>)
 8002706:	62b3      	str	r3, [r6, #40]	; 0x28
 8002708:	89a3      	ldrh	r3, [r4, #12]
 800270a:	6020      	str	r0, [r4, #0]
 800270c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002710:	81a3      	strh	r3, [r4, #12]
 8002712:	9b00      	ldr	r3, [sp, #0]
 8002714:	6163      	str	r3, [r4, #20]
 8002716:	9b01      	ldr	r3, [sp, #4]
 8002718:	6120      	str	r0, [r4, #16]
 800271a:	b15b      	cbz	r3, 8002734 <__smakebuf_r+0x74>
 800271c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002720:	4630      	mov	r0, r6
 8002722:	f000 f8db 	bl	80028dc <_isatty_r>
 8002726:	b128      	cbz	r0, 8002734 <__smakebuf_r+0x74>
 8002728:	89a3      	ldrh	r3, [r4, #12]
 800272a:	f023 0303 	bic.w	r3, r3, #3
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	81a3      	strh	r3, [r4, #12]
 8002734:	89a0      	ldrh	r0, [r4, #12]
 8002736:	4305      	orrs	r5, r0
 8002738:	81a5      	strh	r5, [r4, #12]
 800273a:	e7cd      	b.n	80026d8 <__smakebuf_r+0x18>
 800273c:	08001775 	.word	0x08001775

08002740 <memcpy>:
 8002740:	440a      	add	r2, r1
 8002742:	4291      	cmp	r1, r2
 8002744:	f100 33ff 	add.w	r3, r0, #4294967295
 8002748:	d100      	bne.n	800274c <memcpy+0xc>
 800274a:	4770      	bx	lr
 800274c:	b510      	push	{r4, lr}
 800274e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002756:	4291      	cmp	r1, r2
 8002758:	d1f9      	bne.n	800274e <memcpy+0xe>
 800275a:	bd10      	pop	{r4, pc}

0800275c <memmove>:
 800275c:	4288      	cmp	r0, r1
 800275e:	b510      	push	{r4, lr}
 8002760:	eb01 0402 	add.w	r4, r1, r2
 8002764:	d902      	bls.n	800276c <memmove+0x10>
 8002766:	4284      	cmp	r4, r0
 8002768:	4623      	mov	r3, r4
 800276a:	d807      	bhi.n	800277c <memmove+0x20>
 800276c:	1e43      	subs	r3, r0, #1
 800276e:	42a1      	cmp	r1, r4
 8002770:	d008      	beq.n	8002784 <memmove+0x28>
 8002772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002776:	f803 2f01 	strb.w	r2, [r3, #1]!
 800277a:	e7f8      	b.n	800276e <memmove+0x12>
 800277c:	4402      	add	r2, r0
 800277e:	4601      	mov	r1, r0
 8002780:	428a      	cmp	r2, r1
 8002782:	d100      	bne.n	8002786 <memmove+0x2a>
 8002784:	bd10      	pop	{r4, pc}
 8002786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800278a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800278e:	e7f7      	b.n	8002780 <memmove+0x24>

08002790 <__malloc_lock>:
 8002790:	4801      	ldr	r0, [pc, #4]	; (8002798 <__malloc_lock+0x8>)
 8002792:	f7ff b8c1 	b.w	8001918 <__retarget_lock_acquire_recursive>
 8002796:	bf00      	nop
 8002798:	20000174 	.word	0x20000174

0800279c <__malloc_unlock>:
 800279c:	4801      	ldr	r0, [pc, #4]	; (80027a4 <__malloc_unlock+0x8>)
 800279e:	f7ff b8bc 	b.w	800191a <__retarget_lock_release_recursive>
 80027a2:	bf00      	nop
 80027a4:	20000174 	.word	0x20000174

080027a8 <_free_r>:
 80027a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027aa:	2900      	cmp	r1, #0
 80027ac:	d048      	beq.n	8002840 <_free_r+0x98>
 80027ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027b2:	9001      	str	r0, [sp, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f1a1 0404 	sub.w	r4, r1, #4
 80027ba:	bfb8      	it	lt
 80027bc:	18e4      	addlt	r4, r4, r3
 80027be:	f7ff ffe7 	bl	8002790 <__malloc_lock>
 80027c2:	4a20      	ldr	r2, [pc, #128]	; (8002844 <_free_r+0x9c>)
 80027c4:	9801      	ldr	r0, [sp, #4]
 80027c6:	6813      	ldr	r3, [r2, #0]
 80027c8:	4615      	mov	r5, r2
 80027ca:	b933      	cbnz	r3, 80027da <_free_r+0x32>
 80027cc:	6063      	str	r3, [r4, #4]
 80027ce:	6014      	str	r4, [r2, #0]
 80027d0:	b003      	add	sp, #12
 80027d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80027d6:	f7ff bfe1 	b.w	800279c <__malloc_unlock>
 80027da:	42a3      	cmp	r3, r4
 80027dc:	d90b      	bls.n	80027f6 <_free_r+0x4e>
 80027de:	6821      	ldr	r1, [r4, #0]
 80027e0:	1862      	adds	r2, r4, r1
 80027e2:	4293      	cmp	r3, r2
 80027e4:	bf04      	itt	eq
 80027e6:	681a      	ldreq	r2, [r3, #0]
 80027e8:	685b      	ldreq	r3, [r3, #4]
 80027ea:	6063      	str	r3, [r4, #4]
 80027ec:	bf04      	itt	eq
 80027ee:	1852      	addeq	r2, r2, r1
 80027f0:	6022      	streq	r2, [r4, #0]
 80027f2:	602c      	str	r4, [r5, #0]
 80027f4:	e7ec      	b.n	80027d0 <_free_r+0x28>
 80027f6:	461a      	mov	r2, r3
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	b10b      	cbz	r3, 8002800 <_free_r+0x58>
 80027fc:	42a3      	cmp	r3, r4
 80027fe:	d9fa      	bls.n	80027f6 <_free_r+0x4e>
 8002800:	6811      	ldr	r1, [r2, #0]
 8002802:	1855      	adds	r5, r2, r1
 8002804:	42a5      	cmp	r5, r4
 8002806:	d10b      	bne.n	8002820 <_free_r+0x78>
 8002808:	6824      	ldr	r4, [r4, #0]
 800280a:	4421      	add	r1, r4
 800280c:	1854      	adds	r4, r2, r1
 800280e:	42a3      	cmp	r3, r4
 8002810:	6011      	str	r1, [r2, #0]
 8002812:	d1dd      	bne.n	80027d0 <_free_r+0x28>
 8002814:	681c      	ldr	r4, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	6053      	str	r3, [r2, #4]
 800281a:	4421      	add	r1, r4
 800281c:	6011      	str	r1, [r2, #0]
 800281e:	e7d7      	b.n	80027d0 <_free_r+0x28>
 8002820:	d902      	bls.n	8002828 <_free_r+0x80>
 8002822:	230c      	movs	r3, #12
 8002824:	6003      	str	r3, [r0, #0]
 8002826:	e7d3      	b.n	80027d0 <_free_r+0x28>
 8002828:	6825      	ldr	r5, [r4, #0]
 800282a:	1961      	adds	r1, r4, r5
 800282c:	428b      	cmp	r3, r1
 800282e:	bf04      	itt	eq
 8002830:	6819      	ldreq	r1, [r3, #0]
 8002832:	685b      	ldreq	r3, [r3, #4]
 8002834:	6063      	str	r3, [r4, #4]
 8002836:	bf04      	itt	eq
 8002838:	1949      	addeq	r1, r1, r5
 800283a:	6021      	streq	r1, [r4, #0]
 800283c:	6054      	str	r4, [r2, #4]
 800283e:	e7c7      	b.n	80027d0 <_free_r+0x28>
 8002840:	b003      	add	sp, #12
 8002842:	bd30      	pop	{r4, r5, pc}
 8002844:	20000084 	.word	0x20000084

08002848 <_realloc_r>:
 8002848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284a:	4607      	mov	r7, r0
 800284c:	4614      	mov	r4, r2
 800284e:	460e      	mov	r6, r1
 8002850:	b921      	cbnz	r1, 800285c <_realloc_r+0x14>
 8002852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002856:	4611      	mov	r1, r2
 8002858:	f7ff b860 	b.w	800191c <_malloc_r>
 800285c:	b922      	cbnz	r2, 8002868 <_realloc_r+0x20>
 800285e:	f7ff ffa3 	bl	80027a8 <_free_r>
 8002862:	4625      	mov	r5, r4
 8002864:	4628      	mov	r0, r5
 8002866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002868:	f000 f848 	bl	80028fc <_malloc_usable_size_r>
 800286c:	42a0      	cmp	r0, r4
 800286e:	d20f      	bcs.n	8002890 <_realloc_r+0x48>
 8002870:	4621      	mov	r1, r4
 8002872:	4638      	mov	r0, r7
 8002874:	f7ff f852 	bl	800191c <_malloc_r>
 8002878:	4605      	mov	r5, r0
 800287a:	2800      	cmp	r0, #0
 800287c:	d0f2      	beq.n	8002864 <_realloc_r+0x1c>
 800287e:	4631      	mov	r1, r6
 8002880:	4622      	mov	r2, r4
 8002882:	f7ff ff5d 	bl	8002740 <memcpy>
 8002886:	4631      	mov	r1, r6
 8002888:	4638      	mov	r0, r7
 800288a:	f7ff ff8d 	bl	80027a8 <_free_r>
 800288e:	e7e9      	b.n	8002864 <_realloc_r+0x1c>
 8002890:	4635      	mov	r5, r6
 8002892:	e7e7      	b.n	8002864 <_realloc_r+0x1c>

08002894 <_read_r>:
 8002894:	b538      	push	{r3, r4, r5, lr}
 8002896:	4d07      	ldr	r5, [pc, #28]	; (80028b4 <_read_r+0x20>)
 8002898:	4604      	mov	r4, r0
 800289a:	4608      	mov	r0, r1
 800289c:	4611      	mov	r1, r2
 800289e:	2200      	movs	r2, #0
 80028a0:	602a      	str	r2, [r5, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f000 f87a 	bl	800299c <_read>
 80028a8:	1c43      	adds	r3, r0, #1
 80028aa:	d102      	bne.n	80028b2 <_read_r+0x1e>
 80028ac:	682b      	ldr	r3, [r5, #0]
 80028ae:	b103      	cbz	r3, 80028b2 <_read_r+0x1e>
 80028b0:	6023      	str	r3, [r4, #0]
 80028b2:	bd38      	pop	{r3, r4, r5, pc}
 80028b4:	2000017c 	.word	0x2000017c

080028b8 <_fstat_r>:
 80028b8:	b538      	push	{r3, r4, r5, lr}
 80028ba:	4d07      	ldr	r5, [pc, #28]	; (80028d8 <_fstat_r+0x20>)
 80028bc:	2300      	movs	r3, #0
 80028be:	4604      	mov	r4, r0
 80028c0:	4608      	mov	r0, r1
 80028c2:	4611      	mov	r1, r2
 80028c4:	602b      	str	r3, [r5, #0]
 80028c6:	f000 f94c 	bl	8002b62 <_fstat>
 80028ca:	1c43      	adds	r3, r0, #1
 80028cc:	d102      	bne.n	80028d4 <_fstat_r+0x1c>
 80028ce:	682b      	ldr	r3, [r5, #0]
 80028d0:	b103      	cbz	r3, 80028d4 <_fstat_r+0x1c>
 80028d2:	6023      	str	r3, [r4, #0]
 80028d4:	bd38      	pop	{r3, r4, r5, pc}
 80028d6:	bf00      	nop
 80028d8:	2000017c 	.word	0x2000017c

080028dc <_isatty_r>:
 80028dc:	b538      	push	{r3, r4, r5, lr}
 80028de:	4d06      	ldr	r5, [pc, #24]	; (80028f8 <_isatty_r+0x1c>)
 80028e0:	2300      	movs	r3, #0
 80028e2:	4604      	mov	r4, r0
 80028e4:	4608      	mov	r0, r1
 80028e6:	602b      	str	r3, [r5, #0]
 80028e8:	f000 f949 	bl	8002b7e <_isatty>
 80028ec:	1c43      	adds	r3, r0, #1
 80028ee:	d102      	bne.n	80028f6 <_isatty_r+0x1a>
 80028f0:	682b      	ldr	r3, [r5, #0]
 80028f2:	b103      	cbz	r3, 80028f6 <_isatty_r+0x1a>
 80028f4:	6023      	str	r3, [r4, #0]
 80028f6:	bd38      	pop	{r3, r4, r5, pc}
 80028f8:	2000017c 	.word	0x2000017c

080028fc <_malloc_usable_size_r>:
 80028fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002900:	1f18      	subs	r0, r3, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	bfbc      	itt	lt
 8002906:	580b      	ldrlt	r3, [r1, r0]
 8002908:	18c0      	addlt	r0, r0, r3
 800290a:	4770      	bx	lr

0800290c <findslot>:
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <findslot+0x2c>)
 800290e:	b510      	push	{r4, lr}
 8002910:	4604      	mov	r4, r0
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	b118      	cbz	r0, 800291e <findslot+0x12>
 8002916:	6983      	ldr	r3, [r0, #24]
 8002918:	b90b      	cbnz	r3, 800291e <findslot+0x12>
 800291a:	f7fe ff5f 	bl	80017dc <__sinit>
 800291e:	2c13      	cmp	r4, #19
 8002920:	d807      	bhi.n	8002932 <findslot+0x26>
 8002922:	4806      	ldr	r0, [pc, #24]	; (800293c <findslot+0x30>)
 8002924:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002928:	3201      	adds	r2, #1
 800292a:	d002      	beq.n	8002932 <findslot+0x26>
 800292c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002930:	bd10      	pop	{r4, pc}
 8002932:	2000      	movs	r0, #0
 8002934:	e7fc      	b.n	8002930 <findslot+0x24>
 8002936:	bf00      	nop
 8002938:	20000000 	.word	0x20000000
 800293c:	2000008c 	.word	0x2000008c

08002940 <checkerror>:
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002942:	1c43      	adds	r3, r0, #1
 8002944:	4604      	mov	r4, r0
 8002946:	d109      	bne.n	800295c <checkerror+0x1c>
 8002948:	f7fe fe86 	bl	8001658 <__errno>
 800294c:	2613      	movs	r6, #19
 800294e:	4605      	mov	r5, r0
 8002950:	2700      	movs	r7, #0
 8002952:	4630      	mov	r0, r6
 8002954:	4639      	mov	r1, r7
 8002956:	beab      	bkpt	0x00ab
 8002958:	4606      	mov	r6, r0
 800295a:	602e      	str	r6, [r5, #0]
 800295c:	4620      	mov	r0, r4
 800295e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002960 <error>:
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	4604      	mov	r4, r0
 8002964:	f7fe fe78 	bl	8001658 <__errno>
 8002968:	2613      	movs	r6, #19
 800296a:	4605      	mov	r5, r0
 800296c:	2700      	movs	r7, #0
 800296e:	4630      	mov	r0, r6
 8002970:	4639      	mov	r1, r7
 8002972:	beab      	bkpt	0x00ab
 8002974:	4606      	mov	r6, r0
 8002976:	602e      	str	r6, [r5, #0]
 8002978:	4620      	mov	r0, r4
 800297a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800297c <_swiread>:
 800297c:	b530      	push	{r4, r5, lr}
 800297e:	b085      	sub	sp, #20
 8002980:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002984:	9203      	str	r2, [sp, #12]
 8002986:	2406      	movs	r4, #6
 8002988:	ad01      	add	r5, sp, #4
 800298a:	4620      	mov	r0, r4
 800298c:	4629      	mov	r1, r5
 800298e:	beab      	bkpt	0x00ab
 8002990:	4604      	mov	r4, r0
 8002992:	4620      	mov	r0, r4
 8002994:	f7ff ffd4 	bl	8002940 <checkerror>
 8002998:	b005      	add	sp, #20
 800299a:	bd30      	pop	{r4, r5, pc}

0800299c <_read>:
 800299c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800299e:	4615      	mov	r5, r2
 80029a0:	9101      	str	r1, [sp, #4]
 80029a2:	f7ff ffb3 	bl	800290c <findslot>
 80029a6:	9901      	ldr	r1, [sp, #4]
 80029a8:	4604      	mov	r4, r0
 80029aa:	b938      	cbnz	r0, 80029bc <_read+0x20>
 80029ac:	f7fe fe54 	bl	8001658 <__errno>
 80029b0:	2309      	movs	r3, #9
 80029b2:	6003      	str	r3, [r0, #0]
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295
 80029b8:	b003      	add	sp, #12
 80029ba:	bd30      	pop	{r4, r5, pc}
 80029bc:	6800      	ldr	r0, [r0, #0]
 80029be:	462a      	mov	r2, r5
 80029c0:	f7ff ffdc 	bl	800297c <_swiread>
 80029c4:	1c43      	adds	r3, r0, #1
 80029c6:	d0f7      	beq.n	80029b8 <_read+0x1c>
 80029c8:	6863      	ldr	r3, [r4, #4]
 80029ca:	1a2a      	subs	r2, r5, r0
 80029cc:	4413      	add	r3, r2
 80029ce:	6063      	str	r3, [r4, #4]
 80029d0:	4610      	mov	r0, r2
 80029d2:	e7f1      	b.n	80029b8 <_read+0x1c>

080029d4 <_swilseek>:
 80029d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029d6:	460c      	mov	r4, r1
 80029d8:	4616      	mov	r6, r2
 80029da:	f7ff ff97 	bl	800290c <findslot>
 80029de:	4605      	mov	r5, r0
 80029e0:	b940      	cbnz	r0, 80029f4 <_swilseek+0x20>
 80029e2:	f7fe fe39 	bl	8001658 <__errno>
 80029e6:	2309      	movs	r3, #9
 80029e8:	6003      	str	r3, [r0, #0]
 80029ea:	f04f 34ff 	mov.w	r4, #4294967295
 80029ee:	4620      	mov	r0, r4
 80029f0:	b003      	add	sp, #12
 80029f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f4:	2e02      	cmp	r6, #2
 80029f6:	d903      	bls.n	8002a00 <_swilseek+0x2c>
 80029f8:	f7fe fe2e 	bl	8001658 <__errno>
 80029fc:	2316      	movs	r3, #22
 80029fe:	e7f3      	b.n	80029e8 <_swilseek+0x14>
 8002a00:	2e01      	cmp	r6, #1
 8002a02:	d112      	bne.n	8002a2a <_swilseek+0x56>
 8002a04:	6843      	ldr	r3, [r0, #4]
 8002a06:	18e4      	adds	r4, r4, r3
 8002a08:	d4f6      	bmi.n	80029f8 <_swilseek+0x24>
 8002a0a:	682b      	ldr	r3, [r5, #0]
 8002a0c:	260a      	movs	r6, #10
 8002a0e:	e9cd 3400 	strd	r3, r4, [sp]
 8002a12:	466f      	mov	r7, sp
 8002a14:	4630      	mov	r0, r6
 8002a16:	4639      	mov	r1, r7
 8002a18:	beab      	bkpt	0x00ab
 8002a1a:	4606      	mov	r6, r0
 8002a1c:	4630      	mov	r0, r6
 8002a1e:	f7ff ff8f 	bl	8002940 <checkerror>
 8002a22:	2800      	cmp	r0, #0
 8002a24:	dbe1      	blt.n	80029ea <_swilseek+0x16>
 8002a26:	606c      	str	r4, [r5, #4]
 8002a28:	e7e1      	b.n	80029ee <_swilseek+0x1a>
 8002a2a:	2e02      	cmp	r6, #2
 8002a2c:	d1ed      	bne.n	8002a0a <_swilseek+0x36>
 8002a2e:	6803      	ldr	r3, [r0, #0]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	260c      	movs	r6, #12
 8002a34:	466f      	mov	r7, sp
 8002a36:	4630      	mov	r0, r6
 8002a38:	4639      	mov	r1, r7
 8002a3a:	beab      	bkpt	0x00ab
 8002a3c:	4606      	mov	r6, r0
 8002a3e:	4630      	mov	r0, r6
 8002a40:	f7ff ff7e 	bl	8002940 <checkerror>
 8002a44:	1c43      	adds	r3, r0, #1
 8002a46:	d0d0      	beq.n	80029ea <_swilseek+0x16>
 8002a48:	4404      	add	r4, r0
 8002a4a:	e7de      	b.n	8002a0a <_swilseek+0x36>

08002a4c <_lseek>:
 8002a4c:	f7ff bfc2 	b.w	80029d4 <_swilseek>

08002a50 <_swiwrite>:
 8002a50:	b530      	push	{r4, r5, lr}
 8002a52:	b085      	sub	sp, #20
 8002a54:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002a58:	9203      	str	r2, [sp, #12]
 8002a5a:	2405      	movs	r4, #5
 8002a5c:	ad01      	add	r5, sp, #4
 8002a5e:	4620      	mov	r0, r4
 8002a60:	4629      	mov	r1, r5
 8002a62:	beab      	bkpt	0x00ab
 8002a64:	4604      	mov	r4, r0
 8002a66:	4620      	mov	r0, r4
 8002a68:	f7ff ff6a 	bl	8002940 <checkerror>
 8002a6c:	b005      	add	sp, #20
 8002a6e:	bd30      	pop	{r4, r5, pc}

08002a70 <_write>:
 8002a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a72:	4615      	mov	r5, r2
 8002a74:	9101      	str	r1, [sp, #4]
 8002a76:	f7ff ff49 	bl	800290c <findslot>
 8002a7a:	9901      	ldr	r1, [sp, #4]
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	b930      	cbnz	r0, 8002a8e <_write+0x1e>
 8002a80:	f7fe fdea 	bl	8001658 <__errno>
 8002a84:	2309      	movs	r3, #9
 8002a86:	6003      	str	r3, [r0, #0]
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8c:	e012      	b.n	8002ab4 <_write+0x44>
 8002a8e:	6800      	ldr	r0, [r0, #0]
 8002a90:	462a      	mov	r2, r5
 8002a92:	f7ff ffdd 	bl	8002a50 <_swiwrite>
 8002a96:	2800      	cmp	r0, #0
 8002a98:	dbf6      	blt.n	8002a88 <_write+0x18>
 8002a9a:	6862      	ldr	r2, [r4, #4]
 8002a9c:	1a2b      	subs	r3, r5, r0
 8002a9e:	441a      	add	r2, r3
 8002aa0:	42a8      	cmp	r0, r5
 8002aa2:	6062      	str	r2, [r4, #4]
 8002aa4:	d105      	bne.n	8002ab2 <_write+0x42>
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	b003      	add	sp, #12
 8002aaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002aae:	f7ff bf57 	b.w	8002960 <error>
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	b003      	add	sp, #12
 8002ab6:	bd30      	pop	{r4, r5, pc}

08002ab8 <_swiclose>:
 8002ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002aba:	2402      	movs	r4, #2
 8002abc:	9001      	str	r0, [sp, #4]
 8002abe:	ad01      	add	r5, sp, #4
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	4629      	mov	r1, r5
 8002ac4:	beab      	bkpt	0x00ab
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f7ff ff39 	bl	8002940 <checkerror>
 8002ace:	b003      	add	sp, #12
 8002ad0:	bd30      	pop	{r4, r5, pc}
	...

08002ad4 <_close>:
 8002ad4:	b538      	push	{r3, r4, r5, lr}
 8002ad6:	4605      	mov	r5, r0
 8002ad8:	f7ff ff18 	bl	800290c <findslot>
 8002adc:	4604      	mov	r4, r0
 8002ade:	b930      	cbnz	r0, 8002aee <_close+0x1a>
 8002ae0:	f7fe fdba 	bl	8001658 <__errno>
 8002ae4:	2309      	movs	r3, #9
 8002ae6:	6003      	str	r3, [r0, #0]
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aec:	bd38      	pop	{r3, r4, r5, pc}
 8002aee:	3d01      	subs	r5, #1
 8002af0:	2d01      	cmp	r5, #1
 8002af2:	d809      	bhi.n	8002b08 <_close+0x34>
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <_close+0x48>)
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d104      	bne.n	8002b08 <_close+0x34>
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	6003      	str	r3, [r0, #0]
 8002b04:	2000      	movs	r0, #0
 8002b06:	e7f1      	b.n	8002aec <_close+0x18>
 8002b08:	6820      	ldr	r0, [r4, #0]
 8002b0a:	f7ff ffd5 	bl	8002ab8 <_swiclose>
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d1ec      	bne.n	8002aec <_close+0x18>
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
 8002b16:	6023      	str	r3, [r4, #0]
 8002b18:	e7e8      	b.n	8002aec <_close+0x18>
 8002b1a:	bf00      	nop
 8002b1c:	2000008c 	.word	0x2000008c

08002b20 <_swistat>:
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	460c      	mov	r4, r1
 8002b24:	f7ff fef2 	bl	800290c <findslot>
 8002b28:	4605      	mov	r5, r0
 8002b2a:	b930      	cbnz	r0, 8002b3a <_swistat+0x1a>
 8002b2c:	f7fe fd94 	bl	8001658 <__errno>
 8002b30:	2309      	movs	r3, #9
 8002b32:	6003      	str	r3, [r0, #0]
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295
 8002b38:	bd70      	pop	{r4, r5, r6, pc}
 8002b3a:	6863      	ldr	r3, [r4, #4]
 8002b3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b40:	6063      	str	r3, [r4, #4]
 8002b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b46:	64a3      	str	r3, [r4, #72]	; 0x48
 8002b48:	260c      	movs	r6, #12
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	beab      	bkpt	0x00ab
 8002b50:	4605      	mov	r5, r0
 8002b52:	4628      	mov	r0, r5
 8002b54:	f7ff fef4 	bl	8002940 <checkerror>
 8002b58:	1c43      	adds	r3, r0, #1
 8002b5a:	bf1c      	itt	ne
 8002b5c:	6120      	strne	r0, [r4, #16]
 8002b5e:	2000      	movne	r0, #0
 8002b60:	e7ea      	b.n	8002b38 <_swistat+0x18>

08002b62 <_fstat>:
 8002b62:	460b      	mov	r3, r1
 8002b64:	b510      	push	{r4, lr}
 8002b66:	2100      	movs	r1, #0
 8002b68:	4604      	mov	r4, r0
 8002b6a:	2258      	movs	r2, #88	; 0x58
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe fd9d 	bl	80016ac <memset>
 8002b72:	4601      	mov	r1, r0
 8002b74:	4620      	mov	r0, r4
 8002b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b7a:	f7ff bfd1 	b.w	8002b20 <_swistat>

08002b7e <_isatty>:
 8002b7e:	b570      	push	{r4, r5, r6, lr}
 8002b80:	f7ff fec4 	bl	800290c <findslot>
 8002b84:	2509      	movs	r5, #9
 8002b86:	4604      	mov	r4, r0
 8002b88:	b920      	cbnz	r0, 8002b94 <_isatty+0x16>
 8002b8a:	f7fe fd65 	bl	8001658 <__errno>
 8002b8e:	6005      	str	r5, [r0, #0]
 8002b90:	4620      	mov	r0, r4
 8002b92:	bd70      	pop	{r4, r5, r6, pc}
 8002b94:	4628      	mov	r0, r5
 8002b96:	4621      	mov	r1, r4
 8002b98:	beab      	bkpt	0x00ab
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	2c01      	cmp	r4, #1
 8002b9e:	d0f7      	beq.n	8002b90 <_isatty+0x12>
 8002ba0:	f7fe fd5a 	bl	8001658 <__errno>
 8002ba4:	2400      	movs	r4, #0
 8002ba6:	4605      	mov	r5, r0
 8002ba8:	2613      	movs	r6, #19
 8002baa:	4630      	mov	r0, r6
 8002bac:	4621      	mov	r1, r4
 8002bae:	beab      	bkpt	0x00ab
 8002bb0:	4606      	mov	r6, r0
 8002bb2:	602e      	str	r6, [r5, #0]
 8002bb4:	e7ec      	b.n	8002b90 <_isatty+0x12>
	...

08002bb8 <_init>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	bf00      	nop
 8002bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	469e      	mov	lr, r3
 8002bc2:	4770      	bx	lr

08002bc4 <_fini>:
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	bf00      	nop
 8002bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bca:	bc08      	pop	{r3}
 8002bcc:	469e      	mov	lr, r3
 8002bce:	4770      	bx	lr
