
weather_station2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002494  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f0  080026f0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080026f0  080026f0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026f0  080026f0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f4  080026f4  000126f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080026f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000064  0800275c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  0800275c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e16  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abf  00000000  00000000  00027eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a0  00000000  00000000  00029970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003a8  00000000  00000000  00029e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000102f4  00000000  00000000  0002a1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005fc2  00000000  00000000  0003a4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055b92  00000000  00000000  0004046e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00096000  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001458  00000000  00000000  00096054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800261c 	.word	0x0800261c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	0800261c 	.word	0x0800261c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <calculate_SYSCFG_values>:
 *  Created on: Nov 29, 2021
 *      Author: toni
 */
#include "EXTI_lib.h"

static void calculate_SYSCFG_values(uint8_t pin_num, uint8_t *buf) {
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	71fb      	strb	r3, [r7, #7]

	uint8_t SYSCFG_num = pin_num / 4;
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	089b      	lsrs	r3, r3, #2
 80002a0:	73fb      	strb	r3, [r7, #15]
	uint8_t SYSCFG_pos = pin_num % 4 * 4;
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 0303 	and.w	r3, r3, #3
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	73bb      	strb	r3, [r7, #14]

	buf[0] = SYSCFG_num;
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	7bfa      	ldrb	r2, [r7, #15]
 80002b2:	701a      	strb	r2, [r3, #0]
	buf[1] = SYSCFG_pos;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	3301      	adds	r3, #1
 80002b8:	7bba      	ldrb	r2, [r7, #14]
 80002ba:	701a      	strb	r2, [r3, #0]

}
 80002bc:	bf00      	nop
 80002be:	3714      	adds	r7, #20
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr

080002c8 <enable_EXTI_GPIO>:

void enable_EXTI_GPIO(uint8_t pin_num, uint8_t gpio, uint8_t edge) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
 80002d2:	460b      	mov	r3, r1
 80002d4:	71bb      	strb	r3, [r7, #6]
 80002d6:	4613      	mov	r3, r2
 80002d8:	717b      	strb	r3, [r7, #5]

	RCC->APB2ENR |= 1u << 14;
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <enable_EXTI_GPIO+0x5c>)
 80002dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002de:	4a11      	ldr	r2, [pc, #68]	; (8000324 <enable_EXTI_GPIO+0x5c>)
 80002e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002e4:	6453      	str	r3, [r2, #68]	; 0x44

	//enable correct port from SYSCFG register for EXTI
	uint8_t SYSCFG_values[2];
	calculate_SYSCFG_values(pin_num, SYSCFG_values);
 80002e6:	f107 020c 	add.w	r2, r7, #12
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	4611      	mov	r1, r2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f7ff ffce 	bl	8000290 <calculate_SYSCFG_values>

	SYSCFG->EXTICR[SYSCFG_values[0]] |= (gpio << SYSCFG_values[1]);
 80002f4:	4a0c      	ldr	r2, [pc, #48]	; (8000328 <enable_EXTI_GPIO+0x60>)
 80002f6:	7b3b      	ldrb	r3, [r7, #12]
 80002f8:	3302      	adds	r3, #2
 80002fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fe:	79ba      	ldrb	r2, [r7, #6]
 8000300:	7b79      	ldrb	r1, [r7, #13]
 8000302:	408a      	lsls	r2, r1
 8000304:	4908      	ldr	r1, [pc, #32]	; (8000328 <enable_EXTI_GPIO+0x60>)
 8000306:	7b38      	ldrb	r0, [r7, #12]
 8000308:	431a      	orrs	r2, r3
 800030a:	1c83      	adds	r3, r0, #2
 800030c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	enable_EXTI(pin_num, edge);
 8000310:	797a      	ldrb	r2, [r7, #5]
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	4611      	mov	r1, r2
 8000316:	4618      	mov	r0, r3
 8000318:	f000 f808 	bl	800032c <enable_EXTI>

}
 800031c:	bf00      	nop
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	40023800 	.word	0x40023800
 8000328:	40013800 	.word	0x40013800

0800032c <enable_EXTI>:

	disable_EXTI(pin_num);

}

void enable_EXTI(uint8_t EXTI_num, uint8_t edge) {
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	460a      	mov	r2, r1
 8000336:	71fb      	strb	r3, [r7, #7]
 8000338:	4613      	mov	r3, r2
 800033a:	71bb      	strb	r3, [r7, #6]
	switch (edge) {
 800033c:	79bb      	ldrb	r3, [r7, #6]
 800033e:	2b02      	cmp	r3, #2
 8000340:	d006      	beq.n	8000350 <enable_EXTI+0x24>
 8000342:	2b02      	cmp	r3, #2
 8000344:	dc2b      	bgt.n	800039e <enable_EXTI+0x72>
 8000346:	2b00      	cmp	r3, #0
 8000348:	d015      	beq.n	8000376 <enable_EXTI+0x4a>
 800034a:	2b01      	cmp	r3, #1
 800034c:	d01d      	beq.n	800038a <enable_EXTI+0x5e>
 800034e:	e026      	b.n	800039e <enable_EXTI+0x72>
	case EXTI_REFE:
		EXTI->FTSR |= 1u << EXTI_num;
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <enable_EXTI+0x90>)
 8000352:	68da      	ldr	r2, [r3, #12]
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	2101      	movs	r1, #1
 8000358:	fa01 f303 	lsl.w	r3, r1, r3
 800035c:	4917      	ldr	r1, [pc, #92]	; (80003bc <enable_EXTI+0x90>)
 800035e:	4313      	orrs	r3, r2
 8000360:	60cb      	str	r3, [r1, #12]
		EXTI->RTSR |= 1u << EXTI_num;
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <enable_EXTI+0x90>)
 8000364:	689a      	ldr	r2, [r3, #8]
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	2101      	movs	r1, #1
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	4913      	ldr	r1, [pc, #76]	; (80003bc <enable_EXTI+0x90>)
 8000370:	4313      	orrs	r3, r2
 8000372:	608b      	str	r3, [r1, #8]
		break;
 8000374:	e013      	b.n	800039e <enable_EXTI+0x72>

	case EXTI_RE:
		EXTI->RTSR |= 1u << EXTI_num;
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <enable_EXTI+0x90>)
 8000378:	689a      	ldr	r2, [r3, #8]
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	2101      	movs	r1, #1
 800037e:	fa01 f303 	lsl.w	r3, r1, r3
 8000382:	490e      	ldr	r1, [pc, #56]	; (80003bc <enable_EXTI+0x90>)
 8000384:	4313      	orrs	r3, r2
 8000386:	608b      	str	r3, [r1, #8]
		break;
 8000388:	e009      	b.n	800039e <enable_EXTI+0x72>

	case EXTI_FE:
		EXTI->FTSR |= 1u << EXTI_num;
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <enable_EXTI+0x90>)
 800038c:	68da      	ldr	r2, [r3, #12]
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	2101      	movs	r1, #1
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	4909      	ldr	r1, [pc, #36]	; (80003bc <enable_EXTI+0x90>)
 8000398:	4313      	orrs	r3, r2
 800039a:	60cb      	str	r3, [r1, #12]
		break;
 800039c:	bf00      	nop
	}

	EXTI->IMR |= 1u << EXTI_num;
 800039e:	4b07      	ldr	r3, [pc, #28]	; (80003bc <enable_EXTI+0x90>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	2101      	movs	r1, #1
 80003a6:	fa01 f303 	lsl.w	r3, r1, r3
 80003aa:	4904      	ldr	r1, [pc, #16]	; (80003bc <enable_EXTI+0x90>)
 80003ac:	4313      	orrs	r3, r2
 80003ae:	600b      	str	r3, [r1, #0]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	40013c00 	.word	0x40013c00

080003c0 <disable_EXTI>:

void disable_EXTI(uint8_t EXTI_num) {
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
	EXTI->FTSR &= ~(1u << EXTI_num);
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <disable_EXTI+0x54>)
 80003cc:	68da      	ldr	r2, [r3, #12]
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	2101      	movs	r1, #1
 80003d2:	fa01 f303 	lsl.w	r3, r1, r3
 80003d6:	43db      	mvns	r3, r3
 80003d8:	490e      	ldr	r1, [pc, #56]	; (8000414 <disable_EXTI+0x54>)
 80003da:	4013      	ands	r3, r2
 80003dc:	60cb      	str	r3, [r1, #12]
	EXTI->RTSR &= ~(1u << EXTI_num);
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <disable_EXTI+0x54>)
 80003e0:	689a      	ldr	r2, [r3, #8]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	2101      	movs	r1, #1
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	43db      	mvns	r3, r3
 80003ec:	4909      	ldr	r1, [pc, #36]	; (8000414 <disable_EXTI+0x54>)
 80003ee:	4013      	ands	r3, r2
 80003f0:	608b      	str	r3, [r1, #8]

	EXTI->IMR &= ~(1u << EXTI_num);
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <disable_EXTI+0x54>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	2101      	movs	r1, #1
 80003fa:	fa01 f303 	lsl.w	r3, r1, r3
 80003fe:	43db      	mvns	r3, r3
 8000400:	4904      	ldr	r1, [pc, #16]	; (8000414 <disable_EXTI+0x54>)
 8000402:	4013      	ands	r3, r2
 8000404:	600b      	str	r3, [r1, #0]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40013c00 	.word	0x40013c00

08000418 <enable_GPIOx_clock>:
#include "GPIO_Lib.h"

static void enable_GPIOx_clock(GPIO_TypeDef *gpio) {
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]

	if (gpio == GPIOA) {
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a23      	ldr	r2, [pc, #140]	; (80004b0 <enable_GPIOx_clock+0x98>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <enable_GPIOx_clock+0x1e>

		RCC->AHB1ENR |= GPIOA_CLOCK_EN;
 8000428:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <enable_GPIOx_clock+0x9c>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a21      	ldr	r2, [pc, #132]	; (80004b4 <enable_GPIOx_clock+0x9c>)
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6313      	str	r3, [r2, #48]	; 0x30

	} else if (gpio == GPIOH) {

		RCC->AHB1ENR |= GPIOH_CLOCK_EN;
	}
}
 8000434:	e035      	b.n	80004a2 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOB) {
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a1f      	ldr	r2, [pc, #124]	; (80004b8 <enable_GPIOx_clock+0xa0>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d106      	bne.n	800044c <enable_GPIOx_clock+0x34>
		RCC->AHB1ENR |= GPIOB_CLOCK_EN;
 800043e:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <enable_GPIOx_clock+0x9c>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000442:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <enable_GPIOx_clock+0x9c>)
 8000444:	f043 0302 	orr.w	r3, r3, #2
 8000448:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044a:	e02a      	b.n	80004a2 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOC) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <enable_GPIOx_clock+0xa4>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d106      	bne.n	8000462 <enable_GPIOx_clock+0x4a>
		RCC->AHB1ENR |= GPIOC_CLOCK_EN;
 8000454:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <enable_GPIOx_clock+0x9c>)
 8000456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000458:	4a16      	ldr	r2, [pc, #88]	; (80004b4 <enable_GPIOx_clock+0x9c>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000460:	e01f      	b.n	80004a2 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOD) {
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a16      	ldr	r2, [pc, #88]	; (80004c0 <enable_GPIOx_clock+0xa8>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d106      	bne.n	8000478 <enable_GPIOx_clock+0x60>
		RCC->AHB1ENR |= GPIOD_CLOCK_EN;
 800046a:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <enable_GPIOx_clock+0x9c>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	4a11      	ldr	r2, [pc, #68]	; (80004b4 <enable_GPIOx_clock+0x9c>)
 8000470:	f043 0308 	orr.w	r3, r3, #8
 8000474:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000476:	e014      	b.n	80004a2 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOE) {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <enable_GPIOx_clock+0xac>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d106      	bne.n	800048e <enable_GPIOx_clock+0x76>
		RCC->AHB1ENR |= GPIOE_CLOCK_EN;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <enable_GPIOx_clock+0x9c>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <enable_GPIOx_clock+0x9c>)
 8000486:	f043 0310 	orr.w	r3, r3, #16
 800048a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048c:	e009      	b.n	80004a2 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOH) {
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <enable_GPIOx_clock+0xb0>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d105      	bne.n	80004a2 <enable_GPIOx_clock+0x8a>
		RCC->AHB1ENR |= GPIOH_CLOCK_EN;
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <enable_GPIOx_clock+0x9c>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049a:	4a06      	ldr	r2, [pc, #24]	; (80004b4 <enable_GPIOx_clock+0x9c>)
 800049c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40020000 	.word	0x40020000
 80004b4:	40023800 	.word	0x40023800
 80004b8:	40020400 	.word	0x40020400
 80004bc:	40020800 	.word	0x40020800
 80004c0:	40020c00 	.word	0x40020c00
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40021c00 	.word	0x40021c00

080004cc <init_pin>:

void init_pin(pin_type *pin) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

	enable_GPIOx_clock(pin->gpio);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ff9d 	bl	8000418 <enable_GPIOx_clock>

	change_mode(pin);
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f000 f822 	bl	8000528 <change_mode>

	uint8_t reg_H_L = pin->pin_num < 8 ? 0 : 1;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	2b07      	cmp	r3, #7
 80004ea:	bf8c      	ite	hi
 80004ec:	2301      	movhi	r3, #1
 80004ee:	2300      	movls	r3, #0
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	73fb      	strb	r3, [r7, #15]
	pin->gpio->AFR[reg_H_L] |= pin->AF_num << (pin->pin_num * 4);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	7bfa      	ldrb	r2, [r7, #15]
 80004fa:	3208      	adds	r2, #8
 80004fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	7a1b      	ldrb	r3, [r3, #8]
 8000504:	461a      	mov	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	791b      	ldrb	r3, [r3, #4]
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	fa02 f303 	lsl.w	r3, r2, r3
 8000510:	4618      	mov	r0, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	7bfa      	ldrb	r2, [r7, #15]
 8000518:	4301      	orrs	r1, r0
 800051a:	3208      	adds	r2, #8
 800051c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <change_mode>:

void change_mode(pin_type *pin) {
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	pin->gpio->MODER &= ~(3u << ((pin->pin_num * 2)));
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	6819      	ldr	r1, [r3, #0]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	2203      	movs	r2, #3
 800053e:	fa02 f303 	lsl.w	r3, r2, r3
 8000542:	43da      	mvns	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	400a      	ands	r2, r1
 800054a:	601a      	str	r2, [r3, #0]
	pin->gpio->PUPDR &= ~(3u << ((pin->pin_num * 2)));
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	68d9      	ldr	r1, [r3, #12]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	2203      	movs	r2, #3
 800055a:	fa02 f303 	lsl.w	r3, r2, r3
 800055e:	43da      	mvns	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	400a      	ands	r2, r1
 8000566:	60da      	str	r2, [r3, #12]
	pin->gpio->OTYPER &= ~(1u << pin->pin_num);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	6859      	ldr	r1, [r3, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	461a      	mov	r2, r3
 8000574:	2301      	movs	r3, #1
 8000576:	4093      	lsls	r3, r2
 8000578:	43da      	mvns	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	400a      	ands	r2, r1
 8000580:	605a      	str	r2, [r3, #4]

	pin->gpio->MODER |= pin->mode << (pin->pin_num * 2);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	795b      	ldrb	r3, [r3, #5]
 800058c:	4619      	mov	r1, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	791b      	ldrb	r3, [r3, #4]
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	fa01 f303 	lsl.w	r3, r1, r3
 8000598:	4619      	mov	r1, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	430a      	orrs	r2, r1
 80005a0:	601a      	str	r2, [r3, #0]
	pin->gpio->OTYPER |= pin->PP_OD << pin->pin_num;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	685a      	ldr	r2, [r3, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	799b      	ldrb	r3, [r3, #6]
 80005ac:	4619      	mov	r1, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	791b      	ldrb	r3, [r3, #4]
 80005b2:	fa01 f303 	lsl.w	r3, r1, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	430a      	orrs	r2, r1
 80005be:	605a      	str	r2, [r3, #4]
	pin->gpio->PUPDR |= pin->push_pull << (pin->pin_num * 2);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	68da      	ldr	r2, [r3, #12]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	79db      	ldrb	r3, [r3, #7]
 80005ca:	4619      	mov	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	430a      	orrs	r2, r1
 80005de:	60da      	str	r2, [r3, #12]

}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <read_pin>:
	}

	return state;
}

pin_state read_pin(pin_type *pin) {
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	uint32_t state = (pin->gpio->IDR >> pin->pin_num) & 1u;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	691b      	ldr	r3, [r3, #16]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7912      	ldrb	r2, [r2, #4]
 80005fe:	40d3      	lsrs	r3, r2
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	60fb      	str	r3, [r7, #12]

	if (state == 1) {
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d101      	bne.n	8000610 <read_pin+0x24>
		return HIGH;
 800060c:	2301      	movs	r3, #1
 800060e:	e000      	b.n	8000612 <read_pin+0x26>
	}

	return LOW;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
	...

08000620 <I2C_enable_clock>:
 */
#include "I2C_lib.h"
#include "clocks_lib.h"
#include "NVIC_lib.h"

static void I2C_enable_clock(I2C_handle_type *handle) {
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

	if (handle->peripheral == I2C1) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a13      	ldr	r2, [pc, #76]	; (800067c <I2C_enable_clock+0x5c>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d106      	bne.n	8000640 <I2C_enable_clock+0x20>
		RCC->APB1ENR |= 1u << 21;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <I2C_enable_clock+0x60>)
 8000634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <I2C_enable_clock+0x60>)
 8000638:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800063c:	6413      	str	r3, [r2, #64]	; 0x40
	} else if (handle->peripheral == I2C2) {
		RCC->APB1ENR |= 1u << 22;
	} else if (handle->peripheral == I2C3) {
		RCC->APB1ENR |= 1u << 23;
	}
}
 800063e:	e016      	b.n	800066e <I2C_enable_clock+0x4e>
	} else if (handle->peripheral == I2C2) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <I2C_enable_clock+0x64>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d106      	bne.n	8000658 <I2C_enable_clock+0x38>
		RCC->APB1ENR |= 1u << 22;
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <I2C_enable_clock+0x60>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <I2C_enable_clock+0x60>)
 8000650:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000654:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000656:	e00a      	b.n	800066e <I2C_enable_clock+0x4e>
	} else if (handle->peripheral == I2C3) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <I2C_enable_clock+0x68>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d105      	bne.n	800066e <I2C_enable_clock+0x4e>
		RCC->APB1ENR |= 1u << 23;
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <I2C_enable_clock+0x60>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	4a06      	ldr	r2, [pc, #24]	; (8000680 <I2C_enable_clock+0x60>)
 8000668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800066c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40005400 	.word	0x40005400
 8000680:	40023800 	.word	0x40023800
 8000684:	40005800 	.word	0x40005800
 8000688:	40005c00 	.word	0x40005c00

0800068c <I2C_enable_IR>:

static void I2C_enable_IR(I2C_handle_type *handle) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

	if (handle->peripheral == I2C1) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <I2C_enable_IR+0x58>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d106      	bne.n	80006ac <I2C_enable_IR+0x20>
		enable_IR(I2C1_EV_IRQn);
 800069e:	201f      	movs	r0, #31
 80006a0:	f000 faae 	bl	8000c00 <enable_IR>
		enable_IR(I2C1_ER_IRQn);
 80006a4:	2020      	movs	r0, #32
 80006a6:	f000 faab 	bl	8000c00 <enable_IR>
		enable_IR(I2C2_ER_IRQn);
	} else if (handle->peripheral == I2C3) {
		enable_IR(I2C3_EV_IRQn);
		enable_IR(I2C3_ER_IRQn);
	}
}
 80006aa:	e016      	b.n	80006da <I2C_enable_IR+0x4e>
	} else if (handle->peripheral == I2C2) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <I2C_enable_IR+0x5c>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d106      	bne.n	80006c4 <I2C_enable_IR+0x38>
		enable_IR(I2C2_EV_IRQn);
 80006b6:	2021      	movs	r0, #33	; 0x21
 80006b8:	f000 faa2 	bl	8000c00 <enable_IR>
		enable_IR(I2C2_ER_IRQn);
 80006bc:	2022      	movs	r0, #34	; 0x22
 80006be:	f000 fa9f 	bl	8000c00 <enable_IR>
}
 80006c2:	e00a      	b.n	80006da <I2C_enable_IR+0x4e>
	} else if (handle->peripheral == I2C3) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a08      	ldr	r2, [pc, #32]	; (80006ec <I2C_enable_IR+0x60>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d105      	bne.n	80006da <I2C_enable_IR+0x4e>
		enable_IR(I2C3_EV_IRQn);
 80006ce:	2048      	movs	r0, #72	; 0x48
 80006d0:	f000 fa96 	bl	8000c00 <enable_IR>
		enable_IR(I2C3_ER_IRQn);
 80006d4:	2049      	movs	r0, #73	; 0x49
 80006d6:	f000 fa93 	bl	8000c00 <enable_IR>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40005400 	.word	0x40005400
 80006e8:	40005800 	.word	0x40005800
 80006ec:	40005c00 	.word	0x40005c00

080006f0 <I2C_disable_IR>:

static void I2C_disable_IR(I2C_handle_type *handle) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	if (handle->peripheral == I2C1) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <I2C_disable_IR+0x58>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d106      	bne.n	8000710 <I2C_disable_IR+0x20>
		disable_IR(I2C1_EV_IRQn);
 8000702:	201f      	movs	r0, #31
 8000704:	f000 fa9c 	bl	8000c40 <disable_IR>
		disable_IR(I2C1_ER_IRQn);
 8000708:	2020      	movs	r0, #32
 800070a:	f000 fa99 	bl	8000c40 <disable_IR>
		disable_IR(I2C2_ER_IRQn);
	} else if (handle->peripheral == I2C3) {
		disable_IR(I2C3_EV_IRQn);
		disable_IR(I2C3_ER_IRQn);
	}
}
 800070e:	e016      	b.n	800073e <I2C_disable_IR+0x4e>
	} else if (handle->peripheral == I2C2) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a0d      	ldr	r2, [pc, #52]	; (800074c <I2C_disable_IR+0x5c>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d106      	bne.n	8000728 <I2C_disable_IR+0x38>
		disable_IR(I2C2_EV_IRQn);
 800071a:	2021      	movs	r0, #33	; 0x21
 800071c:	f000 fa90 	bl	8000c40 <disable_IR>
		disable_IR(I2C2_ER_IRQn);
 8000720:	2022      	movs	r0, #34	; 0x22
 8000722:	f000 fa8d 	bl	8000c40 <disable_IR>
}
 8000726:	e00a      	b.n	800073e <I2C_disable_IR+0x4e>
	} else if (handle->peripheral == I2C3) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a08      	ldr	r2, [pc, #32]	; (8000750 <I2C_disable_IR+0x60>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d105      	bne.n	800073e <I2C_disable_IR+0x4e>
		disable_IR(I2C3_EV_IRQn);
 8000732:	2048      	movs	r0, #72	; 0x48
 8000734:	f000 fa84 	bl	8000c40 <disable_IR>
		disable_IR(I2C3_ER_IRQn);
 8000738:	2049      	movs	r0, #73	; 0x49
 800073a:	f000 fa81 	bl	8000c40 <disable_IR>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40005400 	.word	0x40005400
 800074c:	40005800 	.word	0x40005800
 8000750:	40005c00 	.word	0x40005c00

08000754 <I2C_init>:

void I2C_init(I2C_handle_type *handle) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

	I2C_pins_init();
 800075c:	f001 fa06 	bl	8001b6c <I2C_pins_init>
	I2C_enable_clock(handle);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff5d 	bl	8000620 <I2C_enable_clock>

	//Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
	uint32_t APB1_clk = get_APB1_clock();
 8000766:	f000 fd67 	bl	8001238 <get_APB1_clock>
 800076a:	60f8      	str	r0, [r7, #12]
	uint8_t APB1_clk_MHz = APB1_clk / 1000000;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4a15      	ldr	r2, [pc, #84]	; (80007c4 <I2C_init+0x70>)
 8000770:	fba2 2303 	umull	r2, r3, r2, r3
 8000774:	0c9b      	lsrs	r3, r3, #18
 8000776:	72fb      	strb	r3, [r7, #11]
	handle->peripheral->CR2 |= 0x1Fu & APB1_clk_MHz;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	6859      	ldr	r1, [r3, #4]
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	f003 021f 	and.w	r2, r3, #31
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	430a      	orrs	r2, r1
 800078a:	605a      	str	r2, [r3, #4]

	//Configure the clock control registers
	uint16_t ccr = APB1_clk / 200000;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	099b      	lsrs	r3, r3, #6
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <I2C_init+0x74>)
 8000792:	fba2 2303 	umull	r2, r3, r2, r3
 8000796:	099b      	lsrs	r3, r3, #6
 8000798:	813b      	strh	r3, [r7, #8]
	handle->peripheral->CCR = ccr;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	893a      	ldrh	r2, [r7, #8]
 80007a0:	61da      	str	r2, [r3, #28]

	//Configure the rise time register
	handle->peripheral->TRISE = ccr + 1;
 80007a2:	893b      	ldrh	r3, [r7, #8]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	621a      	str	r2, [r3, #32]

	//enable interrupts
	handle->peripheral->CR2 |= 7u << 8;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	685a      	ldr	r2, [r3, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80007ba:	605a      	str	r2, [r3, #4]
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	431bde83 	.word	0x431bde83
 80007c8:	053e2d63 	.word	0x053e2d63

080007cc <start_communication>:

static uint8_t start_communication(I2C_handle_type *handle) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	if (handle->status != I2C_STATUS_IDLE) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7c1b      	ldrb	r3, [r3, #16]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <start_communication+0x14>
		return 1;
 80007dc:	2301      	movs	r3, #1
 80007de:	e013      	b.n	8000808 <start_communication+0x3c>
	}

	I2C_enable_IR(handle);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff53 	bl	800068c <I2C_enable_IR>

	//enable the peripheral
	handle->peripheral->CR1 |= 1u;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f042 0201 	orr.w	r2, r2, #1
 80007f4:	601a      	str	r2, [r3, #0]

	//generate a Start condition
	handle->peripheral->CR1 |= 1u << 8;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000804:	601a      	str	r2, [r3, #0]

	return 0;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <I2C_transmit_data>:

uint8_t I2C_transmit_data(I2C_handle_type *handle) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

	if (start_communication(handle)) {
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ffd7 	bl	80007cc <start_communication>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <I2C_transmit_data+0x18>
		return 1;
 8000824:	2301      	movs	r3, #1
 8000826:	e003      	b.n	8000830 <I2C_transmit_data+0x20>
	}

	handle->status = I2C_STATUS_TRANSMITTING;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2201      	movs	r2, #1
 800082c:	741a      	strb	r2, [r3, #16]

	return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <I2C_transmit_data_and_wait>:

uint8_t I2C_transmit_data_and_wait(I2C_handle_type *handle) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

	if (I2C_transmit_data(handle)) {
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ffe5 	bl	8000810 <I2C_transmit_data>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <I2C_transmit_data_and_wait+0x18>
		return 1;
 800084c:	2301      	movs	r3, #1
 800084e:	e005      	b.n	800085c <I2C_transmit_data_and_wait+0x24>
	}

	while (handle->status != I2C_STATUS_IDLE)
 8000850:	bf00      	nop
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	7c1b      	ldrb	r3, [r3, #16]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1fb      	bne.n	8000852 <I2C_transmit_data_and_wait+0x1a>
		;

	return 0;
 800085a:	2300      	movs	r3, #0

}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <I2C_receive_data>:

uint8_t I2C_receive_data(I2C_handle_type *handle) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

	if (start_communication(handle)) {
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ffad 	bl	80007cc <start_communication>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <I2C_receive_data+0x18>
		return 1;
 8000878:	2301      	movs	r3, #1
 800087a:	e00b      	b.n	8000894 <I2C_receive_data+0x30>
	}

	handle->status = I2C_STATUS_RECEIVING;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2202      	movs	r2, #2
 8000880:	741a      	strb	r2, [r3, #16]
	handle->peripheral->CR1 |= 1u << 10;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000890:	601a      	str	r2, [r3, #0]

	return 0;
 8000892:	2300      	movs	r3, #0

}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <I2C_receive_data_and_wait>:

uint8_t I2C_receive_data_and_wait(I2C_handle_type *handle) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

	if (I2C_receive_data(handle)) {
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ffdd 	bl	8000864 <I2C_receive_data>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <I2C_receive_data_and_wait+0x18>
		return 1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e005      	b.n	80008c0 <I2C_receive_data_and_wait+0x24>
	}

	while (handle->status != I2C_STATUS_IDLE)
 80008b4:	bf00      	nop
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	7c1b      	ldrb	r3, [r3, #16]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1fb      	bne.n	80008b6 <I2C_receive_data_and_wait+0x1a>
		;

	return 0;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <handle_start_condition>:

static void handle_start_condition(I2C_handle_type *handle) {
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]

	if (handle->addressing_mode == I2C_7_BIT_ADDRESSING) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d110      	bne.n	80008fa <handle_start_condition+0x32>
		uint8_t rw = handle->status == I2C_STATUS_RECEIVING ? 1 : 0;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	7c1b      	ldrb	r3, [r3, #16]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	bf0c      	ite	eq
 80008e0:	2301      	moveq	r3, #1
 80008e2:	2300      	movne	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	737b      	strb	r3, [r7, #13]
		handle->peripheral->DR = (handle->slave_address << 1) | rw;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	88db      	ldrh	r3, [r3, #6]
 80008ec:	005a      	lsls	r2, r3, #1
 80008ee:	7b7b      	ldrb	r3, [r7, #13]
 80008f0:	431a      	orrs	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	611a      	str	r2, [r3, #16]

		header |= (0b11 << 1) & bits_9_8;

		handle->peripheral->DR = header;
	}
}
 80008f8:	e011      	b.n	800091e <handle_start_condition+0x56>
		uint8_t header = 0xF0;
 80008fa:	23f0      	movs	r3, #240	; 0xf0
 80008fc:	73fb      	strb	r3, [r7, #15]
		uint8_t bits_9_8 = handle->slave_address >> 8;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	88db      	ldrh	r3, [r3, #6]
 8000902:	0a1b      	lsrs	r3, r3, #8
 8000904:	b29b      	uxth	r3, r3
 8000906:	73bb      	strb	r3, [r7, #14]
		header |= (0b11 << 1) & bits_9_8;
 8000908:	7bbb      	ldrb	r3, [r7, #14]
 800090a:	f003 0306 	and.w	r3, r3, #6
 800090e:	b2da      	uxtb	r2, r3
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	4313      	orrs	r3, r2
 8000914:	73fb      	strb	r3, [r7, #15]
		handle->peripheral->DR = header;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	7bfa      	ldrb	r2, [r7, #15]
 800091c:	611a      	str	r2, [r3, #16]
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <handle_transmitting>:

static void handle_transmitting(I2C_handle_type *handle) {
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]

	if (handle->peripheral->SR1 & 1u) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	2b00      	cmp	r3, #0
 800093e:	d003      	beq.n	8000948 <handle_transmitting+0x1e>
		//start condition
		handle_start_condition(handle);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ffc1 	bl	80008c8 <handle_start_condition>
 8000946:	e046      	b.n	80009d6 <handle_transmitting+0xac>

	} else if (handle->peripheral->SR1 & (1u << 3)) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f003 0308 	and.w	r3, r3, #8
 8000952:	2b00      	cmp	r3, #0
 8000954:	d006      	beq.n	8000964 <handle_transmitting+0x3a>
		//header sent, send rest of the address

		handle->peripheral->DR = handle->slave_address << 1;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	88db      	ldrh	r3, [r3, #6]
 800095a:	005a      	lsls	r2, r3, #1
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	611a      	str	r2, [r3, #16]
 8000962:	e038      	b.n	80009d6 <handle_transmitting+0xac>

	} else if (handle->peripheral->SR1 & 2u) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	2b00      	cmp	r3, #0
 8000970:	d003      	beq.n	800097a <handle_transmitting+0x50>
		//address sent
		(void) handle->peripheral->SR2;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	e02d      	b.n	80009d6 <handle_transmitting+0xac>

	} else if (handle->peripheral->SR1 & (1u << 7)) {
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000984:	2b00      	cmp	r3, #0
 8000986:	d026      	beq.n	80009d6 <handle_transmitting+0xac>
		//data register empty, write next frame to DR

		if (handle->data_len-- == 0) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	1e59      	subs	r1, r3, #1
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	60d1      	str	r1, [r2, #12]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d116      	bne.n	80009c4 <handle_transmitting+0x9a>
			//generate stop condition
			handle->peripheral->CR1 |= 1u << 9;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009a4:	601a      	str	r2, [r3, #0]

			handle->peripheral->CR1 &= ~1u;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f022 0201 	bic.w	r2, r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
			I2C_disable_IR(handle);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fe9a 	bl	80006f0 <I2C_disable_IR>
			handle->status = I2C_STATUS_IDLE;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	741a      	strb	r2, [r3, #16]

			return;
 80009c2:	e008      	b.n	80009d6 <handle_transmitting+0xac>

		}

		handle->peripheral->DR = *(handle->data++);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	1c59      	adds	r1, r3, #1
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	6091      	str	r1, [r2, #8]
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	611a      	str	r2, [r3, #16]


	}
}
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <handle_receiving>:

static void handle_receiving(I2C_handle_type *handle) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

	static uint8_t repeated_start = 0;

	if (handle->peripheral->SR1 & 1u) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d01d      	beq.n	8000a2e <handle_receiving+0x52>
		//start condition
		if (!repeated_start) {
 80009f2:	4b4b      	ldr	r3, [pc, #300]	; (8000b20 <handle_receiving+0x144>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d103      	bne.n	8000a02 <handle_receiving+0x26>
			handle_start_condition(handle);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ff64 	bl	80008c8 <handle_start_condition>
			handle->peripheral->CR1 &= ~1u;
			I2C_disable_IR(handle);

		}
	}
}
 8000a00:	e089      	b.n	8000b16 <handle_receiving+0x13a>
			uint8_t header = 0xF0;
 8000a02:	23f0      	movs	r3, #240	; 0xf0
 8000a04:	73fb      	strb	r3, [r7, #15]
			uint8_t bits_9_8 = handle->slave_address >> 8;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	88db      	ldrh	r3, [r3, #6]
 8000a0a:	0a1b      	lsrs	r3, r3, #8
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	73bb      	strb	r3, [r7, #14]
			header |= ((0b11 << 1) & bits_9_8) | 1u;
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	f003 0306 	and.w	r3, r3, #6
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
			handle->peripheral->DR = header;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	7bfa      	ldrb	r2, [r7, #15]
 8000a2a:	611a      	str	r2, [r3, #16]
}
 8000a2c:	e073      	b.n	8000b16 <handle_receiving+0x13a>
	} else if (handle->peripheral->SR1 & (1u << 3)) {
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d006      	beq.n	8000a4a <handle_receiving+0x6e>
		handle->peripheral->DR = handle->slave_address << 1;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	88db      	ldrh	r3, [r3, #6]
 8000a40:	005a      	lsls	r2, r3, #1
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	611a      	str	r2, [r3, #16]
}
 8000a48:	e065      	b.n	8000b16 <handle_receiving+0x13a>
	} else if (handle->peripheral->SR1 & 2u) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	f003 0302 	and.w	r3, r3, #2
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d023      	beq.n	8000aa0 <handle_receiving+0xc4>
		if (!repeated_start
 8000a58:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <handle_receiving+0x144>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10f      	bne.n	8000a80 <handle_receiving+0xa4>
				&& (handle->addressing_mode == I2C_10_BIT_ADDRESSING)) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	791b      	ldrb	r3, [r3, #4]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d10b      	bne.n	8000a80 <handle_receiving+0xa4>
			handle->peripheral->CR1 |= 1u << 8;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a76:	601a      	str	r2, [r3, #0]
			repeated_start = 1;
 8000a78:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <handle_receiving+0x144>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	e00b      	b.n	8000a98 <handle_receiving+0xbc>
		} else if (handle->data_len == 1) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d107      	bne.n	8000a98 <handle_receiving+0xbc>
			handle->peripheral->CR1 &= ~(1u << 10);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a96:	601a      	str	r2, [r3, #0]
		(void) handle->peripheral->SR2;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	699b      	ldr	r3, [r3, #24]
}
 8000a9e:	e03a      	b.n	8000b16 <handle_receiving+0x13a>
	} else if (handle->peripheral->SR1 & (1u << 6)) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d033      	beq.n	8000b16 <handle_receiving+0x13a>
		*(handle->data++) = handle->peripheral->DR;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	6918      	ldr	r0, [r3, #16]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	1c59      	adds	r1, r3, #1
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	6091      	str	r1, [r2, #8]
 8000abe:	b2c2      	uxtb	r2, r0
 8000ac0:	701a      	strb	r2, [r3, #0]
		if (--handle->data_len < 2) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	1e5a      	subs	r2, r3, #1
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d820      	bhi.n	8000b16 <handle_receiving+0x13a>
			handle->peripheral->CR1 &= ~(1u << 10);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ae2:	601a      	str	r2, [r3, #0]
			handle->peripheral->CR1 |= 1u << 9;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000af2:	601a      	str	r2, [r3, #0]
			repeated_start = 0;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <handle_receiving+0x144>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
			handle->status = I2C_STATUS_IDLE;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	741a      	strb	r2, [r3, #16]
			handle->peripheral->CR1 &= ~1u;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f022 0201 	bic.w	r2, r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
			I2C_disable_IR(handle);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fded 	bl	80006f0 <I2C_disable_IR>
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000080 	.word	0x20000080

08000b24 <I2C_handle_EV>:

void I2C_handle_EV(I2C_handle_type *handle) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

	if (handle->status == I2C_STATUS_TRANSMITTING) {
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7c1b      	ldrb	r3, [r3, #16]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d103      	bne.n	8000b3c <I2C_handle_EV+0x18>
		handle_transmitting(handle);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff fef8 	bl	800092a <handle_transmitting>

	} else if (handle->status == I2C_STATUS_RECEIVING) {
		handle_receiving(handle);
	}

}
 8000b3a:	e006      	b.n	8000b4a <I2C_handle_EV+0x26>
	} else if (handle->status == I2C_STATUS_RECEIVING) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7c1b      	ldrb	r3, [r3, #16]
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d102      	bne.n	8000b4a <I2C_handle_EV+0x26>
		handle_receiving(handle);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff49 	bl	80009dc <handle_receiving>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <I2C_handle_ER>:

uint8_t I2C_handle_ER(I2C_handle_type *handle) {
 8000b52:	b480      	push	{r7}
 8000b54:	b085      	sub	sp, #20
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	uint8_t error_code;

	if (handle->peripheral->SR1 & (1u << 8)) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <I2C_handle_ER+0x1c>
		error_code = 8;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	73fb      	strb	r3, [r7, #15]
 8000b6c:	e01c      	b.n	8000ba8 <I2C_handle_ER+0x56>
	} else if (handle->peripheral->SR1 & (1u << 10)) {
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <I2C_handle_ER+0x30>
		error_code = 10;
 8000b7c:	230a      	movs	r3, #10
 8000b7e:	73fb      	strb	r3, [r7, #15]
 8000b80:	e012      	b.n	8000ba8 <I2C_handle_ER+0x56>
	} else if (handle->peripheral->SR1 & (1u << 11)) {
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d002      	beq.n	8000b96 <I2C_handle_ER+0x44>
		error_code = 11;
 8000b90:	230b      	movs	r3, #11
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	e008      	b.n	8000ba8 <I2C_handle_ER+0x56>
	} else if (handle->peripheral->SR1 & (1u << 14)) {
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <I2C_handle_ER+0x56>
		error_code = 14;
 8000ba4:	230e      	movs	r3, #14
 8000ba6:	73fb      	strb	r3, [r7, #15]
	}

	handle->peripheral->CR1 &= ~1u;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f022 0201 	bic.w	r2, r2, #1
 8000bb6:	601a      	str	r2, [r3, #0]
	handle->status = I2C_STATUS_IDLE;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	741a      	strb	r2, [r3, #16]

	return error_code;
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]

}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <calculate_ISER_values>:
#include "NVIC_lib.h"
#include "stm32f4xx.h"

static void calculate_ISER_values(uint8_t IRQn, uint8_t *buf) {
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]

	uint8_t ISER_num = IRQn / 32;
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	73fb      	strb	r3, [r7, #15]
	uint8_t ISER_pos = IRQn % 32;
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 031f 	and.w	r3, r3, #31
 8000be4:	73bb      	strb	r3, [r7, #14]

	buf[0] = ISER_num;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	701a      	strb	r2, [r3, #0]
	buf[1] = ISER_pos;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	7bba      	ldrb	r2, [r7, #14]
 8000bf2:	701a      	strb	r2, [r3, #0]

}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <enable_IR>:

void enable_IR(uint8_t IRQn) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]

	uint8_t ISER_values[2];
	calculate_ISER_values(IRQn, ISER_values);
 8000c0a:	f107 020c 	add.w	r2, r7, #12
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ffda 	bl	8000bcc <calculate_ISER_values>

	NVIC->ISER[ISER_values[0]] |= 1u << ISER_values[1];
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <enable_IR+0x3c>)
 8000c1a:	7b3a      	ldrb	r2, [r7, #12]
 8000c1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c20:	7b7b      	ldrb	r3, [r7, #13]
 8000c22:	4619      	mov	r1, r3
 8000c24:	2301      	movs	r3, #1
 8000c26:	408b      	lsls	r3, r1
 8000c28:	4904      	ldr	r1, [pc, #16]	; (8000c3c <enable_IR+0x3c>)
 8000c2a:	7b38      	ldrb	r0, [r7, #12]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <disable_IR>:

void disable_IR(uint8_t IRQn) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	uint8_t ISER_values[2];
	calculate_ISER_values(IRQn, ISER_values);
 8000c4a:	f107 020c 	add.w	r2, r7, #12
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffba 	bl	8000bcc <calculate_ISER_values>

	NVIC->ISER[ISER_values[0]] &= ~(1u << ISER_values[1]);
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <disable_IR+0x3c>)
 8000c5a:	7b3a      	ldrb	r2, [r7, #12]
 8000c5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c60:	7b7b      	ldrb	r3, [r7, #13]
 8000c62:	4619      	mov	r1, r3
 8000c64:	2301      	movs	r3, #1
 8000c66:	408b      	lsls	r3, r1
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	4904      	ldr	r1, [pc, #16]	; (8000c7c <disable_IR+0x3c>)
 8000c6c:	7b38      	ldrb	r0, [r7, #12]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	f841 3020 	str.w	r3, [r1, r0, lsl #2]

}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	e000e100 	.word	0xe000e100

08000c80 <bcd2bin>:
	}

	return bcd;
}

static uint8_t bcd2bin(uint16_t bcd) {
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	80fb      	strh	r3, [r7, #6]

	uint8_t multiplier = 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	73fb      	strb	r3, [r7, #15]
	uint8_t bin = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	73bb      	strb	r3, [r7, #14]

	while (bcd) {
 8000c92:	e014      	b.n	8000cbe <bcd2bin+0x3e>
		bin += (bcd & 0xFu) * multiplier;
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f003 030f 	and.w	r3, r3, #15
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ca0:	fb12 f303 	smulbb	r3, r2, r3
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	7bbb      	ldrb	r3, [r7, #14]
 8000ca8:	4413      	add	r3, r2
 8000caa:	73bb      	strb	r3, [r7, #14]
		bcd >>= 4;
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	091b      	lsrs	r3, r3, #4
 8000cb0:	80fb      	strh	r3, [r7, #6]
		multiplier *= 10;
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	0092      	lsls	r2, r2, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
	while (bcd) {
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1e7      	bne.n	8000c94 <bcd2bin+0x14>
	}

	return bin;
 8000cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <get_date_time>:

	enable_write_protection();

}

date_time_type get_date_time() {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

	date_time_type date_time;

	date_time.time_format = (RTC->CR >> 6) & 1u;
 8000cdc:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <get_date_time+0xdc>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	099b      	lsrs	r3, r3, #6
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	74fb      	strb	r3, [r7, #19]
	date_time.am_pm = (RTC->TR >> 22) & 1u;
 8000cec:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <get_date_time+0xdc>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	0d9b      	lsrs	r3, r3, #22
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	753b      	strb	r3, [r7, #20]

	date_time.seconds = bcd2bin(RTC->TR & 0x7Fu);
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <get_date_time+0xdc>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ffb9 	bl	8000c80 <bcd2bin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	733b      	strb	r3, [r7, #12]
	date_time.minutes = bcd2bin((RTC->TR >> 8) & 0x7Fu);
 8000d12:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <get_date_time+0xdc>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	0a1b      	lsrs	r3, r3, #8
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ffad 	bl	8000c80 <bcd2bin>
 8000d26:	4603      	mov	r3, r0
 8000d28:	737b      	strb	r3, [r7, #13]
	date_time.hours = bcd2bin((RTC->TR >> 16) & 0x3Fu);
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <get_date_time+0xdc>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	0c1b      	lsrs	r3, r3, #16
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ffa1 	bl	8000c80 <bcd2bin>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	73bb      	strb	r3, [r7, #14]

	date_time.date = bcd2bin(RTC->DR & 0x3Fu);
 8000d42:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <get_date_time+0xdc>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff96 	bl	8000c80 <bcd2bin>
 8000d54:	4603      	mov	r3, r0
 8000d56:	73fb      	strb	r3, [r7, #15]
	date_time.month = bcd2bin((RTC->DR >> 8) & 0x1Fu);
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <get_date_time+0xdc>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	f003 031f 	and.w	r3, r3, #31
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff8a 	bl	8000c80 <bcd2bin>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	747b      	strb	r3, [r7, #17]
	date_time.year = bcd2bin((RTC->DR >> 16) & 0xFFu);
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <get_date_time+0xdc>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	0c1b      	lsrs	r3, r3, #16
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff7f 	bl	8000c80 <bcd2bin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	74bb      	strb	r3, [r7, #18]

	date_time.day = ((RTC->DR >> 13) & 0x7u);
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <get_date_time+0xdc>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	0b5b      	lsrs	r3, r3, #13
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	743b      	strb	r3, [r7, #16]

	return date_time;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	cb03      	ldmia	r3!, {r0, r1}
 8000da0:	6010      	str	r0, [r2, #0]
 8000da2:	6051      	str	r1, [r2, #4]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	7213      	strb	r3, [r2, #8]
}
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40002800 	.word	0x40002800

08000db4 <enable_uart_clock>:
 *      Author: toni
 */
#include "UART_lib.h"
#include "clocks_lib.h"

static void enable_uart_clock(USART_TypeDef* uart) {
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

	if (uart == USART2) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <enable_uart_clock+0x54>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d106      	bne.n	8000dd2 <enable_uart_clock+0x1e>
		RCC->APB1ENR |= 1u << 17;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <enable_uart_clock+0x58>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <enable_uart_clock+0x58>)
 8000dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dce:	6413      	str	r3, [r2, #64]	; 0x40
		RCC->APB2ENR |= 1u << 4;
	} else if (uart == USART6) {
		RCC->APB2ENR |= 1u << 5;
	}

}
 8000dd0:	e014      	b.n	8000dfc <enable_uart_clock+0x48>
	} else if (uart == USART1) {
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <enable_uart_clock+0x5c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d106      	bne.n	8000de8 <enable_uart_clock+0x34>
		RCC->APB2ENR |= 1u << 4;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <enable_uart_clock+0x58>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <enable_uart_clock+0x58>)
 8000de0:	f043 0310 	orr.w	r3, r3, #16
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000de6:	e009      	b.n	8000dfc <enable_uart_clock+0x48>
	} else if (uart == USART6) {
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <enable_uart_clock+0x60>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d105      	bne.n	8000dfc <enable_uart_clock+0x48>
		RCC->APB2ENR |= 1u << 5;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <enable_uart_clock+0x58>)
 8000df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df4:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <enable_uart_clock+0x58>)
 8000df6:	f043 0320 	orr.w	r3, r3, #32
 8000dfa:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	40004400 	.word	0x40004400
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40011000 	.word	0x40011000
 8000e14:	40011400 	.word	0x40011400

08000e18 <set_BRR>:

static void set_BRR(uint32_t baudrate, USART_TypeDef* uart) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
	uint32_t clk_speed;
	if (uart == USART2) {
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <set_BRR+0x34>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d103      	bne.n	8000e32 <set_BRR+0x1a>
		clk_speed = get_APB1_clock();
 8000e2a:	f000 fa05 	bl	8001238 <get_APB1_clock>
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	e002      	b.n	8000e38 <set_BRR+0x20>
	} else {
		clk_speed = get_APB2_clock();
 8000e32:	f000 fa0d 	bl	8001250 <get_APB2_clock>
 8000e36:	60f8      	str	r0, [r7, #12]
	}

	uart->BRR = clk_speed / baudrate;
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	609a      	str	r2, [r3, #8]
}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40004400 	.word	0x40004400

08000e50 <uart_init>:


void uart_init(USART_TypeDef* uart, uint8_t word_length, uint8_t stop_bits, uint32_t baudrate) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	72fb      	strb	r3, [r7, #11]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	72bb      	strb	r3, [r7, #10]
	enable_uart_clock(uart);
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f7ff ffa6 	bl	8000db4 <enable_uart_clock>

	uart_pins_init();
 8000e68:	f000 fe5a 	bl	8001b20 <uart_pins_init>

	//Enable the USART
	uart->CR1 |= 1u << 13;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	60da      	str	r2, [r3, #12]

	//Program the M bit in USART_CR1 to define the word length
	uart->CR1 |= word_length << 12;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	7afa      	ldrb	r2, [r7, #11]
 8000e7e:	0312      	lsls	r2, r2, #12
 8000e80:	431a      	orrs	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	60da      	str	r2, [r3, #12]

	//Program the number of stop bits in USART_CR2.
	uart->CR2 |= stop_bits << 12;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	7aba      	ldrb	r2, [r7, #10]
 8000e8c:	0312      	lsls	r2, r2, #12
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	611a      	str	r2, [r3, #16]

	//Select the desired baud rate using the baud rate register USART_BRR
	set_BRR(baudrate, uart);
 8000e94:	68f9      	ldr	r1, [r7, #12]
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffbe 	bl	8000e18 <set_BRR>

	//Set the RE bit USART_CR1. This enables the receiver which begins searching for a start bit.
	uart->CR1 |= 1u << 2;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	f043 0204 	orr.w	r2, r3, #4
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	60da      	str	r2, [r3, #12]

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <uart_transmit_data>:

void uart_transmit_data(USART_TypeDef* uart, uint8_t* data_buffer, uint32_t len) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]

	//Set the TE bit in USART_CR1 to send an idle frame as first transmission.
	uart->CR1 |= 1u << 3;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	f043 0208 	orr.w	r2, r3, #8
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	60da      	str	r2, [r3, #12]

	//Write the data to send in the USART_DR register (this clears the TXE bit). Repeat this
	//for each data to be transmitted in case of single buffer.
	for (int i = 0; i < len; i++) {
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	e010      	b.n	8000ef0 <uart_transmit_data+0x40>
		uart->DR = data_buffer[i];
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	605a      	str	r2, [r3, #4]

		while (!(uart->SR & (1u << 7)));
 8000edc:	bf00      	nop
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f9      	beq.n	8000ede <uart_transmit_data+0x2e>
	for (int i = 0; i < len; i++) {
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8ea      	bhi.n	8000ece <uart_transmit_data+0x1e>
	//After writing the last data into the USART_DR register, wait until TC=1. This indicates
	//that the transmission of the last frame is complete. This is required for instance when
	//the USART is disabled or enters the Halt mode to avoid corrupting the last
	//transmission.

	while(!(uart->SR & (1u << 6)));
 8000ef8:	bf00      	nop
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f9      	beq.n	8000efa <uart_transmit_data+0x4a>

	//disable transmission and clear TC bit
	uint32_t temp = uart->SR;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	613b      	str	r3, [r7, #16]
	uart->DR = 0;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
	(void) temp;
	uart->CR1 &= ~(1u << 3);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	f023 0208 	bic.w	r2, r3, #8
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	60da      	str	r2, [r3, #12]


}
 8000f1e:	bf00      	nop
 8000f20:	371c      	adds	r7, #28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <get_AHB_prescaler>:

static void select_clk_source(uint8_t clk_source) {
	RCC->CFGR |= clk_source;
}

static uint16_t get_AHB_prescaler() {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
	uint8_t bits = (15u << 4) & RCC->CFGR;
 8000f32:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <get_AHB_prescaler+0x94>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	f023 030f 	bic.w	r3, r3, #15
 8000f3c:	717b      	strb	r3, [r7, #5]
	uint16_t AHB_prescaler;

	if (!(bits & 8u)) {
 8000f3e:	797b      	ldrb	r3, [r7, #5]
 8000f40:	f003 0308 	and.w	r3, r3, #8
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <get_AHB_prescaler+0x20>
		return 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e032      	b.n	8000fb2 <get_AHB_prescaler+0x86>
	}

	switch (bits) {
 8000f4c:	797b      	ldrb	r3, [r7, #5]
 8000f4e:	3b08      	subs	r3, #8
 8000f50:	2b07      	cmp	r3, #7
 8000f52:	d82d      	bhi.n	8000fb0 <get_AHB_prescaler+0x84>
 8000f54:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <get_AHB_prescaler+0x30>)
 8000f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5a:	bf00      	nop
 8000f5c:	08000f7d 	.word	0x08000f7d
 8000f60:	08000f83 	.word	0x08000f83
 8000f64:	08000f89 	.word	0x08000f89
 8000f68:	08000f8f 	.word	0x08000f8f
 8000f6c:	08000f95 	.word	0x08000f95
 8000f70:	08000f9b 	.word	0x08000f9b
 8000f74:	08000fa1 	.word	0x08000fa1
 8000f78:	08000fa9 	.word	0x08000fa9
	case AHB_PRESCALER_2:
		AHB_prescaler = 2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	80fb      	strh	r3, [r7, #6]
		break;
 8000f80:	e016      	b.n	8000fb0 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_4:
		AHB_prescaler = 4;
 8000f82:	2304      	movs	r3, #4
 8000f84:	80fb      	strh	r3, [r7, #6]
		break;
 8000f86:	e013      	b.n	8000fb0 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_8:
		AHB_prescaler = 8;
 8000f88:	2308      	movs	r3, #8
 8000f8a:	80fb      	strh	r3, [r7, #6]
		break;
 8000f8c:	e010      	b.n	8000fb0 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_16:
		AHB_prescaler = 16;
 8000f8e:	2310      	movs	r3, #16
 8000f90:	80fb      	strh	r3, [r7, #6]
		break;
 8000f92:	e00d      	b.n	8000fb0 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_64:
		AHB_prescaler = 64;
 8000f94:	2340      	movs	r3, #64	; 0x40
 8000f96:	80fb      	strh	r3, [r7, #6]
		break;
 8000f98:	e00a      	b.n	8000fb0 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_128:
		AHB_prescaler = 128;
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	80fb      	strh	r3, [r7, #6]
		break;
 8000f9e:	e007      	b.n	8000fb0 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_256:
		AHB_prescaler = 256;
 8000fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa4:	80fb      	strh	r3, [r7, #6]
		break;
 8000fa6:	e003      	b.n	8000fb0 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_512:
		AHB_prescaler = 512;
 8000fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fac:	80fb      	strh	r3, [r7, #6]
		break;
 8000fae:	bf00      	nop
	}

	return AHB_prescaler;
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <get_PLLM>:



static uint8_t get_PLLM() {
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

	return RCC->PLLCFGR & 63u;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <get_PLLM+0x1c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fd2:	b2db      	uxtb	r3, r3
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <get_PLLN>:

static uint16_t get_PLLN() {
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

	return (RCC->PLLCFGR & (511u << 6)) >> 6;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <get_PLLN+0x1c>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	099b      	lsrs	r3, r3, #6
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ff4:	b29b      	uxth	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40023800 	.word	0x40023800

08001004 <get_PLLP>:

static uint8_t get_PLLP() {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
	uint8_t PLLP;

	switch ((RCC->PLLCFGR & (3u << 16)) >> 16) {
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <get_PLLP+0x54>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	0c1b      	lsrs	r3, r3, #16
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b03      	cmp	r3, #3
 8001016:	d817      	bhi.n	8001048 <get_PLLP+0x44>
 8001018:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <get_PLLP+0x1c>)
 800101a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101e:	bf00      	nop
 8001020:	08001031 	.word	0x08001031
 8001024:	08001037 	.word	0x08001037
 8001028:	0800103d 	.word	0x0800103d
 800102c:	08001043 	.word	0x08001043
	case PLLP_2:
		PLLP = 2;
 8001030:	2302      	movs	r3, #2
 8001032:	71fb      	strb	r3, [r7, #7]
		break;
 8001034:	e008      	b.n	8001048 <get_PLLP+0x44>
	case PLLP_4:
		PLLP = 4;
 8001036:	2304      	movs	r3, #4
 8001038:	71fb      	strb	r3, [r7, #7]
		break;
 800103a:	e005      	b.n	8001048 <get_PLLP+0x44>
	case PLLP_6:
		PLLP = 6;
 800103c:	2306      	movs	r3, #6
 800103e:	71fb      	strb	r3, [r7, #7]
		break;
 8001040:	e002      	b.n	8001048 <get_PLLP+0x44>
	case PLLP_8:
		PLLP = 8;
 8001042:	2308      	movs	r3, #8
 8001044:	71fb      	strb	r3, [r7, #7]
		break;
 8001046:	bf00      	nop
	}

	return PLLP;
 8001048:	79fb      	ldrb	r3, [r7, #7]
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800

0800105c <get_clk_value>:

static uint32_t get_clk_value(uint8_t clk_source) {
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	uint32_t clk_value;
	if (clk_source == HSI) {
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <get_clk_value+0x16>
		clk_value = 16000000;
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <get_clk_value+0x30>)
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e004      	b.n	800107c <get_clk_value+0x20>
	} else if (clk_source == HSE) {
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <get_clk_value+0x20>
		clk_value = 8000000;
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <get_clk_value+0x34>)
 800107a:	60fb      	str	r3, [r7, #12]
	}

	return clk_value;
 800107c:	68fb      	ldr	r3, [r7, #12]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	00f42400 	.word	0x00f42400
 8001090:	007a1200 	.word	0x007a1200

08001094 <calculate_PLL_clk>:

static uint32_t calculate_PLL_clk(uint32_t clk_value, uint8_t PLLM,
		uint16_t PLLN, uint8_t PLLP) {
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	4608      	mov	r0, r1
 800109e:	4611      	mov	r1, r2
 80010a0:	461a      	mov	r2, r3
 80010a2:	4603      	mov	r3, r0
 80010a4:	70fb      	strb	r3, [r7, #3]
 80010a6:	460b      	mov	r3, r1
 80010a8:	803b      	strh	r3, [r7, #0]
 80010aa:	4613      	mov	r3, r2
 80010ac:	70bb      	strb	r3, [r7, #2]

	return clk_value / PLLM * PLLN / PLLP;
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	883a      	ldrh	r2, [r7, #0]
 80010b8:	fb02 f203 	mul.w	r2, r2, r3
 80010bc:	78bb      	ldrb	r3, [r7, #2]
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <get_APB1_prescaler>:
	RCC->CFGR |= AHB_prescaler << 4;
	RCC->CFGR |= APB1_prescaler << 10;
	RCC->CFGR |= APB2_prescaler << 13;
}

uint8_t get_APB1_prescaler() {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
	uint8_t bits = ((7u << 10) & RCC->CFGR) >> 10;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <get_APB1_prescaler+0x68>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	0a9b      	lsrs	r3, r3, #10
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	71bb      	strb	r3, [r7, #6]
	uint8_t APB1_prescaler;

	if (!(bits & 4u)) {
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <get_APB1_prescaler+0x22>
		return 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e01b      	b.n	800112a <get_APB1_prescaler+0x5a>
	}

	switch (bits) {
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	3b04      	subs	r3, #4
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d816      	bhi.n	8001128 <get_APB1_prescaler+0x58>
 80010fa:	a201      	add	r2, pc, #4	; (adr r2, 8001100 <get_APB1_prescaler+0x30>)
 80010fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001100:	08001111 	.word	0x08001111
 8001104:	08001117 	.word	0x08001117
 8001108:	0800111d 	.word	0x0800111d
 800110c:	08001123 	.word	0x08001123
	case APBx_PRESCALER_2:
		APB1_prescaler = 2;
 8001110:	2302      	movs	r3, #2
 8001112:	71fb      	strb	r3, [r7, #7]
		break;
 8001114:	e008      	b.n	8001128 <get_APB1_prescaler+0x58>
	case APBx_PRESCALER_4:
		APB1_prescaler = 4;
 8001116:	2304      	movs	r3, #4
 8001118:	71fb      	strb	r3, [r7, #7]
		break;
 800111a:	e005      	b.n	8001128 <get_APB1_prescaler+0x58>
	case APBx_PRESCALER_8:
		APB1_prescaler = 8;
 800111c:	2308      	movs	r3, #8
 800111e:	71fb      	strb	r3, [r7, #7]
		break;
 8001120:	e002      	b.n	8001128 <get_APB1_prescaler+0x58>
	case APBx_PRESCALER_16:
		APB1_prescaler = 16;
 8001122:	2310      	movs	r3, #16
 8001124:	71fb      	strb	r3, [r7, #7]
		break;
 8001126:	bf00      	nop
	}

	return APB1_prescaler;
 8001128:	79fb      	ldrb	r3, [r7, #7]
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <get_APB2_prescaler>:

uint8_t get_APB2_prescaler() {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
	uint8_t bits = (7u << 13) & RCC->CFGR;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <get_APB2_prescaler+0x64>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2300      	movs	r3, #0
 8001148:	717b      	strb	r3, [r7, #5]
	uint16_t APB2_prescaler;

	if (!(bits & 4u)) {
 800114a:	797b      	ldrb	r3, [r7, #5]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <get_APB2_prescaler+0x1c>
		return 1;
 8001154:	2301      	movs	r3, #1
 8001156:	e01d      	b.n	8001194 <get_APB2_prescaler+0x58>
	}

	switch (bits) {
 8001158:	797b      	ldrb	r3, [r7, #5]
 800115a:	3b04      	subs	r3, #4
 800115c:	2b03      	cmp	r3, #3
 800115e:	d817      	bhi.n	8001190 <get_APB2_prescaler+0x54>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <get_APB2_prescaler+0x2c>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001179 	.word	0x08001179
 800116c:	0800117f 	.word	0x0800117f
 8001170:	08001185 	.word	0x08001185
 8001174:	0800118b 	.word	0x0800118b
	case APBx_PRESCALER_2:
		APB2_prescaler = 2;
 8001178:	2302      	movs	r3, #2
 800117a:	80fb      	strh	r3, [r7, #6]
		break;
 800117c:	e008      	b.n	8001190 <get_APB2_prescaler+0x54>
	case APBx_PRESCALER_4:
		APB2_prescaler = 4;
 800117e:	2304      	movs	r3, #4
 8001180:	80fb      	strh	r3, [r7, #6]
		break;
 8001182:	e005      	b.n	8001190 <get_APB2_prescaler+0x54>
	case APBx_PRESCALER_8:
		APB2_prescaler = 8;
 8001184:	2308      	movs	r3, #8
 8001186:	80fb      	strh	r3, [r7, #6]
		break;
 8001188:	e002      	b.n	8001190 <get_APB2_prescaler+0x54>
	case APBx_PRESCALER_16:
		APB2_prescaler = 16;
 800118a:	2310      	movs	r3, #16
 800118c:	80fb      	strh	r3, [r7, #6]
		break;
 800118e:	bf00      	nop
	}

	return APB2_prescaler;
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	b2db      	uxtb	r3, r3
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	40023800 	.word	0x40023800

080011a4 <get_SYSCLK>:

uint32_t get_SYSCLK() {
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0

	uint8_t clk_source = 3u & RCC->CFGR;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <get_SYSCLK+0x70>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	70fb      	strb	r3, [r7, #3]
	uint32_t clk_speed;

	if (clk_source == HSI || clk_source == HSE) {
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <get_SYSCLK+0x1e>
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d107      	bne.n	80011d2 <get_SYSCLK+0x2e>
		clk_speed = get_clk_value(clk_source);
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff49 	bl	800105c <get_clk_value>
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	bf00      	nop

		return calculate_PLL_clk(clk_speed, get_PLLM(), get_PLLN(), get_PLLP());

	}

	return clk_speed;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	e01b      	b.n	800120a <get_SYSCLK+0x66>
		if ((1u << 22) & RCC->PLLCFGR) {
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <get_SYSCLK+0x70>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d002      	beq.n	80011e4 <get_SYSCLK+0x40>
			clk_speed = 8000000;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <get_SYSCLK+0x74>)
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	e001      	b.n	80011e8 <get_SYSCLK+0x44>
			clk_speed = 16000000;
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <get_SYSCLK+0x78>)
 80011e6:	607b      	str	r3, [r7, #4]
		return calculate_PLL_clk(clk_speed, get_PLLM(), get_PLLN(), get_PLLP());
 80011e8:	f7ff feec 	bl	8000fc4 <get_PLLM>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461c      	mov	r4, r3
 80011f0:	f7ff fef8 	bl	8000fe4 <get_PLLN>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461d      	mov	r5, r3
 80011f8:	f7ff ff04 	bl	8001004 <get_PLLP>
 80011fc:	4603      	mov	r3, r0
 80011fe:	462a      	mov	r2, r5
 8001200:	4621      	mov	r1, r4
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ff46 	bl	8001094 <calculate_PLL_clk>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bdb0      	pop	{r4, r5, r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	007a1200 	.word	0x007a1200
 800121c:	00f42400 	.word	0x00f42400

08001220 <get_AHB_clock>:

uint32_t get_AHB_clock() {
 8001220:	b598      	push	{r3, r4, r7, lr}
 8001222:	af00      	add	r7, sp, #0

	return get_SYSCLK() / get_AHB_prescaler();
 8001224:	f7ff ffbe 	bl	80011a4 <get_SYSCLK>
 8001228:	4604      	mov	r4, r0
 800122a:	f7ff fe7f 	bl	8000f2c <get_AHB_prescaler>
 800122e:	4603      	mov	r3, r0
 8001230:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001234:	4618      	mov	r0, r3
 8001236:	bd98      	pop	{r3, r4, r7, pc}

08001238 <get_APB1_clock>:

uint32_t get_APB1_clock() {
 8001238:	b598      	push	{r3, r4, r7, lr}
 800123a:	af00      	add	r7, sp, #0

	return get_AHB_clock() / get_APB1_prescaler();
 800123c:	f7ff fff0 	bl	8001220 <get_AHB_clock>
 8001240:	4604      	mov	r4, r0
 8001242:	f7ff ff45 	bl	80010d0 <get_APB1_prescaler>
 8001246:	4603      	mov	r3, r0
 8001248:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800124c:	4618      	mov	r0, r3
 800124e:	bd98      	pop	{r3, r4, r7, pc}

08001250 <get_APB2_clock>:

uint32_t get_APB2_clock() {
 8001250:	b598      	push	{r3, r4, r7, lr}
 8001252:	af00      	add	r7, sp, #0

	return get_AHB_clock() / get_APB2_prescaler();
 8001254:	f7ff ffe4 	bl	8001220 <get_AHB_clock>
 8001258:	4604      	mov	r4, r0
 800125a:	f7ff ff6f 	bl	800113c <get_APB2_prescaler>
 800125e:	4603      	mov	r3, r0
 8001260:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001264:	4618      	mov	r0, r3
 8001266:	bd98      	pop	{r3, r4, r7, pc}

08001268 <enable_timer_clock>:
 *      Author: toni
 */
#include "delay_timer_lib.h"
#include "clocks_lib.h"

static void enable_timer_clock(TIM_TypeDef *timer) {
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	if (timer == TIM1) {
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a2e      	ldr	r2, [pc, #184]	; (800132c <enable_timer_clock+0xc4>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d106      	bne.n	8001286 <enable_timer_clock+0x1e>
		RCC->APB2ENR |= 1u;
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <enable_timer_clock+0xc8>)
 800127a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127c:	4a2c      	ldr	r2, [pc, #176]	; (8001330 <enable_timer_clock+0xc8>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6453      	str	r3, [r2, #68]	; 0x44
	} else if (timer == TIM10) {
		RCC->APB2ENR |= 1u << 17;
	} else if (timer == TIM11) {
		RCC->APB2ENR |= 1u << 18;
	}
}
 8001284:	e04b      	b.n	800131e <enable_timer_clock+0xb6>
	} else if (timer == TIM2) {
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800128c:	d106      	bne.n	800129c <enable_timer_clock+0x34>
		RCC->APB1ENR |= 1u;
 800128e:	4b28      	ldr	r3, [pc, #160]	; (8001330 <enable_timer_clock+0xc8>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a27      	ldr	r2, [pc, #156]	; (8001330 <enable_timer_clock+0xc8>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
}
 800129a:	e040      	b.n	800131e <enable_timer_clock+0xb6>
	} else if (timer == TIM3) {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a25      	ldr	r2, [pc, #148]	; (8001334 <enable_timer_clock+0xcc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d106      	bne.n	80012b2 <enable_timer_clock+0x4a>
		RCC->APB1ENR |= 2u;
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <enable_timer_clock+0xc8>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a21      	ldr	r2, [pc, #132]	; (8001330 <enable_timer_clock+0xc8>)
 80012aa:	f043 0302 	orr.w	r3, r3, #2
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012b0:	e035      	b.n	800131e <enable_timer_clock+0xb6>
	} else if (timer == TIM4) {
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a20      	ldr	r2, [pc, #128]	; (8001338 <enable_timer_clock+0xd0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d106      	bne.n	80012c8 <enable_timer_clock+0x60>
		RCC->APB1ENR |= 4u;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <enable_timer_clock+0xc8>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <enable_timer_clock+0xc8>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012c6:	e02a      	b.n	800131e <enable_timer_clock+0xb6>
	} else if (timer == TIM5) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a1c      	ldr	r2, [pc, #112]	; (800133c <enable_timer_clock+0xd4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d106      	bne.n	80012de <enable_timer_clock+0x76>
		RCC->APB1ENR |= 8u;
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <enable_timer_clock+0xc8>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	4a16      	ldr	r2, [pc, #88]	; (8001330 <enable_timer_clock+0xc8>)
 80012d6:	f043 0308 	orr.w	r3, r3, #8
 80012da:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012dc:	e01f      	b.n	800131e <enable_timer_clock+0xb6>
	} else if (timer == TIM9) {
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a17      	ldr	r2, [pc, #92]	; (8001340 <enable_timer_clock+0xd8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d106      	bne.n	80012f4 <enable_timer_clock+0x8c>
		RCC->APB2ENR |= 1u << 16;
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <enable_timer_clock+0xc8>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a11      	ldr	r2, [pc, #68]	; (8001330 <enable_timer_clock+0xc8>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
}
 80012f2:	e014      	b.n	800131e <enable_timer_clock+0xb6>
	} else if (timer == TIM10) {
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <enable_timer_clock+0xdc>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d106      	bne.n	800130a <enable_timer_clock+0xa2>
		RCC->APB2ENR |= 1u << 17;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <enable_timer_clock+0xc8>)
 80012fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <enable_timer_clock+0xc8>)
 8001302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001306:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001308:	e009      	b.n	800131e <enable_timer_clock+0xb6>
	} else if (timer == TIM11) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <enable_timer_clock+0xe0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d105      	bne.n	800131e <enable_timer_clock+0xb6>
		RCC->APB2ENR |= 1u << 18;
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <enable_timer_clock+0xc8>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a06      	ldr	r2, [pc, #24]	; (8001330 <enable_timer_clock+0xc8>)
 8001318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40010000 	.word	0x40010000
 8001330:	40023800 	.word	0x40023800
 8001334:	40000400 	.word	0x40000400
 8001338:	40000800 	.word	0x40000800
 800133c:	40000c00 	.word	0x40000c00
 8001340:	40014000 	.word	0x40014000
 8001344:	40014400 	.word	0x40014400
 8001348:	40014800 	.word	0x40014800

0800134c <get_timer_base_clock>:

static uint32_t get_timer_base_clock(TIM_TypeDef *timer) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	uint32_t clk_speed;
	uint8_t prescaler;

	if (timer == TIM2 || timer == TIM3 || timer == TIM4 || timer == TIM5) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800135a:	d00b      	beq.n	8001374 <get_timer_base_clock+0x28>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <get_timer_base_clock+0x5c>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d007      	beq.n	8001374 <get_timer_base_clock+0x28>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a11      	ldr	r2, [pc, #68]	; (80013ac <get_timer_base_clock+0x60>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d003      	beq.n	8001374 <get_timer_base_clock+0x28>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <get_timer_base_clock+0x64>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d107      	bne.n	8001384 <get_timer_base_clock+0x38>
		clk_speed = get_APB1_clock();
 8001374:	f7ff ff60 	bl	8001238 <get_APB1_clock>
 8001378:	60f8      	str	r0, [r7, #12]
		prescaler = get_APB1_prescaler();
 800137a:	f7ff fea9 	bl	80010d0 <get_APB1_prescaler>
 800137e:	4603      	mov	r3, r0
 8001380:	72fb      	strb	r3, [r7, #11]
 8001382:	e006      	b.n	8001392 <get_timer_base_clock+0x46>
	} else {
		clk_speed = get_APB2_clock();
 8001384:	f7ff ff64 	bl	8001250 <get_APB2_clock>
 8001388:	60f8      	str	r0, [r7, #12]
		prescaler = get_APB2_prescaler();
 800138a:	f7ff fed7 	bl	800113c <get_APB2_prescaler>
 800138e:	4603      	mov	r3, r0
 8001390:	72fb      	strb	r3, [r7, #11]
	}

	if (prescaler != 1) {
 8001392:	7afb      	ldrb	r3, [r7, #11]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d002      	beq.n	800139e <get_timer_base_clock+0x52>
		clk_speed *= 2;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
	}

	return clk_speed;
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40000400 	.word	0x40000400
 80013ac:	40000800 	.word	0x40000800
 80013b0:	40000c00 	.word	0x40000c00

080013b4 <get_timer_clock>:

static uint32_t get_timer_clock(TIM_TypeDef *timer) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

	uint16_t prescaler = timer->PSC;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	81fb      	strh	r3, [r7, #14]

	return get_timer_base_clock(timer) / (prescaler + 1);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffc2 	bl	800134c <get_timer_base_clock>
 80013c8:	4602      	mov	r2, r0
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	3301      	adds	r3, #1
 80013ce:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <init_timer>:

void init_timer(TIM_TypeDef *timer, uint16_t prescaler) {
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	460b      	mov	r3, r1
 80013e4:	807b      	strh	r3, [r7, #2]
	enable_timer_clock(timer);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ff3e 	bl	8001268 <enable_timer_clock>
	timer->PSC = prescaler - 1;
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	461a      	mov	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28

}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <delay>:

uint8_t delay(uint32_t ms, TIM_TypeDef *timer) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	uint32_t max = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]

	if (timer == TIM2 || timer == TIM5) {
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001414:	d003      	beq.n	800141e <delay+0x1e>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <delay+0xa0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d103      	bne.n	8001426 <delay+0x26>
		max--;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3b01      	subs	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e002      	b.n	800142c <delay+0x2c>
	} else {
		max = 65535;
 8001426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142a:	617b      	str	r3, [r7, #20]
	}

	uint32_t timer_clock = get_timer_clock(timer);
 800142c:	6838      	ldr	r0, [r7, #0]
 800142e:	f7ff ffc1 	bl	80013b4 <get_timer_clock>
 8001432:	6138      	str	r0, [r7, #16]
	uint8_t status = ms < (max / (timer_clock / 1000)) ? OK : OF_ERROR;
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <delay+0xa4>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	fbb2 f3f3 	udiv	r3, r2, r3
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	429a      	cmp	r2, r3
 8001448:	bf2c      	ite	cs
 800144a:	2301      	movcs	r3, #1
 800144c:	2300      	movcc	r3, #0
 800144e:	b2db      	uxtb	r3, r3
 8001450:	73fb      	strb	r3, [r7, #15]

	if (status == OK) {
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d11d      	bne.n	8001494 <delay+0x94>
		timer->ARR = ms * (timer_clock / 1000) - 1;
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <delay+0xa4>)
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	099b      	lsrs	r3, r3, #6
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	fb02 f303 	mul.w	r3, r2, r3
 8001468:	1e5a      	subs	r2, r3, #1
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	62da      	str	r2, [r3, #44]	; 0x2c
		timer->CR1 |= 1u;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	601a      	str	r2, [r3, #0]
		while (!(timer->SR & 1u));
 800147a:	bf00      	nop
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f9      	beq.n	800147c <delay+0x7c>
		timer->SR &= ~1u;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	f023 0201 	bic.w	r2, r3, #1
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	611a      	str	r2, [r3, #16]
	}


	return status;
 8001494:	7bfb      	ldrb	r3, [r7, #15]

}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40000c00 	.word	0x40000c00
 80014a4:	10624dd3 	.word	0x10624dd3

080014a8 <read_bit>:
uint16_t temperature_tmp;
uint16_t humidity_tmp;

uint8_t bits_read;

static void read_bit(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
	pin_state value = read_pin(&dht22);
 80014ae:	482b      	ldr	r0, [pc, #172]	; (800155c <read_bit+0xb4>)
 80014b0:	f7ff f89c 	bl	80005ec <read_pin>
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]

	if (bits_read == 32) {
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <read_bit+0xb8>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b20      	cmp	r3, #32
 80014be:	d119      	bne.n	80014f4 <read_bit+0x4c>

		disable_EXTI(10);
 80014c0:	200a      	movs	r0, #10
 80014c2:	f7fe ff7d 	bl	80003c0 <disable_EXTI>

		dht22_data.temperature = temperature_tmp;
 80014c6:	4b27      	ldr	r3, [pc, #156]	; (8001564 <read_bit+0xbc>)
 80014c8:	881a      	ldrh	r2, [r3, #0]
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <read_bit+0xc0>)
 80014cc:	801a      	strh	r2, [r3, #0]
		dht22_data.humidity = humidity_tmp;
 80014ce:	4b27      	ldr	r3, [pc, #156]	; (800156c <read_bit+0xc4>)
 80014d0:	881a      	ldrh	r2, [r3, #0]
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <read_bit+0xc0>)
 80014d4:	805a      	strh	r2, [r3, #2]

		temperature_tmp = 0;
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <read_bit+0xbc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	801a      	strh	r2, [r3, #0]
		humidity_tmp = 0;
 80014dc:	4b23      	ldr	r3, [pc, #140]	; (800156c <read_bit+0xc4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	801a      	strh	r2, [r3, #0]
		bits_read = -1;
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <read_bit+0xb8>)
 80014e4:	22ff      	movs	r2, #255	; 0xff
 80014e6:	701a      	strb	r2, [r3, #0]

		dht_status = SLEEPING;
 80014e8:	4b21      	ldr	r3, [pc, #132]	; (8001570 <read_bit+0xc8>)
 80014ea:	2203      	movs	r2, #3
 80014ec:	701a      	strb	r2, [r3, #0]
		dht22_application_callback();
 80014ee:	f000 faed 	bl	8001acc <dht22_application_callback>
 80014f2:	e028      	b.n	8001546 <read_bit+0x9e>

	} else if (bits_read < 16) {
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <read_bit+0xb8>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d810      	bhi.n	800151e <read_bit+0x76>

		humidity_tmp |= (value << (15 - bits_read));
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <read_bit+0xb8>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	f1c3 030f 	rsb	r3, r3, #15
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	b21a      	sxth	r2, r3
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <read_bit+0xc4>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21b      	sxth	r3, r3
 8001516:	b29a      	uxth	r2, r3
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <read_bit+0xc4>)
 800151a:	801a      	strh	r2, [r3, #0]
 800151c:	e013      	b.n	8001546 <read_bit+0x9e>

	} else if (bits_read < 32) {
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <read_bit+0xb8>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b1f      	cmp	r3, #31
 8001524:	d80f      	bhi.n	8001546 <read_bit+0x9e>

		temperature_tmp |= (value << (31 - bits_read));
 8001526:	79fa      	ldrb	r2, [r7, #7]
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <read_bit+0xb8>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	f1c3 031f 	rsb	r3, r3, #31
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	b21a      	sxth	r2, r3
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <read_bit+0xbc>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	b21b      	sxth	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b21b      	sxth	r3, r3
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <read_bit+0xbc>)
 8001544:	801a      	strh	r2, [r3, #0]

	}

	bits_read++;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <read_bit+0xb8>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <read_bit+0xb8>)
 8001550:	701a      	strb	r2, [r3, #0]

}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200000a4 	.word	0x200000a4
 8001560:	2000009d 	.word	0x2000009d
 8001564:	200000a0 	.word	0x200000a0
 8001568:	20000098 	.word	0x20000098
 800156c:	20000090 	.word	0x20000090
 8001570:	2000009e 	.word	0x2000009e

08001574 <dht22_handle_data_pin_IT>:

void dht22_handle_data_pin_IT() {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	IR_timer_micros(35);
 8001578:	2023      	movs	r0, #35	; 0x23
 800157a:	f000 fbaf 	bl	8001cdc <IR_timer_micros>

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <dht22_handle_delay_IT>:


void dht22_handle_delay_IT(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

	if (dht_status == INITIALIZING) {
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <dht22_handle_delay_IT+0x50>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d10c      	bne.n	80015aa <dht22_handle_delay_IT+0x26>

		dht_status = INITIALIZING_2;
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <dht22_handle_delay_IT+0x50>)
 8001592:	2202      	movs	r2, #2
 8001594:	701a      	strb	r2, [r3, #0]

		dht22.mode = INPUT;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <dht22_handle_delay_IT+0x54>)
 8001598:	2200      	movs	r2, #0
 800159a:	715a      	strb	r2, [r3, #5]
		change_mode(&dht22);
 800159c:	480e      	ldr	r0, [pc, #56]	; (80015d8 <dht22_handle_delay_IT+0x54>)
 800159e:	f7fe ffc3 	bl	8000528 <change_mode>

		IR_timer_micros(185);
 80015a2:	20b9      	movs	r0, #185	; 0xb9
 80015a4:	f000 fb9a 	bl	8001cdc <IR_timer_micros>

	} else if (dht_status == SENDING_DATA) {
		read_bit();
	}

}
 80015a8:	e012      	b.n	80015d0 <dht22_handle_delay_IT+0x4c>
	} else if (dht_status == INITIALIZING_2) {
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <dht22_handle_delay_IT+0x50>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d108      	bne.n	80015c4 <dht22_handle_delay_IT+0x40>
		dht_status = SENDING_DATA;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <dht22_handle_delay_IT+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
		enable_EXTI_GPIO(10, EXTI_GPIOA, EXTI_RE);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	200a      	movs	r0, #10
 80015be:	f7fe fe83 	bl	80002c8 <enable_EXTI_GPIO>
}
 80015c2:	e005      	b.n	80015d0 <dht22_handle_delay_IT+0x4c>
	} else if (dht_status == SENDING_DATA) {
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <dht22_handle_delay_IT+0x50>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <dht22_handle_delay_IT+0x4c>
		read_bit();
 80015cc:	f7ff ff6c 	bl	80014a8 <read_bit>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000009e 	.word	0x2000009e
 80015d8:	200000a4 	.word	0x200000a4

080015dc <SysTick_Handler>:
#include "UART_lib.h"
#include "stdio.h"
#include "lcd.h"
#include "RTC.h"

void SysTick_Handler() {
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <SysTick_Handler+0x14>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
	dht22_handle_delay_IT();
 80015e6:	f7ff ffcd 	bl	8001584 <dht22_handle_delay_IT>

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	e000e010 	.word	0xe000e010

080015f4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler() {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0

	dht22_handle_data_pin_IT();
 80015f8:	f7ff ffbc 	bl	8001574 <dht22_handle_data_pin_IT>
	EXTI->PR |= 1u << 10;
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <EXTI15_10_IRQHandler+0x18>)
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	4a02      	ldr	r2, [pc, #8]	; (800160c <EXTI15_10_IRQHandler+0x18>)
 8001602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001606:	6153      	str	r3, [r2, #20]

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40013c00 	.word	0x40013c00

08001610 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler() {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	I2C_handle_EV(&I2C_handle);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <I2C1_EV_IRQHandler+0x10>)
 8001616:	f7ff fa85 	bl	8000b24 <I2C_handle_EV>
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200000bc 	.word	0x200000bc

08001624 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler() {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
	uint8_t error_code = I2C_handle_ER(&I2C_handle);
 800162a:	4809      	ldr	r0, [pc, #36]	; (8001650 <I2C1_ER_IRQHandler+0x2c>)
 800162c:	f7ff fa91 	bl	8000b52 <I2C_handle_ER>
 8001630:	4603      	mov	r3, r0
 8001632:	71fb      	strb	r3, [r7, #7]
	char number[2];
	sprintf(number, "%d", error_code);
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4906      	ldr	r1, [pc, #24]	; (8001654 <I2C1_ER_IRQHandler+0x30>)
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fbb2 	bl	8001da4 <siprintf>

	uart_transmit_data(USART2, (uint8_t*) number, 2);
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2202      	movs	r2, #2
 8001644:	4619      	mov	r1, r3
 8001646:	4804      	ldr	r0, [pc, #16]	; (8001658 <I2C1_ER_IRQHandler+0x34>)
 8001648:	f7ff fc32 	bl	8000eb0 <uart_transmit_data>

	while(1);
 800164c:	e7fe      	b.n	800164c <I2C1_ER_IRQHandler+0x28>
 800164e:	bf00      	nop
 8001650:	200000bc 	.word	0x200000bc
 8001654:	08002634 	.word	0x08002634
 8001658:	40004400 	.word	0x40004400

0800165c <format_date_time>:
}


void format_date_time(char *buffer, date_time_type *date_time) {
 800165c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165e:	b08f      	sub	sp, #60	; 0x3c
 8001660:	af04      	add	r7, sp, #16
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
	char format[] = "%02d:%02d %02d/%02d/20%02d";
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <format_date_time+0x64>)
 8001668:	f107 040c 	add.w	r4, r7, #12
 800166c:	461d      	mov	r5, r3
 800166e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001672:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001676:	c403      	stmia	r4!, {r0, r1}
 8001678:	8022      	strh	r2, [r4, #0]
 800167a:	3402      	adds	r4, #2
 800167c:	0c13      	lsrs	r3, r2, #16
 800167e:	7023      	strb	r3, [r4, #0]
	sprintf(buffer, format, (int) date_time->hours, (int) date_time->minutes,
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	789b      	ldrb	r3, [r3, #2]
 8001684:	461d      	mov	r5, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	785b      	ldrb	r3, [r3, #1]
 800168a:	461e      	mov	r6, r3
			(int) date_time->seconds, (int) date_time->date,
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer, format, (int) date_time->hours, (int) date_time->minutes,
 8001690:	461a      	mov	r2, r3
			(int) date_time->seconds, (int) date_time->date,
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	78db      	ldrb	r3, [r3, #3]
	sprintf(buffer, format, (int) date_time->hours, (int) date_time->minutes,
 8001696:	4618      	mov	r0, r3
			(int) date_time->month, (int) date_time->year);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	795b      	ldrb	r3, [r3, #5]
	sprintf(buffer, format, (int) date_time->hours, (int) date_time->minutes,
 800169c:	461c      	mov	r4, r3
			(int) date_time->month, (int) date_time->year);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	799b      	ldrb	r3, [r3, #6]
	sprintf(buffer, format, (int) date_time->hours, (int) date_time->minutes,
 80016a2:	f107 010c 	add.w	r1, r7, #12
 80016a6:	9303      	str	r3, [sp, #12]
 80016a8:	9402      	str	r4, [sp, #8]
 80016aa:	9001      	str	r0, [sp, #4]
 80016ac:	9200      	str	r2, [sp, #0]
 80016ae:	4633      	mov	r3, r6
 80016b0:	462a      	mov	r2, r5
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fb76 	bl	8001da4 <siprintf>
}
 80016b8:	bf00      	nop
 80016ba:	372c      	adds	r7, #44	; 0x2c
 80016bc:	46bd      	mov	sp, r7
 80016be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c0:	08002638 	.word	0x08002638

080016c4 <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler() {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af02      	add	r7, sp, #8

	date_time_type date_time = get_date_time();
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fb00 	bl	8000cd4 <get_date_time>
	char date_time_str[16];
	format_date_time(date_time_str, &date_time);
 80016d4:	f107 0214 	add.w	r2, r7, #20
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffbd 	bl	800165c <format_date_time>
	LCD_write(&I2C_handle, date_time_str, 16, 1, 0);
 80016e2:	1d39      	adds	r1, r7, #4
 80016e4:	2300      	movs	r3, #0
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2301      	movs	r3, #1
 80016ea:	2210      	movs	r2, #16
 80016ec:	4803      	ldr	r0, [pc, #12]	; (80016fc <RTC_Alarm_IRQHandler+0x38>)
 80016ee:	f000 f975 	bl	80019dc <LCD_write>

}
 80016f2:	bf00      	nop
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200000bc 	.word	0x200000bc

08001700 <get_busy_flag>:
//2nd bit - RW
//3rd bit - E
//4th bit - background light
//5th-8th bit - data pins

static uint8_t get_busy_flag(I2C_handle_type *I2C_handle) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	uint8_t command = LCD_CONTROL_INSTRUCTION | 2u;
 8001708:	230e      	movs	r3, #14
 800170a:	73fb      	strb	r3, [r7, #15]
	I2C_handle->data = &command;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f107 020f 	add.w	r2, r7, #15
 8001712:	609a      	str	r2, [r3, #8]
	I2C_handle->data_len = 1;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	60da      	str	r2, [r3, #12]
	while (get_busy_flag(I2C_handle))
 800171a:	bf00      	nop
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ffef 	bl	8001700 <get_busy_flag>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f9      	bne.n	800171c <get_busy_flag+0x1c>
			;
	I2C_transmit_data_and_wait(I2C_handle);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff f885 	bl	8000838 <I2C_transmit_data_and_wait>

	uint8_t busy_flag = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	73bb      	strb	r3, [r7, #14]
	I2C_handle->data = &busy_flag;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f107 020e 	add.w	r2, r7, #14
 8001738:	609a      	str	r2, [r3, #8]
	I2C_handle->data_len = 1;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	60da      	str	r2, [r3, #12]
	while (get_busy_flag(I2C_handle))
 8001740:	bf00      	nop
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffdc 	bl	8001700 <get_busy_flag>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f9      	bne.n	8001742 <get_busy_flag+0x42>
			;
	I2C_receive_data_and_wait(I2C_handle);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff f8a4 	bl	800089c <I2C_receive_data_and_wait>

	busy_flag = (busy_flag >> 7) & 1u;
 8001754:	7bbb      	ldrb	r3, [r7, #14]
 8001756:	09db      	lsrs	r3, r3, #7
 8001758:	b2db      	uxtb	r3, r3
 800175a:	73bb      	strb	r3, [r7, #14]

	return busy_flag;
 800175c:	7bbb      	ldrb	r3, [r7, #14]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <send_data>:

static void send_data(I2C_handle_type *I2C_handle, uint8_t data,
		LCD_data_type data_type) {
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	70fb      	strb	r3, [r7, #3]
 8001772:	4613      	mov	r3, r2
 8001774:	70bb      	strb	r3, [r7, #2]
	uint8_t control_bits =
 8001776:	78bb      	ldrb	r3, [r7, #2]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <send_data+0x1a>
 800177c:	230d      	movs	r3, #13
 800177e:	e000      	b.n	8001782 <send_data+0x1c>
 8001780:	230c      	movs	r3, #12
 8001782:	75fb      	strb	r3, [r7, #23]
			data_type ? LCD_CONTROL_DATA : LCD_CONTROL_INSTRUCTION;
	uint8_t dataH = (data & 0xF0u) | control_bits;
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	f023 030f 	bic.w	r3, r3, #15
 800178a:	b2da      	uxtb	r2, r3
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	4313      	orrs	r3, r2
 8001790:	75bb      	strb	r3, [r7, #22]
	uint8_t dataL = ((data & 0xFu) << 4) | control_bits;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	b2da      	uxtb	r2, r3
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	4313      	orrs	r3, r2
 800179c:	757b      	strb	r3, [r7, #21]

	uint8_t I2C_dataH[2] = { dataH, dataH & ~(1u << 2) };
 800179e:	7dbb      	ldrb	r3, [r7, #22]
 80017a0:	743b      	strb	r3, [r7, #16]
 80017a2:	7dbb      	ldrb	r3, [r7, #22]
 80017a4:	f023 0304 	bic.w	r3, r3, #4
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	747b      	strb	r3, [r7, #17]
	I2C_handle->data = I2C_dataH;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f107 0210 	add.w	r2, r7, #16
 80017b2:	609a      	str	r2, [r3, #8]
	I2C_handle->data_len = 2;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	60da      	str	r2, [r3, #12]
	while (get_busy_flag(I2C_handle))
 80017ba:	bf00      	nop
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff9f 	bl	8001700 <get_busy_flag>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f9      	bne.n	80017bc <send_data+0x56>
		;
	I2C_transmit_data_and_wait(I2C_handle);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff f835 	bl	8000838 <I2C_transmit_data_and_wait>

	uint8_t I2C_dataL[2] = { dataL, dataL & ~(1u << 2) };
 80017ce:	7d7b      	ldrb	r3, [r7, #21]
 80017d0:	733b      	strb	r3, [r7, #12]
 80017d2:	7d7b      	ldrb	r3, [r7, #21]
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	737b      	strb	r3, [r7, #13]
	I2C_handle->data = I2C_dataL;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f107 020c 	add.w	r2, r7, #12
 80017e2:	609a      	str	r2, [r3, #8]
	I2C_handle->data_len = 2;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	60da      	str	r2, [r3, #12]
	while (get_busy_flag(I2C_handle))
 80017ea:	bf00      	nop
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff87 	bl	8001700 <get_busy_flag>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f9      	bne.n	80017ec <send_data+0x86>
		;
	I2C_transmit_data_and_wait(I2C_handle);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff f81d 	bl	8000838 <I2C_transmit_data_and_wait>
}
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <send_command>:

static void send_command(I2C_handle_type *I2C_handle, uint8_t command) {
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	460b      	mov	r3, r1
 8001810:	70fb      	strb	r3, [r7, #3]
	send_data(I2C_handle, command, instruction);
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	2200      	movs	r2, #0
 8001816:	4619      	mov	r1, r3
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ffa4 	bl	8001766 <send_data>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <send_char>:

static void send_char(I2C_handle_type *I2C_handle, char character) {
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	70fb      	strb	r3, [r7, #3]
	send_data(I2C_handle, (uint8_t) character, data);
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	2201      	movs	r2, #1
 8001836:	4619      	mov	r1, r3
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff94 	bl	8001766 <send_data>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <send_string>:

static void send_string(I2C_handle_type *I2C_handle, char* string, uint8_t len) {
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	4613      	mov	r3, r2
 8001852:	71fb      	strb	r3, [r7, #7]

	for (uint32_t i = 0;  i < len ; i++) {
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e00a      	b.n	8001870 <send_string+0x2a>
		send_char(I2C_handle, *(string++));
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	60ba      	str	r2, [r7, #8]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f7ff ffde 	bl	8001826 <send_char>
	for (uint32_t i = 0;  i < len ; i++) {
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	429a      	cmp	r2, r3
 8001876:	d3f0      	bcc.n	800185a <send_string+0x14>
	}
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <send_init_command>:

static void send_init_command(I2C_handle_type *I2C_handle, uint8_t command) {
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	70fb      	strb	r3, [r7, #3]
	command <<= 4;
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	70fb      	strb	r3, [r7, #3]
	command |= (1u << 2) | (1u << 3);
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	f043 030c 	orr.w	r3, r3, #12
 800189a:	70fb      	strb	r3, [r7, #3]

	uint8_t I2C_data[2] = { command, command & ~(1u << 2) };
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	733b      	strb	r3, [r7, #12]
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	f023 0304 	bic.w	r3, r3, #4
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	737b      	strb	r3, [r7, #13]
	I2C_handle->data = I2C_data;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f107 020c 	add.w	r2, r7, #12
 80018b0:	609a      	str	r2, [r3, #8]
	I2C_handle->data_len = 2;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2202      	movs	r2, #2
 80018b6:	60da      	str	r2, [r3, #12]
	while (get_busy_flag(I2C_handle))
 80018b8:	bf00      	nop
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ff20 	bl	8001700 <get_busy_flag>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f9      	bne.n	80018ba <send_init_command+0x38>
		;
	I2C_transmit_data_and_wait(I2C_handle);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7fe ffb6 	bl	8000838 <I2C_transmit_data_and_wait>
}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <send_commands>:

static void send_commands(I2C_handle_type *I2C_handle, uint8_t *commands,
		uint8_t len) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	4613      	mov	r3, r2
 80018e0:	71fb      	strb	r3, [r7, #7]

	while (get_busy_flag(I2C_handle))
 80018e2:	bf00      	nop
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f7ff ff0b 	bl	8001700 <get_busy_flag>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f9      	bne.n	80018e4 <send_commands+0x10>
		;
	for (uint32_t i = 0; i < len; i++) {
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	e011      	b.n	800191a <send_commands+0x46>
		send_command(I2C_handle, *(commands++));
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	60ba      	str	r2, [r7, #8]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	4619      	mov	r1, r3
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7ff ff80 	bl	8001806 <send_command>
		while (get_busy_flag(I2C_handle))
 8001906:	bf00      	nop
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f7ff fef9 	bl	8001700 <get_busy_flag>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f9      	bne.n	8001908 <send_commands+0x34>
	for (uint32_t i = 0; i < len; i++) {
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	429a      	cmp	r2, r3
 8001920:	d3e9      	bcc.n	80018f6 <send_commands+0x22>
			;
	}

}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <set_cursor>:

static void set_cursor(I2C_handle_type *I2C_handle, uint8_t row, uint8_t column) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
 8001938:	4613      	mov	r3, r2
 800193a:	70bb      	strb	r3, [r7, #2]
	uint8_t row_change = row ? 64 : 0;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <set_cursor+0x1a>
 8001942:	2340      	movs	r3, #64	; 0x40
 8001944:	e000      	b.n	8001948 <set_cursor+0x1c>
 8001946:	2300      	movs	r3, #0
 8001948:	73fb      	strb	r3, [r7, #15]

	send_command(I2C_handle, 0x80u + column + row_change);
 800194a:	78ba      	ldrb	r2, [r7, #2]
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	4413      	add	r3, r2
 8001950:	b2db      	uxtb	r3, r3
 8001952:	3b80      	subs	r3, #128	; 0x80
 8001954:	b2db      	uxtb	r3, r3
 8001956:	4619      	mov	r1, r3
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff54 	bl	8001806 <send_command>

}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <LCD_init>:

void LCD_init(I2C_handle_type *I2C_handle) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

	delay(15, TIM2);
 8001970:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001974:	200f      	movs	r0, #15
 8001976:	f7ff fd43 	bl	8001400 <delay>

	send_init_command(I2C_handle, 3u);
 800197a:	2103      	movs	r1, #3
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff80 	bl	8001882 <send_init_command>

	delay(5, TIM2);
 8001982:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001986:	2005      	movs	r0, #5
 8001988:	f7ff fd3a 	bl	8001400 <delay>

	send_init_command(I2C_handle, 3u);
 800198c:	2103      	movs	r1, #3
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff ff77 	bl	8001882 <send_init_command>

	delay(1, TIM2);
 8001994:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001998:	2001      	movs	r0, #1
 800199a:	f7ff fd31 	bl	8001400 <delay>

	send_init_command(I2C_handle, 3u);
 800199e:	2103      	movs	r1, #3
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff6e 	bl	8001882 <send_init_command>

	while (get_busy_flag(I2C_handle))
 80019a6:	bf00      	nop
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff fea9 	bl	8001700 <get_busy_flag>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f9      	bne.n	80019a8 <LCD_init+0x40>
		;

	send_init_command(I2C_handle, 2u);
 80019b4:	2102      	movs	r1, #2
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ff63 	bl	8001882 <send_init_command>

	uint8_t commands[4] = { 0x2Fu, 0x08u, 0x01u, 0x06u };
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <LCD_init+0x70>)
 80019be:	60fb      	str	r3, [r7, #12]
	send_commands(I2C_handle, commands, 4);
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	2204      	movs	r2, #4
 80019c6:	4619      	mov	r1, r3
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff83 	bl	80018d4 <send_commands>

}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	0601082f 	.word	0x0601082f

080019dc <LCD_write>:

void LCD_write(I2C_handle_type *I2C_handle, char *text, uint8_t len,  uint8_t row, uint8_t column) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	4611      	mov	r1, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	460b      	mov	r3, r1
 80019ec:	71fb      	strb	r3, [r7, #7]
 80019ee:	4613      	mov	r3, r2
 80019f0:	71bb      	strb	r3, [r7, #6]

	set_cursor(I2C_handle, row, column);
 80019f2:	7e3a      	ldrb	r2, [r7, #24]
 80019f4:	79bb      	ldrb	r3, [r7, #6]
 80019f6:	4619      	mov	r1, r3
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f7ff ff97 	bl	800192c <set_cursor>

	send_string(I2C_handle, text, len);
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	461a      	mov	r2, r3
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f7ff ff1e 	bl	8001846 <send_string>
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <int2string>:
#include "RTC.h"
#include "lcd.h"
#include "math.h"
#include <stdio.h>

void int2string(uint16_t num, char *buffer) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	80fb      	strh	r3, [r7, #6]

	sprintf(buffer, "%d", num);
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4903      	ldr	r1, [pc, #12]	; (8001a34 <int2string+0x20>)
 8001a26:	6838      	ldr	r0, [r7, #0]
 8001a28:	f000 f9bc 	bl	8001da4 <siprintf>

}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	08002654 	.word	0x08002654

08001a38 <format_dht22_values>:

void format_dht22_values(char *buffer, uint16_t value) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
	uint8_t decimal = value % 10;
 8001a44:	887a      	ldrh	r2, [r7, #2]
 8001a46:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <format_dht22_values+0x8c>)
 8001a48:	fba3 1302 	umull	r1, r3, r3, r2
 8001a4c:	08d9      	lsrs	r1, r3, #3
 8001a4e:	460b      	mov	r3, r1
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	73fb      	strb	r3, [r7, #15]
	uint8_t integer = value / 10;
 8001a5c:	887b      	ldrh	r3, [r7, #2]
 8001a5e:	4a19      	ldr	r2, [pc, #100]	; (8001ac4 <format_dht22_values+0x8c>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	73bb      	strb	r3, [r7, #14]

	char integer_str[2];
	int2string(integer, integer_str);
 8001a6a:	7bbb      	ldrb	r3, [r7, #14]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f107 020c 	add.w	r2, r7, #12
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ffcd 	bl	8001a14 <int2string>

	char decimal_str[1];
	int2string(decimal, decimal_str);
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	f107 0208 	add.w	r2, r7, #8
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ffc5 	bl	8001a14 <int2string>

	buffer = strcat(strcat(integer_str, ","), decimal_str);
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fba6 	bl	80001e0 <strlen>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	4413      	add	r3, r2
 8001a9e:	490a      	ldr	r1, [pc, #40]	; (8001ac8 <format_dht22_values+0x90>)
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	8013      	strh	r3, [r2, #0]
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	f107 0208 	add.w	r2, r7, #8
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f996 	bl	8001de4 <strcat>
 8001ab8:	6078      	str	r0, [r7, #4]
}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	cccccccd 	.word	0xcccccccd
 8001ac8:	08002658 	.word	0x08002658

08001acc <dht22_application_callback>:

void dht22_application_callback() {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af02      	add	r7, sp, #8

	char temp[4];
	char humidity[4];
	format_dht22_values(temp, dht22_data.temperature);
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <dht22_application_callback+0x4c>)
 8001ad4:	881a      	ldrh	r2, [r3, #0]
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ffac 	bl	8001a38 <format_dht22_values>
	format_dht22_values(humidity, dht22_data.humidity);
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <dht22_application_callback+0x4c>)
 8001ae2:	885a      	ldrh	r2, [r3, #2]
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ffa5 	bl	8001a38 <format_dht22_values>

	LCD_write(&I2C_handle, temp, 4, 0, 0);
 8001aee:	1d39      	adds	r1, r7, #4
 8001af0:	2300      	movs	r3, #0
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2300      	movs	r3, #0
 8001af6:	2204      	movs	r2, #4
 8001af8:	4808      	ldr	r0, [pc, #32]	; (8001b1c <dht22_application_callback+0x50>)
 8001afa:	f7ff ff6f 	bl	80019dc <LCD_write>
	LCD_write(&I2C_handle, humidity, 4, 0, 5);
 8001afe:	4639      	mov	r1, r7
 8001b00:	2305      	movs	r3, #5
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2300      	movs	r3, #0
 8001b06:	2204      	movs	r2, #4
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <dht22_application_callback+0x50>)
 8001b0a:	f7ff ff67 	bl	80019dc <LCD_write>

}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000098 	.word	0x20000098
 8001b1c:	200000bc 	.word	0x200000bc

08001b20 <uart_pins_init>:

void uart_pins_init() {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
//pins PA2 and PA3
	pin_type uartTX, uartRX;
	uartTX.AF_num = 7;
 8001b26:	2307      	movs	r3, #7
 8001b28:	753b      	strb	r3, [r7, #20]
	uartTX.PP_OD = PP;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	74bb      	strb	r3, [r7, #18]
	uartTX.gpio = GPIOA;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <uart_pins_init+0x48>)
 8001b30:	60fb      	str	r3, [r7, #12]
	uartTX.mode = ALTERNATE_FUNCTION;
 8001b32:	2302      	movs	r3, #2
 8001b34:	747b      	strb	r3, [r7, #17]
	uartTX.pin_num = 2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	743b      	strb	r3, [r7, #16]
	uartTX.push_pull = NO_PULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	74fb      	strb	r3, [r7, #19]

	uartRX = uartTX;
 8001b3e:	463b      	mov	r3, r7
 8001b40:	f107 020c 	add.w	r2, r7, #12
 8001b44:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uartRX.pin_num = 3;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	713b      	strb	r3, [r7, #4]

	init_pin(&uartTX);
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fcba 	bl	80004cc <init_pin>
	init_pin(&uartRX);
 8001b58:	463b      	mov	r3, r7
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fcb6 	bl	80004cc <init_pin>

}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40020000 	.word	0x40020000

08001b6c <I2C_pins_init>:

void I2C_pins_init() {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
	pin_type SCL, SDA;
	SCL.AF_num = 4;
 8001b72:	2304      	movs	r3, #4
 8001b74:	753b      	strb	r3, [r7, #20]
	SCL.PP_OD = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	74bb      	strb	r3, [r7, #18]
	SCL.push_pull = PULL_UP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	74fb      	strb	r3, [r7, #19]
	SCL.gpio = GPIOB;
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <I2C_pins_init+0x48>)
 8001b80:	60fb      	str	r3, [r7, #12]
	SCL.mode = ALTERNATE_FUNCTION;
 8001b82:	2302      	movs	r3, #2
 8001b84:	747b      	strb	r3, [r7, #17]
	SCL.pin_num = 6;
 8001b86:	2306      	movs	r3, #6
 8001b88:	743b      	strb	r3, [r7, #16]

	SDA = SCL;
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	f107 020c 	add.w	r2, r7, #12
 8001b90:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	SDA.pin_num = 7;
 8001b96:	2307      	movs	r3, #7
 8001b98:	713b      	strb	r3, [r7, #4]

	init_pin(&SCL);
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fc94 	bl	80004cc <init_pin>
	init_pin(&SDA);
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fc90 	bl	80004cc <init_pin>

}
 8001bac:	bf00      	nop
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40020400 	.word	0x40020400

08001bb8 <main>:
		handle->data_len = 1;

	}
}

int main(void) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	uart_init(USART2, UART_8BIT, UART_1_STOP_BITS, 115200);
 8001bbc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <main+0x3c>)
 8001bc6:	f7ff f943 	bl	8000e50 <uart_init>

	I2C_handle.peripheral = I2C1;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <main+0x40>)
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <main+0x44>)
 8001bce:	601a      	str	r2, [r3, #0]
	I2C_handle.addressing_mode = I2C_7_BIT_ADDRESSING;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <main+0x40>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	711a      	strb	r2, [r3, #4]
	I2C_handle.slave_address = 0x27;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <main+0x40>)
 8001bd8:	2227      	movs	r2, #39	; 0x27
 8001bda:	80da      	strh	r2, [r3, #6]
	I2C_init(&I2C_handle);
 8001bdc:	4806      	ldr	r0, [pc, #24]	; (8001bf8 <main+0x40>)
 8001bde:	f7fe fdb9 	bl	8000754 <I2C_init>

	init_timer(TIM2, 2);
 8001be2:	2102      	movs	r1, #2
 8001be4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001be8:	f7ff fbf7 	bl	80013da <init_timer>

	LCD_init(&I2C_handle);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <main+0x40>)
 8001bee:	f7ff febb 	bl	8001968 <LCD_init>

	while (1) {
 8001bf2:	e7fe      	b.n	8001bf2 <main+0x3a>
 8001bf4:	40004400 	.word	0x40004400
 8001bf8:	200000bc 	.word	0x200000bc
 8001bfc:	40005400 	.word	0x40005400

08001c00 <_sbrk>:
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <_sbrk+0x5c>)
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <_sbrk+0x60>)
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <_sbrk+0x22>
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <_sbrk+0x64>)
 8001c1e:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <_sbrk+0x68>)
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d207      	bcs.n	8001c40 <_sbrk+0x40>
 8001c30:	f000 f88e 	bl	8001d50 <__errno>
 8001c34:	4603      	mov	r3, r0
 8001c36:	220c      	movs	r2, #12
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c3e:	e009      	b.n	8001c54 <_sbrk+0x54>
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <_sbrk+0x64>)
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20018000 	.word	0x20018000
 8001c60:	00000400 	.word	0x00000400
 8001c64:	20000084 	.word	0x20000084
 8001c68:	200000f0 	.word	0x200000f0

08001c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <SystemInit+0x20>)
 8001c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <SystemInit+0x20>)
 8001c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <timer>:
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <timer+0x48>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <timer+0x48>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <timer+0x48>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <timer+0x48>)
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6839      	ldr	r1, [r7, #0]
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <timer+0x48>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <timer+0x48>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <timer+0x48>)
 8001cc6:	f043 0307 	orr.w	r3, r3, #7
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e010 	.word	0xe000e010

08001cdc <IR_timer_micros>:
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <IR_timer_micros+0x1c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffd0 	bl	8001c90 <timer>
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	2000009c 	.word	0x2000009c

08001cfc <Reset_Handler>:
 8001cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d34 <LoopFillZerobss+0x12>
 8001d00:	480d      	ldr	r0, [pc, #52]	; (8001d38 <LoopFillZerobss+0x16>)
 8001d02:	490e      	ldr	r1, [pc, #56]	; (8001d3c <LoopFillZerobss+0x1a>)
 8001d04:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <LoopFillZerobss+0x1e>)
 8001d06:	2300      	movs	r3, #0
 8001d08:	e002      	b.n	8001d10 <LoopCopyDataInit>

08001d0a <CopyDataInit>:
 8001d0a:	58d4      	ldr	r4, [r2, r3]
 8001d0c:	50c4      	str	r4, [r0, r3]
 8001d0e:	3304      	adds	r3, #4

08001d10 <LoopCopyDataInit>:
 8001d10:	18c4      	adds	r4, r0, r3
 8001d12:	428c      	cmp	r4, r1
 8001d14:	d3f9      	bcc.n	8001d0a <CopyDataInit>
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <LoopFillZerobss+0x22>)
 8001d18:	4c0b      	ldr	r4, [pc, #44]	; (8001d48 <LoopFillZerobss+0x26>)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e001      	b.n	8001d22 <LoopFillZerobss>

08001d1e <FillZerobss>:
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	3204      	adds	r2, #4

08001d22 <LoopFillZerobss>:
 8001d22:	42a2      	cmp	r2, r4
 8001d24:	d3fb      	bcc.n	8001d1e <FillZerobss>
 8001d26:	f7ff ffa1 	bl	8001c6c <SystemInit>
 8001d2a:	f000 f817 	bl	8001d5c <__libc_init_array>
 8001d2e:	f7ff ff43 	bl	8001bb8 <main>
 8001d32:	4770      	bx	lr
 8001d34:	20018000 	.word	0x20018000
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000064 	.word	0x20000064
 8001d40:	080026f8 	.word	0x080026f8
 8001d44:	20000064 	.word	0x20000064
 8001d48:	200000ec 	.word	0x200000ec

08001d4c <ADC_IRQHandler>:
 8001d4c:	e7fe      	b.n	8001d4c <ADC_IRQHandler>
	...

08001d50 <__errno>:
 8001d50:	4b01      	ldr	r3, [pc, #4]	; (8001d58 <__errno+0x8>)
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000000 	.word	0x20000000

08001d5c <__libc_init_array>:
 8001d5c:	b570      	push	{r4, r5, r6, lr}
 8001d5e:	4d0d      	ldr	r5, [pc, #52]	; (8001d94 <__libc_init_array+0x38>)
 8001d60:	4c0d      	ldr	r4, [pc, #52]	; (8001d98 <__libc_init_array+0x3c>)
 8001d62:	1b64      	subs	r4, r4, r5
 8001d64:	10a4      	asrs	r4, r4, #2
 8001d66:	2600      	movs	r6, #0
 8001d68:	42a6      	cmp	r6, r4
 8001d6a:	d109      	bne.n	8001d80 <__libc_init_array+0x24>
 8001d6c:	4d0b      	ldr	r5, [pc, #44]	; (8001d9c <__libc_init_array+0x40>)
 8001d6e:	4c0c      	ldr	r4, [pc, #48]	; (8001da0 <__libc_init_array+0x44>)
 8001d70:	f000 fc54 	bl	800261c <_init>
 8001d74:	1b64      	subs	r4, r4, r5
 8001d76:	10a4      	asrs	r4, r4, #2
 8001d78:	2600      	movs	r6, #0
 8001d7a:	42a6      	cmp	r6, r4
 8001d7c:	d105      	bne.n	8001d8a <__libc_init_array+0x2e>
 8001d7e:	bd70      	pop	{r4, r5, r6, pc}
 8001d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d84:	4798      	blx	r3
 8001d86:	3601      	adds	r6, #1
 8001d88:	e7ee      	b.n	8001d68 <__libc_init_array+0xc>
 8001d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d8e:	4798      	blx	r3
 8001d90:	3601      	adds	r6, #1
 8001d92:	e7f2      	b.n	8001d7a <__libc_init_array+0x1e>
 8001d94:	080026f0 	.word	0x080026f0
 8001d98:	080026f0 	.word	0x080026f0
 8001d9c:	080026f0 	.word	0x080026f0
 8001da0:	080026f4 	.word	0x080026f4

08001da4 <siprintf>:
 8001da4:	b40e      	push	{r1, r2, r3}
 8001da6:	b500      	push	{lr}
 8001da8:	b09c      	sub	sp, #112	; 0x70
 8001daa:	ab1d      	add	r3, sp, #116	; 0x74
 8001dac:	9002      	str	r0, [sp, #8]
 8001dae:	9006      	str	r0, [sp, #24]
 8001db0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001db4:	4809      	ldr	r0, [pc, #36]	; (8001ddc <siprintf+0x38>)
 8001db6:	9107      	str	r1, [sp, #28]
 8001db8:	9104      	str	r1, [sp, #16]
 8001dba:	4909      	ldr	r1, [pc, #36]	; (8001de0 <siprintf+0x3c>)
 8001dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8001dc0:	9105      	str	r1, [sp, #20]
 8001dc2:	6800      	ldr	r0, [r0, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	a902      	add	r1, sp, #8
 8001dc8:	f000 f876 	bl	8001eb8 <_svfiprintf_r>
 8001dcc:	9b02      	ldr	r3, [sp, #8]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	b01c      	add	sp, #112	; 0x70
 8001dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001dd8:	b003      	add	sp, #12
 8001dda:	4770      	bx	lr
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	ffff0208 	.word	0xffff0208

08001de4 <strcat>:
 8001de4:	b510      	push	{r4, lr}
 8001de6:	4602      	mov	r2, r0
 8001de8:	7814      	ldrb	r4, [r2, #0]
 8001dea:	4613      	mov	r3, r2
 8001dec:	3201      	adds	r2, #1
 8001dee:	2c00      	cmp	r4, #0
 8001df0:	d1fa      	bne.n	8001de8 <strcat+0x4>
 8001df2:	3b01      	subs	r3, #1
 8001df4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001df8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001dfc:	2a00      	cmp	r2, #0
 8001dfe:	d1f9      	bne.n	8001df4 <strcat+0x10>
 8001e00:	bd10      	pop	{r4, pc}

08001e02 <__ssputs_r>:
 8001e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e06:	688e      	ldr	r6, [r1, #8]
 8001e08:	429e      	cmp	r6, r3
 8001e0a:	4682      	mov	sl, r0
 8001e0c:	460c      	mov	r4, r1
 8001e0e:	4690      	mov	r8, r2
 8001e10:	461f      	mov	r7, r3
 8001e12:	d838      	bhi.n	8001e86 <__ssputs_r+0x84>
 8001e14:	898a      	ldrh	r2, [r1, #12]
 8001e16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e1a:	d032      	beq.n	8001e82 <__ssputs_r+0x80>
 8001e1c:	6825      	ldr	r5, [r4, #0]
 8001e1e:	6909      	ldr	r1, [r1, #16]
 8001e20:	eba5 0901 	sub.w	r9, r5, r1
 8001e24:	6965      	ldr	r5, [r4, #20]
 8001e26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e2e:	3301      	adds	r3, #1
 8001e30:	444b      	add	r3, r9
 8001e32:	106d      	asrs	r5, r5, #1
 8001e34:	429d      	cmp	r5, r3
 8001e36:	bf38      	it	cc
 8001e38:	461d      	movcc	r5, r3
 8001e3a:	0553      	lsls	r3, r2, #21
 8001e3c:	d531      	bpl.n	8001ea2 <__ssputs_r+0xa0>
 8001e3e:	4629      	mov	r1, r5
 8001e40:	f000 fb46 	bl	80024d0 <_malloc_r>
 8001e44:	4606      	mov	r6, r0
 8001e46:	b950      	cbnz	r0, 8001e5e <__ssputs_r+0x5c>
 8001e48:	230c      	movs	r3, #12
 8001e4a:	f8ca 3000 	str.w	r3, [sl]
 8001e4e:	89a3      	ldrh	r3, [r4, #12]
 8001e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e54:	81a3      	strh	r3, [r4, #12]
 8001e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e5e:	6921      	ldr	r1, [r4, #16]
 8001e60:	464a      	mov	r2, r9
 8001e62:	f000 fabd 	bl	80023e0 <memcpy>
 8001e66:	89a3      	ldrh	r3, [r4, #12]
 8001e68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e70:	81a3      	strh	r3, [r4, #12]
 8001e72:	6126      	str	r6, [r4, #16]
 8001e74:	6165      	str	r5, [r4, #20]
 8001e76:	444e      	add	r6, r9
 8001e78:	eba5 0509 	sub.w	r5, r5, r9
 8001e7c:	6026      	str	r6, [r4, #0]
 8001e7e:	60a5      	str	r5, [r4, #8]
 8001e80:	463e      	mov	r6, r7
 8001e82:	42be      	cmp	r6, r7
 8001e84:	d900      	bls.n	8001e88 <__ssputs_r+0x86>
 8001e86:	463e      	mov	r6, r7
 8001e88:	4632      	mov	r2, r6
 8001e8a:	6820      	ldr	r0, [r4, #0]
 8001e8c:	4641      	mov	r1, r8
 8001e8e:	f000 fab5 	bl	80023fc <memmove>
 8001e92:	68a3      	ldr	r3, [r4, #8]
 8001e94:	6822      	ldr	r2, [r4, #0]
 8001e96:	1b9b      	subs	r3, r3, r6
 8001e98:	4432      	add	r2, r6
 8001e9a:	60a3      	str	r3, [r4, #8]
 8001e9c:	6022      	str	r2, [r4, #0]
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	e7db      	b.n	8001e5a <__ssputs_r+0x58>
 8001ea2:	462a      	mov	r2, r5
 8001ea4:	f000 fb6e 	bl	8002584 <_realloc_r>
 8001ea8:	4606      	mov	r6, r0
 8001eaa:	2800      	cmp	r0, #0
 8001eac:	d1e1      	bne.n	8001e72 <__ssputs_r+0x70>
 8001eae:	6921      	ldr	r1, [r4, #16]
 8001eb0:	4650      	mov	r0, sl
 8001eb2:	f000 fabd 	bl	8002430 <_free_r>
 8001eb6:	e7c7      	b.n	8001e48 <__ssputs_r+0x46>

08001eb8 <_svfiprintf_r>:
 8001eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	898b      	ldrh	r3, [r1, #12]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	b09d      	sub	sp, #116	; 0x74
 8001ec4:	4607      	mov	r7, r0
 8001ec6:	460d      	mov	r5, r1
 8001ec8:	4614      	mov	r4, r2
 8001eca:	d50e      	bpl.n	8001eea <_svfiprintf_r+0x32>
 8001ecc:	690b      	ldr	r3, [r1, #16]
 8001ece:	b963      	cbnz	r3, 8001eea <_svfiprintf_r+0x32>
 8001ed0:	2140      	movs	r1, #64	; 0x40
 8001ed2:	f000 fafd 	bl	80024d0 <_malloc_r>
 8001ed6:	6028      	str	r0, [r5, #0]
 8001ed8:	6128      	str	r0, [r5, #16]
 8001eda:	b920      	cbnz	r0, 8001ee6 <_svfiprintf_r+0x2e>
 8001edc:	230c      	movs	r3, #12
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ee4:	e0d1      	b.n	800208a <_svfiprintf_r+0x1d2>
 8001ee6:	2340      	movs	r3, #64	; 0x40
 8001ee8:	616b      	str	r3, [r5, #20]
 8001eea:	2300      	movs	r3, #0
 8001eec:	9309      	str	r3, [sp, #36]	; 0x24
 8001eee:	2320      	movs	r3, #32
 8001ef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ef8:	2330      	movs	r3, #48	; 0x30
 8001efa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80020a4 <_svfiprintf_r+0x1ec>
 8001efe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f02:	f04f 0901 	mov.w	r9, #1
 8001f06:	4623      	mov	r3, r4
 8001f08:	469a      	mov	sl, r3
 8001f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f0e:	b10a      	cbz	r2, 8001f14 <_svfiprintf_r+0x5c>
 8001f10:	2a25      	cmp	r2, #37	; 0x25
 8001f12:	d1f9      	bne.n	8001f08 <_svfiprintf_r+0x50>
 8001f14:	ebba 0b04 	subs.w	fp, sl, r4
 8001f18:	d00b      	beq.n	8001f32 <_svfiprintf_r+0x7a>
 8001f1a:	465b      	mov	r3, fp
 8001f1c:	4622      	mov	r2, r4
 8001f1e:	4629      	mov	r1, r5
 8001f20:	4638      	mov	r0, r7
 8001f22:	f7ff ff6e 	bl	8001e02 <__ssputs_r>
 8001f26:	3001      	adds	r0, #1
 8001f28:	f000 80aa 	beq.w	8002080 <_svfiprintf_r+0x1c8>
 8001f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f2e:	445a      	add	r2, fp
 8001f30:	9209      	str	r2, [sp, #36]	; 0x24
 8001f32:	f89a 3000 	ldrb.w	r3, [sl]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 80a2 	beq.w	8002080 <_svfiprintf_r+0x1c8>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f46:	f10a 0a01 	add.w	sl, sl, #1
 8001f4a:	9304      	str	r3, [sp, #16]
 8001f4c:	9307      	str	r3, [sp, #28]
 8001f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f52:	931a      	str	r3, [sp, #104]	; 0x68
 8001f54:	4654      	mov	r4, sl
 8001f56:	2205      	movs	r2, #5
 8001f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f5c:	4851      	ldr	r0, [pc, #324]	; (80020a4 <_svfiprintf_r+0x1ec>)
 8001f5e:	f7fe f947 	bl	80001f0 <memchr>
 8001f62:	9a04      	ldr	r2, [sp, #16]
 8001f64:	b9d8      	cbnz	r0, 8001f9e <_svfiprintf_r+0xe6>
 8001f66:	06d0      	lsls	r0, r2, #27
 8001f68:	bf44      	itt	mi
 8001f6a:	2320      	movmi	r3, #32
 8001f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f70:	0711      	lsls	r1, r2, #28
 8001f72:	bf44      	itt	mi
 8001f74:	232b      	movmi	r3, #43	; 0x2b
 8001f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8001f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8001f80:	d015      	beq.n	8001fae <_svfiprintf_r+0xf6>
 8001f82:	9a07      	ldr	r2, [sp, #28]
 8001f84:	4654      	mov	r4, sl
 8001f86:	2000      	movs	r0, #0
 8001f88:	f04f 0c0a 	mov.w	ip, #10
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f92:	3b30      	subs	r3, #48	; 0x30
 8001f94:	2b09      	cmp	r3, #9
 8001f96:	d94e      	bls.n	8002036 <_svfiprintf_r+0x17e>
 8001f98:	b1b0      	cbz	r0, 8001fc8 <_svfiprintf_r+0x110>
 8001f9a:	9207      	str	r2, [sp, #28]
 8001f9c:	e014      	b.n	8001fc8 <_svfiprintf_r+0x110>
 8001f9e:	eba0 0308 	sub.w	r3, r0, r8
 8001fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	9304      	str	r3, [sp, #16]
 8001faa:	46a2      	mov	sl, r4
 8001fac:	e7d2      	b.n	8001f54 <_svfiprintf_r+0x9c>
 8001fae:	9b03      	ldr	r3, [sp, #12]
 8001fb0:	1d19      	adds	r1, r3, #4
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	9103      	str	r1, [sp, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bfbb      	ittet	lt
 8001fba:	425b      	neglt	r3, r3
 8001fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8001fc0:	9307      	strge	r3, [sp, #28]
 8001fc2:	9307      	strlt	r3, [sp, #28]
 8001fc4:	bfb8      	it	lt
 8001fc6:	9204      	strlt	r2, [sp, #16]
 8001fc8:	7823      	ldrb	r3, [r4, #0]
 8001fca:	2b2e      	cmp	r3, #46	; 0x2e
 8001fcc:	d10c      	bne.n	8001fe8 <_svfiprintf_r+0x130>
 8001fce:	7863      	ldrb	r3, [r4, #1]
 8001fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8001fd2:	d135      	bne.n	8002040 <_svfiprintf_r+0x188>
 8001fd4:	9b03      	ldr	r3, [sp, #12]
 8001fd6:	1d1a      	adds	r2, r3, #4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	9203      	str	r2, [sp, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bfb8      	it	lt
 8001fe0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001fe4:	3402      	adds	r4, #2
 8001fe6:	9305      	str	r3, [sp, #20]
 8001fe8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80020b4 <_svfiprintf_r+0x1fc>
 8001fec:	7821      	ldrb	r1, [r4, #0]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	4650      	mov	r0, sl
 8001ff2:	f7fe f8fd 	bl	80001f0 <memchr>
 8001ff6:	b140      	cbz	r0, 800200a <_svfiprintf_r+0x152>
 8001ff8:	2340      	movs	r3, #64	; 0x40
 8001ffa:	eba0 000a 	sub.w	r0, r0, sl
 8001ffe:	fa03 f000 	lsl.w	r0, r3, r0
 8002002:	9b04      	ldr	r3, [sp, #16]
 8002004:	4303      	orrs	r3, r0
 8002006:	3401      	adds	r4, #1
 8002008:	9304      	str	r3, [sp, #16]
 800200a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800200e:	4826      	ldr	r0, [pc, #152]	; (80020a8 <_svfiprintf_r+0x1f0>)
 8002010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002014:	2206      	movs	r2, #6
 8002016:	f7fe f8eb 	bl	80001f0 <memchr>
 800201a:	2800      	cmp	r0, #0
 800201c:	d038      	beq.n	8002090 <_svfiprintf_r+0x1d8>
 800201e:	4b23      	ldr	r3, [pc, #140]	; (80020ac <_svfiprintf_r+0x1f4>)
 8002020:	bb1b      	cbnz	r3, 800206a <_svfiprintf_r+0x1b2>
 8002022:	9b03      	ldr	r3, [sp, #12]
 8002024:	3307      	adds	r3, #7
 8002026:	f023 0307 	bic.w	r3, r3, #7
 800202a:	3308      	adds	r3, #8
 800202c:	9303      	str	r3, [sp, #12]
 800202e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002030:	4433      	add	r3, r6
 8002032:	9309      	str	r3, [sp, #36]	; 0x24
 8002034:	e767      	b.n	8001f06 <_svfiprintf_r+0x4e>
 8002036:	fb0c 3202 	mla	r2, ip, r2, r3
 800203a:	460c      	mov	r4, r1
 800203c:	2001      	movs	r0, #1
 800203e:	e7a5      	b.n	8001f8c <_svfiprintf_r+0xd4>
 8002040:	2300      	movs	r3, #0
 8002042:	3401      	adds	r4, #1
 8002044:	9305      	str	r3, [sp, #20]
 8002046:	4619      	mov	r1, r3
 8002048:	f04f 0c0a 	mov.w	ip, #10
 800204c:	4620      	mov	r0, r4
 800204e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002052:	3a30      	subs	r2, #48	; 0x30
 8002054:	2a09      	cmp	r2, #9
 8002056:	d903      	bls.n	8002060 <_svfiprintf_r+0x1a8>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0c5      	beq.n	8001fe8 <_svfiprintf_r+0x130>
 800205c:	9105      	str	r1, [sp, #20]
 800205e:	e7c3      	b.n	8001fe8 <_svfiprintf_r+0x130>
 8002060:	fb0c 2101 	mla	r1, ip, r1, r2
 8002064:	4604      	mov	r4, r0
 8002066:	2301      	movs	r3, #1
 8002068:	e7f0      	b.n	800204c <_svfiprintf_r+0x194>
 800206a:	ab03      	add	r3, sp, #12
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	462a      	mov	r2, r5
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <_svfiprintf_r+0x1f8>)
 8002072:	a904      	add	r1, sp, #16
 8002074:	4638      	mov	r0, r7
 8002076:	f3af 8000 	nop.w
 800207a:	1c42      	adds	r2, r0, #1
 800207c:	4606      	mov	r6, r0
 800207e:	d1d6      	bne.n	800202e <_svfiprintf_r+0x176>
 8002080:	89ab      	ldrh	r3, [r5, #12]
 8002082:	065b      	lsls	r3, r3, #25
 8002084:	f53f af2c 	bmi.w	8001ee0 <_svfiprintf_r+0x28>
 8002088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800208a:	b01d      	add	sp, #116	; 0x74
 800208c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002090:	ab03      	add	r3, sp, #12
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	462a      	mov	r2, r5
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <_svfiprintf_r+0x1f8>)
 8002098:	a904      	add	r1, sp, #16
 800209a:	4638      	mov	r0, r7
 800209c:	f000 f87a 	bl	8002194 <_printf_i>
 80020a0:	e7eb      	b.n	800207a <_svfiprintf_r+0x1c2>
 80020a2:	bf00      	nop
 80020a4:	0800265a 	.word	0x0800265a
 80020a8:	08002664 	.word	0x08002664
 80020ac:	00000000 	.word	0x00000000
 80020b0:	08001e03 	.word	0x08001e03
 80020b4:	08002660 	.word	0x08002660

080020b8 <_printf_common>:
 80020b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020bc:	4616      	mov	r6, r2
 80020be:	4699      	mov	r9, r3
 80020c0:	688a      	ldr	r2, [r1, #8]
 80020c2:	690b      	ldr	r3, [r1, #16]
 80020c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020c8:	4293      	cmp	r3, r2
 80020ca:	bfb8      	it	lt
 80020cc:	4613      	movlt	r3, r2
 80020ce:	6033      	str	r3, [r6, #0]
 80020d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020d4:	4607      	mov	r7, r0
 80020d6:	460c      	mov	r4, r1
 80020d8:	b10a      	cbz	r2, 80020de <_printf_common+0x26>
 80020da:	3301      	adds	r3, #1
 80020dc:	6033      	str	r3, [r6, #0]
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	0699      	lsls	r1, r3, #26
 80020e2:	bf42      	ittt	mi
 80020e4:	6833      	ldrmi	r3, [r6, #0]
 80020e6:	3302      	addmi	r3, #2
 80020e8:	6033      	strmi	r3, [r6, #0]
 80020ea:	6825      	ldr	r5, [r4, #0]
 80020ec:	f015 0506 	ands.w	r5, r5, #6
 80020f0:	d106      	bne.n	8002100 <_printf_common+0x48>
 80020f2:	f104 0a19 	add.w	sl, r4, #25
 80020f6:	68e3      	ldr	r3, [r4, #12]
 80020f8:	6832      	ldr	r2, [r6, #0]
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	42ab      	cmp	r3, r5
 80020fe:	dc26      	bgt.n	800214e <_printf_common+0x96>
 8002100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002104:	1e13      	subs	r3, r2, #0
 8002106:	6822      	ldr	r2, [r4, #0]
 8002108:	bf18      	it	ne
 800210a:	2301      	movne	r3, #1
 800210c:	0692      	lsls	r2, r2, #26
 800210e:	d42b      	bmi.n	8002168 <_printf_common+0xb0>
 8002110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002114:	4649      	mov	r1, r9
 8002116:	4638      	mov	r0, r7
 8002118:	47c0      	blx	r8
 800211a:	3001      	adds	r0, #1
 800211c:	d01e      	beq.n	800215c <_printf_common+0xa4>
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	68e5      	ldr	r5, [r4, #12]
 8002122:	6832      	ldr	r2, [r6, #0]
 8002124:	f003 0306 	and.w	r3, r3, #6
 8002128:	2b04      	cmp	r3, #4
 800212a:	bf08      	it	eq
 800212c:	1aad      	subeq	r5, r5, r2
 800212e:	68a3      	ldr	r3, [r4, #8]
 8002130:	6922      	ldr	r2, [r4, #16]
 8002132:	bf0c      	ite	eq
 8002134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002138:	2500      	movne	r5, #0
 800213a:	4293      	cmp	r3, r2
 800213c:	bfc4      	itt	gt
 800213e:	1a9b      	subgt	r3, r3, r2
 8002140:	18ed      	addgt	r5, r5, r3
 8002142:	2600      	movs	r6, #0
 8002144:	341a      	adds	r4, #26
 8002146:	42b5      	cmp	r5, r6
 8002148:	d11a      	bne.n	8002180 <_printf_common+0xc8>
 800214a:	2000      	movs	r0, #0
 800214c:	e008      	b.n	8002160 <_printf_common+0xa8>
 800214e:	2301      	movs	r3, #1
 8002150:	4652      	mov	r2, sl
 8002152:	4649      	mov	r1, r9
 8002154:	4638      	mov	r0, r7
 8002156:	47c0      	blx	r8
 8002158:	3001      	adds	r0, #1
 800215a:	d103      	bne.n	8002164 <_printf_common+0xac>
 800215c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002164:	3501      	adds	r5, #1
 8002166:	e7c6      	b.n	80020f6 <_printf_common+0x3e>
 8002168:	18e1      	adds	r1, r4, r3
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	2030      	movs	r0, #48	; 0x30
 800216e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002172:	4422      	add	r2, r4
 8002174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800217c:	3302      	adds	r3, #2
 800217e:	e7c7      	b.n	8002110 <_printf_common+0x58>
 8002180:	2301      	movs	r3, #1
 8002182:	4622      	mov	r2, r4
 8002184:	4649      	mov	r1, r9
 8002186:	4638      	mov	r0, r7
 8002188:	47c0      	blx	r8
 800218a:	3001      	adds	r0, #1
 800218c:	d0e6      	beq.n	800215c <_printf_common+0xa4>
 800218e:	3601      	adds	r6, #1
 8002190:	e7d9      	b.n	8002146 <_printf_common+0x8e>
	...

08002194 <_printf_i>:
 8002194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002198:	460c      	mov	r4, r1
 800219a:	4691      	mov	r9, r2
 800219c:	7e27      	ldrb	r7, [r4, #24]
 800219e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80021a0:	2f78      	cmp	r7, #120	; 0x78
 80021a2:	4680      	mov	r8, r0
 80021a4:	469a      	mov	sl, r3
 80021a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021aa:	d807      	bhi.n	80021bc <_printf_i+0x28>
 80021ac:	2f62      	cmp	r7, #98	; 0x62
 80021ae:	d80a      	bhi.n	80021c6 <_printf_i+0x32>
 80021b0:	2f00      	cmp	r7, #0
 80021b2:	f000 80d8 	beq.w	8002366 <_printf_i+0x1d2>
 80021b6:	2f58      	cmp	r7, #88	; 0x58
 80021b8:	f000 80a3 	beq.w	8002302 <_printf_i+0x16e>
 80021bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80021c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80021c4:	e03a      	b.n	800223c <_printf_i+0xa8>
 80021c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80021ca:	2b15      	cmp	r3, #21
 80021cc:	d8f6      	bhi.n	80021bc <_printf_i+0x28>
 80021ce:	a001      	add	r0, pc, #4	; (adr r0, 80021d4 <_printf_i+0x40>)
 80021d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80021d4:	0800222d 	.word	0x0800222d
 80021d8:	08002241 	.word	0x08002241
 80021dc:	080021bd 	.word	0x080021bd
 80021e0:	080021bd 	.word	0x080021bd
 80021e4:	080021bd 	.word	0x080021bd
 80021e8:	080021bd 	.word	0x080021bd
 80021ec:	08002241 	.word	0x08002241
 80021f0:	080021bd 	.word	0x080021bd
 80021f4:	080021bd 	.word	0x080021bd
 80021f8:	080021bd 	.word	0x080021bd
 80021fc:	080021bd 	.word	0x080021bd
 8002200:	0800234d 	.word	0x0800234d
 8002204:	08002271 	.word	0x08002271
 8002208:	0800232f 	.word	0x0800232f
 800220c:	080021bd 	.word	0x080021bd
 8002210:	080021bd 	.word	0x080021bd
 8002214:	0800236f 	.word	0x0800236f
 8002218:	080021bd 	.word	0x080021bd
 800221c:	08002271 	.word	0x08002271
 8002220:	080021bd 	.word	0x080021bd
 8002224:	080021bd 	.word	0x080021bd
 8002228:	08002337 	.word	0x08002337
 800222c:	680b      	ldr	r3, [r1, #0]
 800222e:	1d1a      	adds	r2, r3, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	600a      	str	r2, [r1, #0]
 8002234:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800223c:	2301      	movs	r3, #1
 800223e:	e0a3      	b.n	8002388 <_printf_i+0x1f4>
 8002240:	6825      	ldr	r5, [r4, #0]
 8002242:	6808      	ldr	r0, [r1, #0]
 8002244:	062e      	lsls	r6, r5, #24
 8002246:	f100 0304 	add.w	r3, r0, #4
 800224a:	d50a      	bpl.n	8002262 <_printf_i+0xce>
 800224c:	6805      	ldr	r5, [r0, #0]
 800224e:	600b      	str	r3, [r1, #0]
 8002250:	2d00      	cmp	r5, #0
 8002252:	da03      	bge.n	800225c <_printf_i+0xc8>
 8002254:	232d      	movs	r3, #45	; 0x2d
 8002256:	426d      	negs	r5, r5
 8002258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800225c:	485e      	ldr	r0, [pc, #376]	; (80023d8 <_printf_i+0x244>)
 800225e:	230a      	movs	r3, #10
 8002260:	e019      	b.n	8002296 <_printf_i+0x102>
 8002262:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002266:	6805      	ldr	r5, [r0, #0]
 8002268:	600b      	str	r3, [r1, #0]
 800226a:	bf18      	it	ne
 800226c:	b22d      	sxthne	r5, r5
 800226e:	e7ef      	b.n	8002250 <_printf_i+0xbc>
 8002270:	680b      	ldr	r3, [r1, #0]
 8002272:	6825      	ldr	r5, [r4, #0]
 8002274:	1d18      	adds	r0, r3, #4
 8002276:	6008      	str	r0, [r1, #0]
 8002278:	0628      	lsls	r0, r5, #24
 800227a:	d501      	bpl.n	8002280 <_printf_i+0xec>
 800227c:	681d      	ldr	r5, [r3, #0]
 800227e:	e002      	b.n	8002286 <_printf_i+0xf2>
 8002280:	0669      	lsls	r1, r5, #25
 8002282:	d5fb      	bpl.n	800227c <_printf_i+0xe8>
 8002284:	881d      	ldrh	r5, [r3, #0]
 8002286:	4854      	ldr	r0, [pc, #336]	; (80023d8 <_printf_i+0x244>)
 8002288:	2f6f      	cmp	r7, #111	; 0x6f
 800228a:	bf0c      	ite	eq
 800228c:	2308      	moveq	r3, #8
 800228e:	230a      	movne	r3, #10
 8002290:	2100      	movs	r1, #0
 8002292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002296:	6866      	ldr	r6, [r4, #4]
 8002298:	60a6      	str	r6, [r4, #8]
 800229a:	2e00      	cmp	r6, #0
 800229c:	bfa2      	ittt	ge
 800229e:	6821      	ldrge	r1, [r4, #0]
 80022a0:	f021 0104 	bicge.w	r1, r1, #4
 80022a4:	6021      	strge	r1, [r4, #0]
 80022a6:	b90d      	cbnz	r5, 80022ac <_printf_i+0x118>
 80022a8:	2e00      	cmp	r6, #0
 80022aa:	d04d      	beq.n	8002348 <_printf_i+0x1b4>
 80022ac:	4616      	mov	r6, r2
 80022ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80022b2:	fb03 5711 	mls	r7, r3, r1, r5
 80022b6:	5dc7      	ldrb	r7, [r0, r7]
 80022b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80022bc:	462f      	mov	r7, r5
 80022be:	42bb      	cmp	r3, r7
 80022c0:	460d      	mov	r5, r1
 80022c2:	d9f4      	bls.n	80022ae <_printf_i+0x11a>
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d10b      	bne.n	80022e0 <_printf_i+0x14c>
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	07df      	lsls	r7, r3, #31
 80022cc:	d508      	bpl.n	80022e0 <_printf_i+0x14c>
 80022ce:	6923      	ldr	r3, [r4, #16]
 80022d0:	6861      	ldr	r1, [r4, #4]
 80022d2:	4299      	cmp	r1, r3
 80022d4:	bfde      	ittt	le
 80022d6:	2330      	movle	r3, #48	; 0x30
 80022d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80022dc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80022e0:	1b92      	subs	r2, r2, r6
 80022e2:	6122      	str	r2, [r4, #16]
 80022e4:	f8cd a000 	str.w	sl, [sp]
 80022e8:	464b      	mov	r3, r9
 80022ea:	aa03      	add	r2, sp, #12
 80022ec:	4621      	mov	r1, r4
 80022ee:	4640      	mov	r0, r8
 80022f0:	f7ff fee2 	bl	80020b8 <_printf_common>
 80022f4:	3001      	adds	r0, #1
 80022f6:	d14c      	bne.n	8002392 <_printf_i+0x1fe>
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022fc:	b004      	add	sp, #16
 80022fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002302:	4835      	ldr	r0, [pc, #212]	; (80023d8 <_printf_i+0x244>)
 8002304:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	680e      	ldr	r6, [r1, #0]
 800230c:	061f      	lsls	r7, r3, #24
 800230e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002312:	600e      	str	r6, [r1, #0]
 8002314:	d514      	bpl.n	8002340 <_printf_i+0x1ac>
 8002316:	07d9      	lsls	r1, r3, #31
 8002318:	bf44      	itt	mi
 800231a:	f043 0320 	orrmi.w	r3, r3, #32
 800231e:	6023      	strmi	r3, [r4, #0]
 8002320:	b91d      	cbnz	r5, 800232a <_printf_i+0x196>
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	f023 0320 	bic.w	r3, r3, #32
 8002328:	6023      	str	r3, [r4, #0]
 800232a:	2310      	movs	r3, #16
 800232c:	e7b0      	b.n	8002290 <_printf_i+0xfc>
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	f043 0320 	orr.w	r3, r3, #32
 8002334:	6023      	str	r3, [r4, #0]
 8002336:	2378      	movs	r3, #120	; 0x78
 8002338:	4828      	ldr	r0, [pc, #160]	; (80023dc <_printf_i+0x248>)
 800233a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800233e:	e7e3      	b.n	8002308 <_printf_i+0x174>
 8002340:	065e      	lsls	r6, r3, #25
 8002342:	bf48      	it	mi
 8002344:	b2ad      	uxthmi	r5, r5
 8002346:	e7e6      	b.n	8002316 <_printf_i+0x182>
 8002348:	4616      	mov	r6, r2
 800234a:	e7bb      	b.n	80022c4 <_printf_i+0x130>
 800234c:	680b      	ldr	r3, [r1, #0]
 800234e:	6826      	ldr	r6, [r4, #0]
 8002350:	6960      	ldr	r0, [r4, #20]
 8002352:	1d1d      	adds	r5, r3, #4
 8002354:	600d      	str	r5, [r1, #0]
 8002356:	0635      	lsls	r5, r6, #24
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	d501      	bpl.n	8002360 <_printf_i+0x1cc>
 800235c:	6018      	str	r0, [r3, #0]
 800235e:	e002      	b.n	8002366 <_printf_i+0x1d2>
 8002360:	0671      	lsls	r1, r6, #25
 8002362:	d5fb      	bpl.n	800235c <_printf_i+0x1c8>
 8002364:	8018      	strh	r0, [r3, #0]
 8002366:	2300      	movs	r3, #0
 8002368:	6123      	str	r3, [r4, #16]
 800236a:	4616      	mov	r6, r2
 800236c:	e7ba      	b.n	80022e4 <_printf_i+0x150>
 800236e:	680b      	ldr	r3, [r1, #0]
 8002370:	1d1a      	adds	r2, r3, #4
 8002372:	600a      	str	r2, [r1, #0]
 8002374:	681e      	ldr	r6, [r3, #0]
 8002376:	6862      	ldr	r2, [r4, #4]
 8002378:	2100      	movs	r1, #0
 800237a:	4630      	mov	r0, r6
 800237c:	f7fd ff38 	bl	80001f0 <memchr>
 8002380:	b108      	cbz	r0, 8002386 <_printf_i+0x1f2>
 8002382:	1b80      	subs	r0, r0, r6
 8002384:	6060      	str	r0, [r4, #4]
 8002386:	6863      	ldr	r3, [r4, #4]
 8002388:	6123      	str	r3, [r4, #16]
 800238a:	2300      	movs	r3, #0
 800238c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002390:	e7a8      	b.n	80022e4 <_printf_i+0x150>
 8002392:	6923      	ldr	r3, [r4, #16]
 8002394:	4632      	mov	r2, r6
 8002396:	4649      	mov	r1, r9
 8002398:	4640      	mov	r0, r8
 800239a:	47d0      	blx	sl
 800239c:	3001      	adds	r0, #1
 800239e:	d0ab      	beq.n	80022f8 <_printf_i+0x164>
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	079b      	lsls	r3, r3, #30
 80023a4:	d413      	bmi.n	80023ce <_printf_i+0x23a>
 80023a6:	68e0      	ldr	r0, [r4, #12]
 80023a8:	9b03      	ldr	r3, [sp, #12]
 80023aa:	4298      	cmp	r0, r3
 80023ac:	bfb8      	it	lt
 80023ae:	4618      	movlt	r0, r3
 80023b0:	e7a4      	b.n	80022fc <_printf_i+0x168>
 80023b2:	2301      	movs	r3, #1
 80023b4:	4632      	mov	r2, r6
 80023b6:	4649      	mov	r1, r9
 80023b8:	4640      	mov	r0, r8
 80023ba:	47d0      	blx	sl
 80023bc:	3001      	adds	r0, #1
 80023be:	d09b      	beq.n	80022f8 <_printf_i+0x164>
 80023c0:	3501      	adds	r5, #1
 80023c2:	68e3      	ldr	r3, [r4, #12]
 80023c4:	9903      	ldr	r1, [sp, #12]
 80023c6:	1a5b      	subs	r3, r3, r1
 80023c8:	42ab      	cmp	r3, r5
 80023ca:	dcf2      	bgt.n	80023b2 <_printf_i+0x21e>
 80023cc:	e7eb      	b.n	80023a6 <_printf_i+0x212>
 80023ce:	2500      	movs	r5, #0
 80023d0:	f104 0619 	add.w	r6, r4, #25
 80023d4:	e7f5      	b.n	80023c2 <_printf_i+0x22e>
 80023d6:	bf00      	nop
 80023d8:	0800266b 	.word	0x0800266b
 80023dc:	0800267c 	.word	0x0800267c

080023e0 <memcpy>:
 80023e0:	440a      	add	r2, r1
 80023e2:	4291      	cmp	r1, r2
 80023e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80023e8:	d100      	bne.n	80023ec <memcpy+0xc>
 80023ea:	4770      	bx	lr
 80023ec:	b510      	push	{r4, lr}
 80023ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023f6:	4291      	cmp	r1, r2
 80023f8:	d1f9      	bne.n	80023ee <memcpy+0xe>
 80023fa:	bd10      	pop	{r4, pc}

080023fc <memmove>:
 80023fc:	4288      	cmp	r0, r1
 80023fe:	b510      	push	{r4, lr}
 8002400:	eb01 0402 	add.w	r4, r1, r2
 8002404:	d902      	bls.n	800240c <memmove+0x10>
 8002406:	4284      	cmp	r4, r0
 8002408:	4623      	mov	r3, r4
 800240a:	d807      	bhi.n	800241c <memmove+0x20>
 800240c:	1e43      	subs	r3, r0, #1
 800240e:	42a1      	cmp	r1, r4
 8002410:	d008      	beq.n	8002424 <memmove+0x28>
 8002412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002416:	f803 2f01 	strb.w	r2, [r3, #1]!
 800241a:	e7f8      	b.n	800240e <memmove+0x12>
 800241c:	4402      	add	r2, r0
 800241e:	4601      	mov	r1, r0
 8002420:	428a      	cmp	r2, r1
 8002422:	d100      	bne.n	8002426 <memmove+0x2a>
 8002424:	bd10      	pop	{r4, pc}
 8002426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800242a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800242e:	e7f7      	b.n	8002420 <memmove+0x24>

08002430 <_free_r>:
 8002430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002432:	2900      	cmp	r1, #0
 8002434:	d048      	beq.n	80024c8 <_free_r+0x98>
 8002436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800243a:	9001      	str	r0, [sp, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	f1a1 0404 	sub.w	r4, r1, #4
 8002442:	bfb8      	it	lt
 8002444:	18e4      	addlt	r4, r4, r3
 8002446:	f000 f8d3 	bl	80025f0 <__malloc_lock>
 800244a:	4a20      	ldr	r2, [pc, #128]	; (80024cc <_free_r+0x9c>)
 800244c:	9801      	ldr	r0, [sp, #4]
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	4615      	mov	r5, r2
 8002452:	b933      	cbnz	r3, 8002462 <_free_r+0x32>
 8002454:	6063      	str	r3, [r4, #4]
 8002456:	6014      	str	r4, [r2, #0]
 8002458:	b003      	add	sp, #12
 800245a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800245e:	f000 b8cd 	b.w	80025fc <__malloc_unlock>
 8002462:	42a3      	cmp	r3, r4
 8002464:	d90b      	bls.n	800247e <_free_r+0x4e>
 8002466:	6821      	ldr	r1, [r4, #0]
 8002468:	1862      	adds	r2, r4, r1
 800246a:	4293      	cmp	r3, r2
 800246c:	bf04      	itt	eq
 800246e:	681a      	ldreq	r2, [r3, #0]
 8002470:	685b      	ldreq	r3, [r3, #4]
 8002472:	6063      	str	r3, [r4, #4]
 8002474:	bf04      	itt	eq
 8002476:	1852      	addeq	r2, r2, r1
 8002478:	6022      	streq	r2, [r4, #0]
 800247a:	602c      	str	r4, [r5, #0]
 800247c:	e7ec      	b.n	8002458 <_free_r+0x28>
 800247e:	461a      	mov	r2, r3
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	b10b      	cbz	r3, 8002488 <_free_r+0x58>
 8002484:	42a3      	cmp	r3, r4
 8002486:	d9fa      	bls.n	800247e <_free_r+0x4e>
 8002488:	6811      	ldr	r1, [r2, #0]
 800248a:	1855      	adds	r5, r2, r1
 800248c:	42a5      	cmp	r5, r4
 800248e:	d10b      	bne.n	80024a8 <_free_r+0x78>
 8002490:	6824      	ldr	r4, [r4, #0]
 8002492:	4421      	add	r1, r4
 8002494:	1854      	adds	r4, r2, r1
 8002496:	42a3      	cmp	r3, r4
 8002498:	6011      	str	r1, [r2, #0]
 800249a:	d1dd      	bne.n	8002458 <_free_r+0x28>
 800249c:	681c      	ldr	r4, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	6053      	str	r3, [r2, #4]
 80024a2:	4421      	add	r1, r4
 80024a4:	6011      	str	r1, [r2, #0]
 80024a6:	e7d7      	b.n	8002458 <_free_r+0x28>
 80024a8:	d902      	bls.n	80024b0 <_free_r+0x80>
 80024aa:	230c      	movs	r3, #12
 80024ac:	6003      	str	r3, [r0, #0]
 80024ae:	e7d3      	b.n	8002458 <_free_r+0x28>
 80024b0:	6825      	ldr	r5, [r4, #0]
 80024b2:	1961      	adds	r1, r4, r5
 80024b4:	428b      	cmp	r3, r1
 80024b6:	bf04      	itt	eq
 80024b8:	6819      	ldreq	r1, [r3, #0]
 80024ba:	685b      	ldreq	r3, [r3, #4]
 80024bc:	6063      	str	r3, [r4, #4]
 80024be:	bf04      	itt	eq
 80024c0:	1949      	addeq	r1, r1, r5
 80024c2:	6021      	streq	r1, [r4, #0]
 80024c4:	6054      	str	r4, [r2, #4]
 80024c6:	e7c7      	b.n	8002458 <_free_r+0x28>
 80024c8:	b003      	add	sp, #12
 80024ca:	bd30      	pop	{r4, r5, pc}
 80024cc:	20000088 	.word	0x20000088

080024d0 <_malloc_r>:
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d2:	1ccd      	adds	r5, r1, #3
 80024d4:	f025 0503 	bic.w	r5, r5, #3
 80024d8:	3508      	adds	r5, #8
 80024da:	2d0c      	cmp	r5, #12
 80024dc:	bf38      	it	cc
 80024de:	250c      	movcc	r5, #12
 80024e0:	2d00      	cmp	r5, #0
 80024e2:	4606      	mov	r6, r0
 80024e4:	db01      	blt.n	80024ea <_malloc_r+0x1a>
 80024e6:	42a9      	cmp	r1, r5
 80024e8:	d903      	bls.n	80024f2 <_malloc_r+0x22>
 80024ea:	230c      	movs	r3, #12
 80024ec:	6033      	str	r3, [r6, #0]
 80024ee:	2000      	movs	r0, #0
 80024f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024f2:	f000 f87d 	bl	80025f0 <__malloc_lock>
 80024f6:	4921      	ldr	r1, [pc, #132]	; (800257c <_malloc_r+0xac>)
 80024f8:	680a      	ldr	r2, [r1, #0]
 80024fa:	4614      	mov	r4, r2
 80024fc:	b99c      	cbnz	r4, 8002526 <_malloc_r+0x56>
 80024fe:	4f20      	ldr	r7, [pc, #128]	; (8002580 <_malloc_r+0xb0>)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	b923      	cbnz	r3, 800250e <_malloc_r+0x3e>
 8002504:	4621      	mov	r1, r4
 8002506:	4630      	mov	r0, r6
 8002508:	f000 f862 	bl	80025d0 <_sbrk_r>
 800250c:	6038      	str	r0, [r7, #0]
 800250e:	4629      	mov	r1, r5
 8002510:	4630      	mov	r0, r6
 8002512:	f000 f85d 	bl	80025d0 <_sbrk_r>
 8002516:	1c43      	adds	r3, r0, #1
 8002518:	d123      	bne.n	8002562 <_malloc_r+0x92>
 800251a:	230c      	movs	r3, #12
 800251c:	6033      	str	r3, [r6, #0]
 800251e:	4630      	mov	r0, r6
 8002520:	f000 f86c 	bl	80025fc <__malloc_unlock>
 8002524:	e7e3      	b.n	80024ee <_malloc_r+0x1e>
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	1b5b      	subs	r3, r3, r5
 800252a:	d417      	bmi.n	800255c <_malloc_r+0x8c>
 800252c:	2b0b      	cmp	r3, #11
 800252e:	d903      	bls.n	8002538 <_malloc_r+0x68>
 8002530:	6023      	str	r3, [r4, #0]
 8002532:	441c      	add	r4, r3
 8002534:	6025      	str	r5, [r4, #0]
 8002536:	e004      	b.n	8002542 <_malloc_r+0x72>
 8002538:	6863      	ldr	r3, [r4, #4]
 800253a:	42a2      	cmp	r2, r4
 800253c:	bf0c      	ite	eq
 800253e:	600b      	streq	r3, [r1, #0]
 8002540:	6053      	strne	r3, [r2, #4]
 8002542:	4630      	mov	r0, r6
 8002544:	f000 f85a 	bl	80025fc <__malloc_unlock>
 8002548:	f104 000b 	add.w	r0, r4, #11
 800254c:	1d23      	adds	r3, r4, #4
 800254e:	f020 0007 	bic.w	r0, r0, #7
 8002552:	1ac2      	subs	r2, r0, r3
 8002554:	d0cc      	beq.n	80024f0 <_malloc_r+0x20>
 8002556:	1a1b      	subs	r3, r3, r0
 8002558:	50a3      	str	r3, [r4, r2]
 800255a:	e7c9      	b.n	80024f0 <_malloc_r+0x20>
 800255c:	4622      	mov	r2, r4
 800255e:	6864      	ldr	r4, [r4, #4]
 8002560:	e7cc      	b.n	80024fc <_malloc_r+0x2c>
 8002562:	1cc4      	adds	r4, r0, #3
 8002564:	f024 0403 	bic.w	r4, r4, #3
 8002568:	42a0      	cmp	r0, r4
 800256a:	d0e3      	beq.n	8002534 <_malloc_r+0x64>
 800256c:	1a21      	subs	r1, r4, r0
 800256e:	4630      	mov	r0, r6
 8002570:	f000 f82e 	bl	80025d0 <_sbrk_r>
 8002574:	3001      	adds	r0, #1
 8002576:	d1dd      	bne.n	8002534 <_malloc_r+0x64>
 8002578:	e7cf      	b.n	800251a <_malloc_r+0x4a>
 800257a:	bf00      	nop
 800257c:	20000088 	.word	0x20000088
 8002580:	2000008c 	.word	0x2000008c

08002584 <_realloc_r>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	4607      	mov	r7, r0
 8002588:	4614      	mov	r4, r2
 800258a:	460e      	mov	r6, r1
 800258c:	b921      	cbnz	r1, 8002598 <_realloc_r+0x14>
 800258e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002592:	4611      	mov	r1, r2
 8002594:	f7ff bf9c 	b.w	80024d0 <_malloc_r>
 8002598:	b922      	cbnz	r2, 80025a4 <_realloc_r+0x20>
 800259a:	f7ff ff49 	bl	8002430 <_free_r>
 800259e:	4625      	mov	r5, r4
 80025a0:	4628      	mov	r0, r5
 80025a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025a4:	f000 f830 	bl	8002608 <_malloc_usable_size_r>
 80025a8:	42a0      	cmp	r0, r4
 80025aa:	d20f      	bcs.n	80025cc <_realloc_r+0x48>
 80025ac:	4621      	mov	r1, r4
 80025ae:	4638      	mov	r0, r7
 80025b0:	f7ff ff8e 	bl	80024d0 <_malloc_r>
 80025b4:	4605      	mov	r5, r0
 80025b6:	2800      	cmp	r0, #0
 80025b8:	d0f2      	beq.n	80025a0 <_realloc_r+0x1c>
 80025ba:	4631      	mov	r1, r6
 80025bc:	4622      	mov	r2, r4
 80025be:	f7ff ff0f 	bl	80023e0 <memcpy>
 80025c2:	4631      	mov	r1, r6
 80025c4:	4638      	mov	r0, r7
 80025c6:	f7ff ff33 	bl	8002430 <_free_r>
 80025ca:	e7e9      	b.n	80025a0 <_realloc_r+0x1c>
 80025cc:	4635      	mov	r5, r6
 80025ce:	e7e7      	b.n	80025a0 <_realloc_r+0x1c>

080025d0 <_sbrk_r>:
 80025d0:	b538      	push	{r3, r4, r5, lr}
 80025d2:	4d06      	ldr	r5, [pc, #24]	; (80025ec <_sbrk_r+0x1c>)
 80025d4:	2300      	movs	r3, #0
 80025d6:	4604      	mov	r4, r0
 80025d8:	4608      	mov	r0, r1
 80025da:	602b      	str	r3, [r5, #0]
 80025dc:	f7ff fb10 	bl	8001c00 <_sbrk>
 80025e0:	1c43      	adds	r3, r0, #1
 80025e2:	d102      	bne.n	80025ea <_sbrk_r+0x1a>
 80025e4:	682b      	ldr	r3, [r5, #0]
 80025e6:	b103      	cbz	r3, 80025ea <_sbrk_r+0x1a>
 80025e8:	6023      	str	r3, [r4, #0]
 80025ea:	bd38      	pop	{r3, r4, r5, pc}
 80025ec:	200000dc 	.word	0x200000dc

080025f0 <__malloc_lock>:
 80025f0:	4801      	ldr	r0, [pc, #4]	; (80025f8 <__malloc_lock+0x8>)
 80025f2:	f000 b811 	b.w	8002618 <__retarget_lock_acquire_recursive>
 80025f6:	bf00      	nop
 80025f8:	200000e4 	.word	0x200000e4

080025fc <__malloc_unlock>:
 80025fc:	4801      	ldr	r0, [pc, #4]	; (8002604 <__malloc_unlock+0x8>)
 80025fe:	f000 b80c 	b.w	800261a <__retarget_lock_release_recursive>
 8002602:	bf00      	nop
 8002604:	200000e4 	.word	0x200000e4

08002608 <_malloc_usable_size_r>:
 8002608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800260c:	1f18      	subs	r0, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	bfbc      	itt	lt
 8002612:	580b      	ldrlt	r3, [r1, r0]
 8002614:	18c0      	addlt	r0, r0, r3
 8002616:	4770      	bx	lr

08002618 <__retarget_lock_acquire_recursive>:
 8002618:	4770      	bx	lr

0800261a <__retarget_lock_release_recursive>:
 800261a:	4770      	bx	lr

0800261c <_init>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	bf00      	nop
 8002620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002622:	bc08      	pop	{r3}
 8002624:	469e      	mov	lr, r3
 8002626:	4770      	bx	lr

08002628 <_fini>:
 8002628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262a:	bf00      	nop
 800262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262e:	bc08      	pop	{r3}
 8002630:	469e      	mov	lr, r3
 8002632:	4770      	bx	lr
