
weather_station2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002110  08002110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021d0  080021d0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080021d0  080021d0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021d0  080021d0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021d0  080021d0  000121d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021d4  080021d4  000121d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080021d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000006c  08002244  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08002244  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e8b  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000da9  00000000  00000000  00023f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00024cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000168  00000000  00000000  00024ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f721  00000000  00000000  00025028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002da7  00000000  00000000  00034749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000547a4  00000000  00000000  000374f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008bc94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001108  00000000  00000000  0008bce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080020f8 	.word	0x080020f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080020f8 	.word	0x080020f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <calculate_SYSCFG_values>:
 *  Created on: Nov 29, 2021
 *      Author: toni
 */
#include "EXTI_lib.h"

static void calculate_SYSCFG_values(uint8_t pin_num, uint8_t *buf) {
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	71fb      	strb	r3, [r7, #7]

	uint8_t SYSCFG_num = pin_num / 4;
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	089b      	lsrs	r3, r3, #2
 80002a0:	73fb      	strb	r3, [r7, #15]
	uint8_t SYSCFG_pos = pin_num % 4 * 4;
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 0303 	and.w	r3, r3, #3
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	73bb      	strb	r3, [r7, #14]

	buf[0] = SYSCFG_num;
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	7bfa      	ldrb	r2, [r7, #15]
 80002b2:	701a      	strb	r2, [r3, #0]
	buf[1] = SYSCFG_pos;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	3301      	adds	r3, #1
 80002b8:	7bba      	ldrb	r2, [r7, #14]
 80002ba:	701a      	strb	r2, [r3, #0]

}
 80002bc:	bf00      	nop
 80002be:	3714      	adds	r7, #20
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr

080002c8 <enable_EXTI>:

void enable_EXTI(uint8_t pin_num, uint8_t gpio, uint8_t edge) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
 80002d2:	460b      	mov	r3, r1
 80002d4:	71bb      	strb	r3, [r7, #6]
 80002d6:	4613      	mov	r3, r2
 80002d8:	717b      	strb	r3, [r7, #5]

	//enable correct port from SYSCFG register for EXTI
	uint8_t SYSCFG_values[2];
	calculate_SYSCFG_values(pin_num, SYSCFG_values);
 80002da:	f107 020c 	add.w	r2, r7, #12
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	4611      	mov	r1, r2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ffd4 	bl	8000290 <calculate_SYSCFG_values>

	SYSCFG->EXTICR[SYSCFG_values[0]] |= (gpio << SYSCFG_values[1]);
 80002e8:	4a25      	ldr	r2, [pc, #148]	; (8000380 <enable_EXTI+0xb8>)
 80002ea:	7b3b      	ldrb	r3, [r7, #12]
 80002ec:	3302      	adds	r3, #2
 80002ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f2:	79ba      	ldrb	r2, [r7, #6]
 80002f4:	7b79      	ldrb	r1, [r7, #13]
 80002f6:	408a      	lsls	r2, r1
 80002f8:	4921      	ldr	r1, [pc, #132]	; (8000380 <enable_EXTI+0xb8>)
 80002fa:	7b38      	ldrb	r0, [r7, #12]
 80002fc:	431a      	orrs	r2, r3
 80002fe:	1c83      	adds	r3, r0, #2
 8000300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	switch (gpio) {
 8000304:	79bb      	ldrb	r3, [r7, #6]
 8000306:	2b02      	cmp	r3, #2
 8000308:	d006      	beq.n	8000318 <enable_EXTI+0x50>
 800030a:	2b02      	cmp	r3, #2
 800030c:	dc2b      	bgt.n	8000366 <enable_EXTI+0x9e>
 800030e:	2b00      	cmp	r3, #0
 8000310:	d015      	beq.n	800033e <enable_EXTI+0x76>
 8000312:	2b01      	cmp	r3, #1
 8000314:	d01d      	beq.n	8000352 <enable_EXTI+0x8a>
 8000316:	e026      	b.n	8000366 <enable_EXTI+0x9e>
	case EXTI_REFE:
		EXTI->FTSR |= 1u << pin_num;
 8000318:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <enable_EXTI+0xbc>)
 800031a:	68da      	ldr	r2, [r3, #12]
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	2101      	movs	r1, #1
 8000320:	fa01 f303 	lsl.w	r3, r1, r3
 8000324:	4917      	ldr	r1, [pc, #92]	; (8000384 <enable_EXTI+0xbc>)
 8000326:	4313      	orrs	r3, r2
 8000328:	60cb      	str	r3, [r1, #12]
		EXTI->RTSR |= 1u << pin_num;
 800032a:	4b16      	ldr	r3, [pc, #88]	; (8000384 <enable_EXTI+0xbc>)
 800032c:	689a      	ldr	r2, [r3, #8]
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	2101      	movs	r1, #1
 8000332:	fa01 f303 	lsl.w	r3, r1, r3
 8000336:	4913      	ldr	r1, [pc, #76]	; (8000384 <enable_EXTI+0xbc>)
 8000338:	4313      	orrs	r3, r2
 800033a:	608b      	str	r3, [r1, #8]
		break;
 800033c:	e013      	b.n	8000366 <enable_EXTI+0x9e>

	case EXTI_RE:
		EXTI->FTSR |= 1u << pin_num;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <enable_EXTI+0xbc>)
 8000340:	68da      	ldr	r2, [r3, #12]
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	2101      	movs	r1, #1
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	490e      	ldr	r1, [pc, #56]	; (8000384 <enable_EXTI+0xbc>)
 800034c:	4313      	orrs	r3, r2
 800034e:	60cb      	str	r3, [r1, #12]
		break;
 8000350:	e009      	b.n	8000366 <enable_EXTI+0x9e>

	case EXTI_FE:
		EXTI->RTSR |= 1u << pin_num;
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <enable_EXTI+0xbc>)
 8000354:	689a      	ldr	r2, [r3, #8]
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	2101      	movs	r1, #1
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	4909      	ldr	r1, [pc, #36]	; (8000384 <enable_EXTI+0xbc>)
 8000360:	4313      	orrs	r3, r2
 8000362:	608b      	str	r3, [r1, #8]
		break;
 8000364:	bf00      	nop
	}

	EXTI->IMR |= 1u << pin_num;
 8000366:	4b07      	ldr	r3, [pc, #28]	; (8000384 <enable_EXTI+0xbc>)
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	2101      	movs	r1, #1
 800036e:	fa01 f303 	lsl.w	r3, r1, r3
 8000372:	4904      	ldr	r1, [pc, #16]	; (8000384 <enable_EXTI+0xbc>)
 8000374:	4313      	orrs	r3, r2
 8000376:	600b      	str	r3, [r1, #0]

}
 8000378:	bf00      	nop
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40013800 	.word	0x40013800
 8000384:	40013c00 	.word	0x40013c00

08000388 <enable_GPIOx_clock>:
#include "GPIO_Lib.h"

static void enable_GPIOx_clock(GPIO_TypeDef *gpio) {
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]

	if (gpio == GPIOA) {
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a23      	ldr	r2, [pc, #140]	; (8000420 <enable_GPIOx_clock+0x98>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <enable_GPIOx_clock+0x1e>

		RCC->AHB1ENR |= GPIOA_CLOCK_EN;
 8000398:	4b22      	ldr	r3, [pc, #136]	; (8000424 <enable_GPIOx_clock+0x9c>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a21      	ldr	r2, [pc, #132]	; (8000424 <enable_GPIOx_clock+0x9c>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30

	} else if (gpio == GPIOH) {

		RCC->AHB1ENR |= GPIOH_CLOCK_EN;
	}
}
 80003a4:	e035      	b.n	8000412 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOB) {
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a1f      	ldr	r2, [pc, #124]	; (8000428 <enable_GPIOx_clock+0xa0>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <enable_GPIOx_clock+0x34>
		RCC->AHB1ENR |= GPIOB_CLOCK_EN;
 80003ae:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <enable_GPIOx_clock+0x9c>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a1c      	ldr	r2, [pc, #112]	; (8000424 <enable_GPIOx_clock+0x9c>)
 80003b4:	f043 0302 	orr.w	r3, r3, #2
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ba:	e02a      	b.n	8000412 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOC) {
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a1b      	ldr	r2, [pc, #108]	; (800042c <enable_GPIOx_clock+0xa4>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <enable_GPIOx_clock+0x4a>
		RCC->AHB1ENR |= GPIOC_CLOCK_EN;
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <enable_GPIOx_clock+0x9c>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a16      	ldr	r2, [pc, #88]	; (8000424 <enable_GPIOx_clock+0x9c>)
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d0:	e01f      	b.n	8000412 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOD) {
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a16      	ldr	r2, [pc, #88]	; (8000430 <enable_GPIOx_clock+0xa8>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <enable_GPIOx_clock+0x60>
		RCC->AHB1ENR |= GPIOD_CLOCK_EN;
 80003da:	4b12      	ldr	r3, [pc, #72]	; (8000424 <enable_GPIOx_clock+0x9c>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a11      	ldr	r2, [pc, #68]	; (8000424 <enable_GPIOx_clock+0x9c>)
 80003e0:	f043 0308 	orr.w	r3, r3, #8
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e6:	e014      	b.n	8000412 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOE) {
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a12      	ldr	r2, [pc, #72]	; (8000434 <enable_GPIOx_clock+0xac>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <enable_GPIOx_clock+0x76>
		RCC->AHB1ENR |= GPIOE_CLOCK_EN;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <enable_GPIOx_clock+0x9c>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <enable_GPIOx_clock+0x9c>)
 80003f6:	f043 0310 	orr.w	r3, r3, #16
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fc:	e009      	b.n	8000412 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOH) {
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <enable_GPIOx_clock+0xb0>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d105      	bne.n	8000412 <enable_GPIOx_clock+0x8a>
		RCC->AHB1ENR |= GPIOH_CLOCK_EN;
 8000406:	4b07      	ldr	r3, [pc, #28]	; (8000424 <enable_GPIOx_clock+0x9c>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a06      	ldr	r2, [pc, #24]	; (8000424 <enable_GPIOx_clock+0x9c>)
 800040c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40020000 	.word	0x40020000
 8000424:	40023800 	.word	0x40023800
 8000428:	40020400 	.word	0x40020400
 800042c:	40020800 	.word	0x40020800
 8000430:	40020c00 	.word	0x40020c00
 8000434:	40021000 	.word	0x40021000
 8000438:	40021c00 	.word	0x40021c00

0800043c <init_pin>:

void init_pin(pin_type *pin, GPIO_TypeDef *_gpio, uint8_t _pin_num,
		uint8_t _mode) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	4611      	mov	r1, r2
 8000448:	461a      	mov	r2, r3
 800044a:	460b      	mov	r3, r1
 800044c:	71fb      	strb	r3, [r7, #7]
 800044e:	4613      	mov	r3, r2
 8000450:	71bb      	strb	r3, [r7, #6]
	pin->gpio = _gpio;
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	68ba      	ldr	r2, [r7, #8]
 8000456:	601a      	str	r2, [r3, #0]
	pin->pin_num = _pin_num;
 8000458:	79fa      	ldrb	r2, [r7, #7]
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	605a      	str	r2, [r3, #4]

	enable_GPIOx_clock(_gpio);
 800045e:	68b8      	ldr	r0, [r7, #8]
 8000460:	f7ff ff92 	bl	8000388 <enable_GPIOx_clock>

	if (_mode < 3) {
 8000464:	79bb      	ldrb	r3, [r7, #6]
 8000466:	2b02      	cmp	r3, #2
 8000468:	d805      	bhi.n	8000476 <init_pin+0x3a>
		set_input(pin, _mode);
 800046a:	79bb      	ldrb	r3, [r7, #6]
 800046c:	4619      	mov	r1, r3
 800046e:	68f8      	ldr	r0, [r7, #12]
 8000470:	f000 f80a 	bl	8000488 <set_input>
	} else {
		set_output(pin, _mode);
	}

}
 8000474:	e004      	b.n	8000480 <init_pin+0x44>
		set_output(pin, _mode);
 8000476:	79bb      	ldrb	r3, [r7, #6]
 8000478:	4619      	mov	r1, r3
 800047a:	68f8      	ldr	r0, [r7, #12]
 800047c:	f000 f856 	bl	800052c <set_output>
}
 8000480:	bf00      	nop
 8000482:	3710      	adds	r7, #16
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <set_input>:

void set_input(pin_type *pin, uint8_t mode) {
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	460b      	mov	r3, r1
 8000492:	70fb      	strb	r3, [r7, #3]
	pin->gpio->MODER &= ~(3u << ((pin->pin_num * 2)));
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	6819      	ldr	r1, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	2203      	movs	r2, #3
 80004a2:	fa02 f303 	lsl.w	r3, r2, r3
 80004a6:	43da      	mvns	r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	400a      	ands	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
	pin->gpio->PUPDR &= ~(3u << ((pin->pin_num * 2)));
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	68d9      	ldr	r1, [r3, #12]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	2203      	movs	r2, #3
 80004be:	fa02 f303 	lsl.w	r3, r2, r3
 80004c2:	43da      	mvns	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	400a      	ands	r2, r1
 80004ca:	60da      	str	r2, [r3, #12]

	switch (mode) {
 80004cc:	78fb      	ldrb	r3, [r7, #3]
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d015      	beq.n	80004fe <set_input+0x76>
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	dc21      	bgt.n	800051a <set_input+0x92>
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d021      	beq.n	800051e <set_input+0x96>
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d000      	beq.n	80004e0 <set_input+0x58>

	case INPUT_PD:
		pin->gpio->PUPDR |= (PD << ((pin->pin_num * 2)));

	default:
		break;
 80004de:	e01c      	b.n	800051a <set_input+0x92>
		pin->gpio->PUPDR |= (PU << ((pin->pin_num * 2)));
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	68da      	ldr	r2, [r3, #12]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	2101      	movs	r1, #1
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	4619      	mov	r1, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	430a      	orrs	r2, r1
 80004fa:	60da      	str	r2, [r3, #12]
		break;
 80004fc:	e010      	b.n	8000520 <set_input+0x98>
		pin->gpio->PUPDR |= (PD << ((pin->pin_num * 2)));
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	68da      	ldr	r2, [r3, #12]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	2102      	movs	r1, #2
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	4619      	mov	r1, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	430a      	orrs	r2, r1
 8000518:	60da      	str	r2, [r3, #12]
		break;
 800051a:	bf00      	nop
 800051c:	e000      	b.n	8000520 <set_input+0x98>
		break;
 800051e:	bf00      	nop

	}

}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <set_output>:

void set_output(pin_type *pin, uint8_t mode) {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]
	pin->gpio->MODER &= ~(3u << ((pin->pin_num * 2)));
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	6819      	ldr	r1, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	2203      	movs	r2, #3
 8000546:	fa02 f303 	lsl.w	r3, r2, r3
 800054a:	43da      	mvns	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	400a      	ands	r2, r1
 8000552:	601a      	str	r2, [r3, #0]
	pin->gpio->MODER |= output << ((pin->pin_num * 2));
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	2101      	movs	r1, #1
 8000562:	fa01 f303 	lsl.w	r3, r1, r3
 8000566:	4619      	mov	r1, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	430a      	orrs	r2, r1
 800056e:	601a      	str	r2, [r3, #0]

	switch (mode) {
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	2b03      	cmp	r3, #3
 8000574:	d010      	beq.n	8000598 <set_output+0x6c>
 8000576:	2b04      	cmp	r3, #4
 8000578:	d000      	beq.n	800057c <set_output+0x50>
	case OUTPUT_OD:
		pin->gpio->OTYPER |= (OD << (pin->pin_num));
		break;

	default:
		break;
 800057a:	e00e      	b.n	800059a <set_output+0x6e>
		pin->gpio->OTYPER |= (OD << (pin->pin_num));
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	685a      	ldr	r2, [r3, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	2101      	movs	r1, #1
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	4619      	mov	r1, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	430a      	orrs	r2, r1
 8000594:	605a      	str	r2, [r3, #4]
		break;
 8000596:	e000      	b.n	800059a <set_output+0x6e>
		break;
 8000598:	bf00      	nop
	}

}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <write_pin>:

pin_state write_pin(pin_type *pin, pin_state state) {
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	460b      	mov	r3, r1
 80005b0:	70fb      	strb	r3, [r7, #3]
	if (state == HIGH) {
 80005b2:	78fb      	ldrb	r3, [r7, #3]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d10b      	bne.n	80005d0 <write_pin+0x2a>
		pin->gpio->ODR |= (1u << pin->pin_num);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6959      	ldr	r1, [r3, #20]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	2201      	movs	r2, #1
 80005c4:	409a      	lsls	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	430a      	orrs	r2, r1
 80005cc:	615a      	str	r2, [r3, #20]
 80005ce:	e00c      	b.n	80005ea <write_pin+0x44>
	} else {
		pin->gpio->ODR &= ~(1u << pin->pin_num);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	6959      	ldr	r1, [r3, #20]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	2201      	movs	r2, #1
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	43da      	mvns	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	400a      	ands	r2, r1
 80005e8:	615a      	str	r2, [r3, #20]
	}

	return state;
 80005ea:	78fb      	ldrb	r3, [r7, #3]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <read_pin>:

pin_state read_pin(pin_type *pin) {
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	uint32_t state = (pin->gpio->IDR >> pin->pin_num) & 1u;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	691a      	ldr	r2, [r3, #16]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	fa22 f303 	lsr.w	r3, r2, r3
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60fb      	str	r3, [r7, #12]

	if (state == 1) {
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d101      	bne.n	800061e <read_pin+0x26>
		return HIGH;
 800061a:	2301      	movs	r3, #1
 800061c:	e000      	b.n	8000620 <read_pin+0x28>
	}

	return LOW;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <toggle_pin>:
pin_state toggle_pin(pin_type *pin) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	pin->gpio->ODR ^= (1u << pin->pin_num);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	6959      	ldr	r1, [r3, #20]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	2201      	movs	r2, #1
 8000640:	409a      	lsls	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	404a      	eors	r2, r1
 8000648:	615a      	str	r2, [r3, #20]

	return read_pin(pin);
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f7ff ffd4 	bl	80005f8 <read_pin>
 8000650:	4603      	mov	r3, r0
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <calculate_ISER_values>:
#include "NVIC_lib.h"
#include "stm32f4xx.h"

static void calculate_ISER_values(uint8_t IRQn, uint8_t *buf) {
 800065a:	b480      	push	{r7}
 800065c:	b085      	sub	sp, #20
 800065e:	af00      	add	r7, sp, #0
 8000660:	4603      	mov	r3, r0
 8000662:	6039      	str	r1, [r7, #0]
 8000664:	71fb      	strb	r3, [r7, #7]

	uint8_t ISER_num = IRQn / 32;
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	095b      	lsrs	r3, r3, #5
 800066a:	73fb      	strb	r3, [r7, #15]
	uint8_t ISER_pos = IRQn % 32;
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	f003 031f 	and.w	r3, r3, #31
 8000672:	73bb      	strb	r3, [r7, #14]

	buf[0] = ISER_num;
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	7bfa      	ldrb	r2, [r7, #15]
 8000678:	701a      	strb	r2, [r3, #0]
	buf[1] = ISER_pos;
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	7bba      	ldrb	r2, [r7, #14]
 8000680:	701a      	strb	r2, [r3, #0]

}
 8000682:	bf00      	nop
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
	...

08000690 <enable_IR>:

void enable_IR(uint8_t IRQn) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]

	uint8_t ISER_values[2];
	calculate_ISER_values(IRQn, ISER_values);
 800069a:	f107 020c 	add.w	r2, r7, #12
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ffd9 	bl	800065a <calculate_ISER_values>

	NVIC->ISER[ISER_values[0]] |= 1u << ISER_values[1];
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <enable_IR+0x3c>)
 80006aa:	7b3a      	ldrb	r2, [r7, #12]
 80006ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006b0:	7b7b      	ldrb	r3, [r7, #13]
 80006b2:	4619      	mov	r1, r3
 80006b4:	2301      	movs	r3, #1
 80006b6:	408b      	lsls	r3, r1
 80006b8:	4904      	ldr	r1, [pc, #16]	; (80006cc <enable_IR+0x3c>)
 80006ba:	7b38      	ldrb	r0, [r7, #12]
 80006bc:	4313      	orrs	r3, r2
 80006be:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <_delay>:
#include <delay_lib.h>
#include "GPIO_Lib.h"

static void _delay(uint32_t s, uint32_t unit, uint8_t IR_type) {
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	4613      	mov	r3, r2
 80006dc:	71fb      	strb	r3, [r7, #7]

	SysTick->CTRL = 0;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <_delay+0x54>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <_delay+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]

	SysTick->LOAD |= s * unit - 1;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <_delay+0x54>)
 80006ec:	685a      	ldr	r2, [r3, #4]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	68b9      	ldr	r1, [r7, #8]
 80006f2:	fb01 f303 	mul.w	r3, r1, r3
 80006f6:	3b01      	subs	r3, #1
 80006f8:	490a      	ldr	r1, [pc, #40]	; (8000724 <_delay+0x54>)
 80006fa:	4313      	orrs	r3, r2
 80006fc:	604b      	str	r3, [r1, #4]
	SysTick->CTRL |= IR_type;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <_delay+0x54>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4907      	ldr	r1, [pc, #28]	; (8000724 <_delay+0x54>)
 8000706:	4313      	orrs	r3, r2
 8000708:	600b      	str	r3, [r1, #0]
	SysTick->CTRL |= 1u;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <_delay+0x54>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a05      	ldr	r2, [pc, #20]	; (8000724 <_delay+0x54>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6013      	str	r3, [r2, #0]

}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e010 	.word	0xe000e010

08000728 <delay_IR>:

void delay_micros(uint32_t micros) {
	_delay(micros, MICROS, POLLING);
}

void delay_IR(uint32_t ms) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	_delay(ms, MILLIS, IR);
 8000730:	2206      	movs	r2, #6
 8000732:	f24a 4110 	movw	r1, #42000	; 0xa410
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ffca 	bl	80006d0 <_delay>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <delay_micros_IR>:

void delay_micros_IR(uint32_t micros) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	_delay(micros, MICROS, IR);
 800074c:	2206      	movs	r2, #6
 800074e:	212a      	movs	r1, #42	; 0x2a
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ffbd 	bl	80006d0 <_delay>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <enable_data_pin_IT>:
#include <stdio.h>

uint16_t temperature_temp;
uint16_t humidity_temp;

static void enable_data_pin_IT(void) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
	EXTI->FTSR |= 1u << 10;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <enable_data_pin_IT+0x4c>)
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	4a10      	ldr	r2, [pc, #64]	; (80007ac <enable_data_pin_IT+0x4c>)
 800076c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000770:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= 1u << 10;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <enable_data_pin_IT+0x4c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <enable_data_pin_IT+0x4c>)
 8000778:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800077c:	6013      	str	r3, [r2, #0]

	uint8_t ISER_num = EXTI15_10_IRQn / 32;
 800077e:	2301      	movs	r3, #1
 8000780:	71fb      	strb	r3, [r7, #7]
	uint8_t ISER_pos = EXTI15_10_IRQn % 32;
 8000782:	2308      	movs	r3, #8
 8000784:	71bb      	strb	r3, [r7, #6]

	NVIC->ISER[ISER_num] |= 1u << ISER_pos;
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <enable_data_pin_IT+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	2201      	movs	r2, #1
 8000792:	409a      	lsls	r2, r3
 8000794:	4806      	ldr	r0, [pc, #24]	; (80007b0 <enable_data_pin_IT+0x50>)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	430a      	orrs	r2, r1
 800079a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40013c00 	.word	0x40013c00
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <disable_data_pin_IT>:

static void disable_data_pin_IT(void) {
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
	EXTI->FTSR &= ~(1u << 10);
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <disable_data_pin_IT+0x50>)
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	4a11      	ldr	r2, [pc, #68]	; (8000804 <disable_data_pin_IT+0x50>)
 80007c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007c4:	60d3      	str	r3, [r2, #12]
	EXTI->IMR &= ~(1u << 10);
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <disable_data_pin_IT+0x50>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <disable_data_pin_IT+0x50>)
 80007cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007d0:	6013      	str	r3, [r2, #0]

	uint8_t ISER_num = EXTI15_10_IRQn / 32;
 80007d2:	2301      	movs	r3, #1
 80007d4:	71fb      	strb	r3, [r7, #7]
	uint8_t ISER_pos = EXTI15_10_IRQn % 32;
 80007d6:	2308      	movs	r3, #8
 80007d8:	71bb      	strb	r3, [r7, #6]

	NVIC->ISER[ISER_num] &= ~(1u << ISER_pos);
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <disable_data_pin_IT+0x54>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	2201      	movs	r2, #1
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	4806      	ldr	r0, [pc, #24]	; (8000808 <disable_data_pin_IT+0x54>)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	400a      	ands	r2, r1
 80007f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40013c00 	.word	0x40013c00
 8000808:	e000e100 	.word	0xe000e100

0800080c <read_bit>:

static void read_bit(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
	pin_state value = read_pin(&dht22);
 8000812:	482c      	ldr	r0, [pc, #176]	; (80008c4 <read_bit+0xb8>)
 8000814:	f7ff fef0 	bl	80005f8 <read_pin>
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]

	if (bits_read == 32) {
 800081c:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <read_bit+0xbc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b20      	cmp	r3, #32
 8000822:	d11d      	bne.n	8000860 <read_bit+0x54>

		disable_data_pin_IT();
 8000824:	f7ff ffc6 	bl	80007b4 <disable_data_pin_IT>

		dht22_data.temperature = temperature_temp;
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <read_bit+0xc0>)
 800082a:	881a      	ldrh	r2, [r3, #0]
 800082c:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <read_bit+0xc4>)
 800082e:	801a      	strh	r2, [r3, #0]
		dht22_data.humidity = humidity_temp;
 8000830:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <read_bit+0xc8>)
 8000832:	881a      	ldrh	r2, [r3, #0]
 8000834:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <read_bit+0xc4>)
 8000836:	805a      	strh	r2, [r3, #2]

		temperature_temp = 0;
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <read_bit+0xc0>)
 800083a:	2200      	movs	r2, #0
 800083c:	801a      	strh	r2, [r3, #0]
		humidity_temp = 0;
 800083e:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <read_bit+0xc8>)
 8000840:	2200      	movs	r2, #0
 8000842:	801a      	strh	r2, [r3, #0]
		bits_read = -1;
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <read_bit+0xbc>)
 8000846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800084a:	601a      	str	r2, [r3, #0]

		dht_status = COOLDOWN;
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <read_bit+0xcc>)
 800084e:	2204      	movs	r2, #4
 8000850:	701a      	strb	r2, [r3, #0]
		application_callback();
 8000852:	f000 f8b3 	bl	80009bc <application_callback>
		delay_IR(1000);
 8000856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085a:	f7ff ff65 	bl	8000728 <delay_IR>
 800085e:	e028      	b.n	80008b2 <read_bit+0xa6>



	} else if (bits_read < 16) {
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <read_bit+0xbc>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b0f      	cmp	r3, #15
 8000866:	dc10      	bgt.n	800088a <read_bit+0x7e>

		humidity_temp |= (value << (15 - bits_read));
 8000868:	79fa      	ldrb	r2, [r7, #7]
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <read_bit+0xbc>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f1c3 030f 	rsb	r3, r3, #15
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <read_bit+0xc8>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	b21b      	sxth	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b21b      	sxth	r3, r3
 8000882:	b29a      	uxth	r2, r3
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <read_bit+0xc8>)
 8000886:	801a      	strh	r2, [r3, #0]
 8000888:	e013      	b.n	80008b2 <read_bit+0xa6>

	} else if (bits_read < 32) {
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <read_bit+0xbc>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b1f      	cmp	r3, #31
 8000890:	dc0f      	bgt.n	80008b2 <read_bit+0xa6>

		temperature_temp |= (value << (31 - bits_read));
 8000892:	79fa      	ldrb	r2, [r7, #7]
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <read_bit+0xbc>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f1c3 031f 	rsb	r3, r3, #31
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <read_bit+0xc0>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	b21b      	sxth	r3, r3
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <read_bit+0xc0>)
 80008b0:	801a      	strh	r2, [r3, #0]

	}

	bits_read++;
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <read_bit+0xbc>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	4a03      	ldr	r2, [pc, #12]	; (80008c8 <read_bit+0xbc>)
 80008ba:	6013      	str	r3, [r2, #0]


}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000150 	.word	0x20000150
 80008c8:	20000148 	.word	0x20000148
 80008cc:	20000142 	.word	0x20000142
 80008d0:	20000144 	.word	0x20000144
 80008d4:	20000140 	.word	0x20000140
 80008d8:	2000014c 	.word	0x2000014c

080008dc <handle_delay_IT>:
void handle_data_pin_IT() {
	delay_micros_IR(35);

}

void handle_delay_IT(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

	if (dht_status == INITIALIZING_1) {
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <handle_delay_IT+0x74>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d10a      	bne.n	80008fe <handle_delay_IT+0x22>

		dht_status = INITIALIZING_2;
 80008e8:	4b19      	ldr	r3, [pc, #100]	; (8000950 <handle_delay_IT+0x74>)
 80008ea:	2203      	movs	r2, #3
 80008ec:	701a      	strb	r2, [r3, #0]

		write_pin(&dht22, HIGH);
 80008ee:	2101      	movs	r1, #1
 80008f0:	4818      	ldr	r0, [pc, #96]	; (8000954 <handle_delay_IT+0x78>)
 80008f2:	f7ff fe58 	bl	80005a6 <write_pin>
		delay_micros_IR(20);
 80008f6:	2014      	movs	r0, #20
 80008f8:	f7ff ff24 	bl	8000744 <delay_micros_IR>

	} else if (dht_status == SENDING_DATA) {
		read_bit();
	}

}
 80008fc:	e026      	b.n	800094c <handle_delay_IT+0x70>
	} else if (dht_status == INITIALIZING_2) {
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <handle_delay_IT+0x74>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b03      	cmp	r3, #3
 8000904:	d10a      	bne.n	800091c <handle_delay_IT+0x40>
		dht_status = SENDING_DATA_INIT;
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <handle_delay_IT+0x74>)
 8000908:	2205      	movs	r2, #5
 800090a:	701a      	strb	r2, [r3, #0]
		set_input(&dht22, INPUT_PU);
 800090c:	2101      	movs	r1, #1
 800090e:	4811      	ldr	r0, [pc, #68]	; (8000954 <handle_delay_IT+0x78>)
 8000910:	f7ff fdba 	bl	8000488 <set_input>
		delay_micros_IR(160);
 8000914:	20a0      	movs	r0, #160	; 0xa0
 8000916:	f7ff ff15 	bl	8000744 <delay_micros_IR>
}
 800091a:	e017      	b.n	800094c <handle_delay_IT+0x70>
	} else if (dht_status == SENDING_DATA_INIT) {
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <handle_delay_IT+0x74>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b05      	cmp	r3, #5
 8000922:	d105      	bne.n	8000930 <handle_delay_IT+0x54>
		dht_status = SENDING_DATA;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <handle_delay_IT+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
		enable_data_pin_IT();
 800092a:	f7ff ff19 	bl	8000760 <enable_data_pin_IT>
}
 800092e:	e00d      	b.n	800094c <handle_delay_IT+0x70>
	} else if (dht_status == COOLDOWN) {
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <handle_delay_IT+0x74>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b04      	cmp	r3, #4
 8000936:	d103      	bne.n	8000940 <handle_delay_IT+0x64>
		dht_status = SLEEPING;
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <handle_delay_IT+0x74>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
}
 800093e:	e005      	b.n	800094c <handle_delay_IT+0x70>
	} else if (dht_status == SENDING_DATA) {
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <handle_delay_IT+0x74>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d101      	bne.n	800094c <handle_delay_IT+0x70>
		read_bit();
 8000948:	f7ff ff60 	bl	800080c <read_bit>
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000014c 	.word	0x2000014c
 8000954:	20000150 	.word	0x20000150

08000958 <init_dht22>:

void init_dht22() {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

	dht_status = SLEEPING;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <init_dht22+0x1c>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]

	init_pin(&dht22, GPIOA, 10, INPUT_PU);
 8000962:	2301      	movs	r3, #1
 8000964:	220a      	movs	r2, #10
 8000966:	4904      	ldr	r1, [pc, #16]	; (8000978 <init_dht22+0x20>)
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <init_dht22+0x24>)
 800096a:	f7ff fd67 	bl	800043c <init_pin>

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000014c 	.word	0x2000014c
 8000978:	40020000 	.word	0x40020000
 800097c:	20000150 	.word	0x20000150

08000980 <SysTick_Handler>:
void system_clock_config(void);

pin_type internal_led_pin;
pin_type external_led;

void SysTick_Handler() {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <SysTick_Handler+0x14>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
	handle_delay_IT();
 800098a:	f7ff ffa7 	bl	80008dc <handle_delay_IT>

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	e000e010 	.word	0xe000e010

08000998 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler() {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

	toggle_pin(&external_led);
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <EXTI15_10_IRQHandler+0x1c>)
 800099e:	f7ff fe45 	bl	800062c <toggle_pin>
	//handle_data_pin_IT();
	EXTI->PR |= 1u << 10;
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <EXTI15_10_IRQHandler+0x20>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <EXTI15_10_IRQHandler+0x20>)
 80009a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ac:	6153      	str	r3, [r2, #20]

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000158 	.word	0x20000158
 80009b8:	40013c00 	.word	0x40013c00

080009bc <application_callback>:

void application_callback() {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	printf("%d\n", (int) dht22_data.temperature);
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <application_callback+0x20>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <application_callback+0x24>)
 80009c8:	f000 f91e 	bl	8000c08 <iprintf>
	printf("%d\n", (int) dht22_data.humidity);
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <application_callback+0x20>)
 80009ce:	885b      	ldrh	r3, [r3, #2]
 80009d0:	4619      	mov	r1, r3
 80009d2:	4803      	ldr	r0, [pc, #12]	; (80009e0 <application_callback+0x24>)
 80009d4:	f000 f918 	bl	8000c08 <iprintf>

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000144 	.word	0x20000144
 80009e0:	08002110 	.word	0x08002110

080009e4 <system_clock_config>:

void system_clock_config(void) {
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

	PWR->CR |= (2u << 14);
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <system_clock_config+0x7c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1c      	ldr	r2, [pc, #112]	; (8000a60 <system_clock_config+0x7c>)
 80009ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f2:	6013      	str	r3, [r2, #0]

	RCC->PLLCFGR |= (1u << 22);
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <system_clock_config+0x80>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	4a1a      	ldr	r2, [pc, #104]	; (8000a64 <system_clock_config+0x80>)
 80009fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009fe:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (1u << 3);
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <system_clock_config+0x80>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <system_clock_config+0x80>)
 8000a06:	f043 0308 	orr.w	r3, r3, #8
 8000a0a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0x54u << 6);
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <system_clock_config+0x80>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4a14      	ldr	r2, [pc, #80]	; (8000a64 <system_clock_config+0x80>)
 8000a12:	f443 53a8 	orr.w	r3, r3, #5376	; 0x1500
 8000a16:	6053      	str	r3, [r2, #4]

	RCC->CFGR |= (4u << 10);
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <system_clock_config+0x80>)
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <system_clock_config+0x80>)
 8000a1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a22:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 2u;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <system_clock_config+0x80>)
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <system_clock_config+0x80>)
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	6093      	str	r3, [r2, #8]

	RCC->CR |= (1u << 18);
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <system_clock_config+0x80>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <system_clock_config+0x80>)
 8000a36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a3a:	6013      	str	r3, [r2, #0]
	RCC->CR |= (1u << 16);
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <system_clock_config+0x80>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <system_clock_config+0x80>)
 8000a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a46:	6013      	str	r3, [r2, #0]
	RCC->CR |= (1u << 24);
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <system_clock_config+0x80>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <system_clock_config+0x80>)
 8000a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40007000 	.word	0x40007000
 8000a64:	40023800 	.word	0x40023800

08000a68 <main>:

int main(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

	initialise_monitor_handles();
 8000a6c:	f001 faca 	bl	8002004 <initialise_monitor_handles>

	printf("hello\n");
 8000a70:	480f      	ldr	r0, [pc, #60]	; (8000ab0 <main+0x48>)
 8000a72:	f000 f94f 	bl	8000d14 <puts>

	system_clock_config();
 8000a76:	f7ff ffb5 	bl	80009e4 <system_clock_config>


	init_pin(&internal_led_pin, GPIOA, 5, OUTPUT_PP);
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	2205      	movs	r2, #5
 8000a7e:	490d      	ldr	r1, [pc, #52]	; (8000ab4 <main+0x4c>)
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <main+0x50>)
 8000a82:	f7ff fcdb 	bl	800043c <init_pin>
	init_pin(&external_led, GPIOA, 0, OUTPUT_PP);
 8000a86:	2303      	movs	r3, #3
 8000a88:	2200      	movs	r2, #0
 8000a8a:	490a      	ldr	r1, [pc, #40]	; (8000ab4 <main+0x4c>)
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <main+0x54>)
 8000a8e:	f7ff fcd5 	bl	800043c <init_pin>


	init_dht22();
 8000a92:	f7ff ff61 	bl	8000958 <init_dht22>


	enable_IR(EXTI15_10_IRQn);
 8000a96:	2028      	movs	r0, #40	; 0x28
 8000a98:	f7ff fdfa 	bl	8000690 <enable_IR>
	enable_EXTI(10, EXTI_GPIOA, EXTI_RE);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	200a      	movs	r0, #10
 8000aa2:	f7ff fc11 	bl	80002c8 <enable_EXTI>

	write_pin(&external_led, HIGH);
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <main+0x54>)
 8000aaa:	f7ff fd7c 	bl	80005a6 <write_pin>

	while (1) {
 8000aae:	e7fe      	b.n	8000aae <main+0x46>
 8000ab0:	08002114 	.word	0x08002114
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	20000160 	.word	0x20000160
 8000abc:	20000158 	.word	0x20000158

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f000 f858 	bl	8000ba4 <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20018000 	.word	0x20018000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	20000088 	.word	0x20000088
 8000b28:	20000178 	.word	0x20000178

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b6c:	4c0b      	ldr	r4, [pc, #44]	; (8000b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b7a:	f7ff ffd7 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f000 f817 	bl	8000bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff ff71 	bl	8000a68 <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b94:	080021d8 	.word	0x080021d8
  ldr r2, =_sbss
 8000b98:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b9c:	20000178 	.word	0x20000178

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <__errno>:
 8000ba4:	4b01      	ldr	r3, [pc, #4]	; (8000bac <__errno+0x8>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000000 	.word	0x20000000

08000bb0 <__libc_init_array>:
 8000bb0:	b570      	push	{r4, r5, r6, lr}
 8000bb2:	4d0d      	ldr	r5, [pc, #52]	; (8000be8 <__libc_init_array+0x38>)
 8000bb4:	4c0d      	ldr	r4, [pc, #52]	; (8000bec <__libc_init_array+0x3c>)
 8000bb6:	1b64      	subs	r4, r4, r5
 8000bb8:	10a4      	asrs	r4, r4, #2
 8000bba:	2600      	movs	r6, #0
 8000bbc:	42a6      	cmp	r6, r4
 8000bbe:	d109      	bne.n	8000bd4 <__libc_init_array+0x24>
 8000bc0:	4d0b      	ldr	r5, [pc, #44]	; (8000bf0 <__libc_init_array+0x40>)
 8000bc2:	4c0c      	ldr	r4, [pc, #48]	; (8000bf4 <__libc_init_array+0x44>)
 8000bc4:	f001 fa98 	bl	80020f8 <_init>
 8000bc8:	1b64      	subs	r4, r4, r5
 8000bca:	10a4      	asrs	r4, r4, #2
 8000bcc:	2600      	movs	r6, #0
 8000bce:	42a6      	cmp	r6, r4
 8000bd0:	d105      	bne.n	8000bde <__libc_init_array+0x2e>
 8000bd2:	bd70      	pop	{r4, r5, r6, pc}
 8000bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bd8:	4798      	blx	r3
 8000bda:	3601      	adds	r6, #1
 8000bdc:	e7ee      	b.n	8000bbc <__libc_init_array+0xc>
 8000bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8000be2:	4798      	blx	r3
 8000be4:	3601      	adds	r6, #1
 8000be6:	e7f2      	b.n	8000bce <__libc_init_array+0x1e>
 8000be8:	080021d0 	.word	0x080021d0
 8000bec:	080021d0 	.word	0x080021d0
 8000bf0:	080021d0 	.word	0x080021d0
 8000bf4:	080021d4 	.word	0x080021d4

08000bf8 <memset>:
 8000bf8:	4402      	add	r2, r0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d100      	bne.n	8000c02 <memset+0xa>
 8000c00:	4770      	bx	lr
 8000c02:	f803 1b01 	strb.w	r1, [r3], #1
 8000c06:	e7f9      	b.n	8000bfc <memset+0x4>

08000c08 <iprintf>:
 8000c08:	b40f      	push	{r0, r1, r2, r3}
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <iprintf+0x2c>)
 8000c0c:	b513      	push	{r0, r1, r4, lr}
 8000c0e:	681c      	ldr	r4, [r3, #0]
 8000c10:	b124      	cbz	r4, 8000c1c <iprintf+0x14>
 8000c12:	69a3      	ldr	r3, [r4, #24]
 8000c14:	b913      	cbnz	r3, 8000c1c <iprintf+0x14>
 8000c16:	4620      	mov	r0, r4
 8000c18:	f000 fa5e 	bl	80010d8 <__sinit>
 8000c1c:	ab05      	add	r3, sp, #20
 8000c1e:	9a04      	ldr	r2, [sp, #16]
 8000c20:	68a1      	ldr	r1, [r4, #8]
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	4620      	mov	r0, r4
 8000c26:	f000 fc2f 	bl	8001488 <_vfiprintf_r>
 8000c2a:	b002      	add	sp, #8
 8000c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c30:	b004      	add	sp, #16
 8000c32:	4770      	bx	lr
 8000c34:	20000000 	.word	0x20000000

08000c38 <_puts_r>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	460e      	mov	r6, r1
 8000c3c:	4605      	mov	r5, r0
 8000c3e:	b118      	cbz	r0, 8000c48 <_puts_r+0x10>
 8000c40:	6983      	ldr	r3, [r0, #24]
 8000c42:	b90b      	cbnz	r3, 8000c48 <_puts_r+0x10>
 8000c44:	f000 fa48 	bl	80010d8 <__sinit>
 8000c48:	69ab      	ldr	r3, [r5, #24]
 8000c4a:	68ac      	ldr	r4, [r5, #8]
 8000c4c:	b913      	cbnz	r3, 8000c54 <_puts_r+0x1c>
 8000c4e:	4628      	mov	r0, r5
 8000c50:	f000 fa42 	bl	80010d8 <__sinit>
 8000c54:	4b2c      	ldr	r3, [pc, #176]	; (8000d08 <_puts_r+0xd0>)
 8000c56:	429c      	cmp	r4, r3
 8000c58:	d120      	bne.n	8000c9c <_puts_r+0x64>
 8000c5a:	686c      	ldr	r4, [r5, #4]
 8000c5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c5e:	07db      	lsls	r3, r3, #31
 8000c60:	d405      	bmi.n	8000c6e <_puts_r+0x36>
 8000c62:	89a3      	ldrh	r3, [r4, #12]
 8000c64:	0598      	lsls	r0, r3, #22
 8000c66:	d402      	bmi.n	8000c6e <_puts_r+0x36>
 8000c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c6a:	f000 fad3 	bl	8001214 <__retarget_lock_acquire_recursive>
 8000c6e:	89a3      	ldrh	r3, [r4, #12]
 8000c70:	0719      	lsls	r1, r3, #28
 8000c72:	d51d      	bpl.n	8000cb0 <_puts_r+0x78>
 8000c74:	6923      	ldr	r3, [r4, #16]
 8000c76:	b1db      	cbz	r3, 8000cb0 <_puts_r+0x78>
 8000c78:	3e01      	subs	r6, #1
 8000c7a:	68a3      	ldr	r3, [r4, #8]
 8000c7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000c80:	3b01      	subs	r3, #1
 8000c82:	60a3      	str	r3, [r4, #8]
 8000c84:	bb39      	cbnz	r1, 8000cd6 <_puts_r+0x9e>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	da38      	bge.n	8000cfc <_puts_r+0xc4>
 8000c8a:	4622      	mov	r2, r4
 8000c8c:	210a      	movs	r1, #10
 8000c8e:	4628      	mov	r0, r5
 8000c90:	f000 f848 	bl	8000d24 <__swbuf_r>
 8000c94:	3001      	adds	r0, #1
 8000c96:	d011      	beq.n	8000cbc <_puts_r+0x84>
 8000c98:	250a      	movs	r5, #10
 8000c9a:	e011      	b.n	8000cc0 <_puts_r+0x88>
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <_puts_r+0xd4>)
 8000c9e:	429c      	cmp	r4, r3
 8000ca0:	d101      	bne.n	8000ca6 <_puts_r+0x6e>
 8000ca2:	68ac      	ldr	r4, [r5, #8]
 8000ca4:	e7da      	b.n	8000c5c <_puts_r+0x24>
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <_puts_r+0xd8>)
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	bf08      	it	eq
 8000cac:	68ec      	ldreq	r4, [r5, #12]
 8000cae:	e7d5      	b.n	8000c5c <_puts_r+0x24>
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	f000 f888 	bl	8000dc8 <__swsetup_r>
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	d0dd      	beq.n	8000c78 <_puts_r+0x40>
 8000cbc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000cc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cc2:	07da      	lsls	r2, r3, #31
 8000cc4:	d405      	bmi.n	8000cd2 <_puts_r+0x9a>
 8000cc6:	89a3      	ldrh	r3, [r4, #12]
 8000cc8:	059b      	lsls	r3, r3, #22
 8000cca:	d402      	bmi.n	8000cd2 <_puts_r+0x9a>
 8000ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cce:	f000 faa2 	bl	8001216 <__retarget_lock_release_recursive>
 8000cd2:	4628      	mov	r0, r5
 8000cd4:	bd70      	pop	{r4, r5, r6, pc}
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	da04      	bge.n	8000ce4 <_puts_r+0xac>
 8000cda:	69a2      	ldr	r2, [r4, #24]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dc06      	bgt.n	8000cee <_puts_r+0xb6>
 8000ce0:	290a      	cmp	r1, #10
 8000ce2:	d004      	beq.n	8000cee <_puts_r+0xb6>
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	6022      	str	r2, [r4, #0]
 8000cea:	7019      	strb	r1, [r3, #0]
 8000cec:	e7c5      	b.n	8000c7a <_puts_r+0x42>
 8000cee:	4622      	mov	r2, r4
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	f000 f817 	bl	8000d24 <__swbuf_r>
 8000cf6:	3001      	adds	r0, #1
 8000cf8:	d1bf      	bne.n	8000c7a <_puts_r+0x42>
 8000cfa:	e7df      	b.n	8000cbc <_puts_r+0x84>
 8000cfc:	6823      	ldr	r3, [r4, #0]
 8000cfe:	250a      	movs	r5, #10
 8000d00:	1c5a      	adds	r2, r3, #1
 8000d02:	6022      	str	r2, [r4, #0]
 8000d04:	701d      	strb	r5, [r3, #0]
 8000d06:	e7db      	b.n	8000cc0 <_puts_r+0x88>
 8000d08:	08002140 	.word	0x08002140
 8000d0c:	08002160 	.word	0x08002160
 8000d10:	08002120 	.word	0x08002120

08000d14 <puts>:
 8000d14:	4b02      	ldr	r3, [pc, #8]	; (8000d20 <puts+0xc>)
 8000d16:	4601      	mov	r1, r0
 8000d18:	6818      	ldr	r0, [r3, #0]
 8000d1a:	f7ff bf8d 	b.w	8000c38 <_puts_r>
 8000d1e:	bf00      	nop
 8000d20:	20000000 	.word	0x20000000

08000d24 <__swbuf_r>:
 8000d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d26:	460e      	mov	r6, r1
 8000d28:	4614      	mov	r4, r2
 8000d2a:	4605      	mov	r5, r0
 8000d2c:	b118      	cbz	r0, 8000d36 <__swbuf_r+0x12>
 8000d2e:	6983      	ldr	r3, [r0, #24]
 8000d30:	b90b      	cbnz	r3, 8000d36 <__swbuf_r+0x12>
 8000d32:	f000 f9d1 	bl	80010d8 <__sinit>
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <__swbuf_r+0x98>)
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	d12b      	bne.n	8000d94 <__swbuf_r+0x70>
 8000d3c:	686c      	ldr	r4, [r5, #4]
 8000d3e:	69a3      	ldr	r3, [r4, #24]
 8000d40:	60a3      	str	r3, [r4, #8]
 8000d42:	89a3      	ldrh	r3, [r4, #12]
 8000d44:	071a      	lsls	r2, r3, #28
 8000d46:	d52f      	bpl.n	8000da8 <__swbuf_r+0x84>
 8000d48:	6923      	ldr	r3, [r4, #16]
 8000d4a:	b36b      	cbz	r3, 8000da8 <__swbuf_r+0x84>
 8000d4c:	6923      	ldr	r3, [r4, #16]
 8000d4e:	6820      	ldr	r0, [r4, #0]
 8000d50:	1ac0      	subs	r0, r0, r3
 8000d52:	6963      	ldr	r3, [r4, #20]
 8000d54:	b2f6      	uxtb	r6, r6
 8000d56:	4283      	cmp	r3, r0
 8000d58:	4637      	mov	r7, r6
 8000d5a:	dc04      	bgt.n	8000d66 <__swbuf_r+0x42>
 8000d5c:	4621      	mov	r1, r4
 8000d5e:	4628      	mov	r0, r5
 8000d60:	f000 f926 	bl	8000fb0 <_fflush_r>
 8000d64:	bb30      	cbnz	r0, 8000db4 <__swbuf_r+0x90>
 8000d66:	68a3      	ldr	r3, [r4, #8]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	60a3      	str	r3, [r4, #8]
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	6022      	str	r2, [r4, #0]
 8000d72:	701e      	strb	r6, [r3, #0]
 8000d74:	6963      	ldr	r3, [r4, #20]
 8000d76:	3001      	adds	r0, #1
 8000d78:	4283      	cmp	r3, r0
 8000d7a:	d004      	beq.n	8000d86 <__swbuf_r+0x62>
 8000d7c:	89a3      	ldrh	r3, [r4, #12]
 8000d7e:	07db      	lsls	r3, r3, #31
 8000d80:	d506      	bpl.n	8000d90 <__swbuf_r+0x6c>
 8000d82:	2e0a      	cmp	r6, #10
 8000d84:	d104      	bne.n	8000d90 <__swbuf_r+0x6c>
 8000d86:	4621      	mov	r1, r4
 8000d88:	4628      	mov	r0, r5
 8000d8a:	f000 f911 	bl	8000fb0 <_fflush_r>
 8000d8e:	b988      	cbnz	r0, 8000db4 <__swbuf_r+0x90>
 8000d90:	4638      	mov	r0, r7
 8000d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <__swbuf_r+0x9c>)
 8000d96:	429c      	cmp	r4, r3
 8000d98:	d101      	bne.n	8000d9e <__swbuf_r+0x7a>
 8000d9a:	68ac      	ldr	r4, [r5, #8]
 8000d9c:	e7cf      	b.n	8000d3e <__swbuf_r+0x1a>
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <__swbuf_r+0xa0>)
 8000da0:	429c      	cmp	r4, r3
 8000da2:	bf08      	it	eq
 8000da4:	68ec      	ldreq	r4, [r5, #12]
 8000da6:	e7ca      	b.n	8000d3e <__swbuf_r+0x1a>
 8000da8:	4621      	mov	r1, r4
 8000daa:	4628      	mov	r0, r5
 8000dac:	f000 f80c 	bl	8000dc8 <__swsetup_r>
 8000db0:	2800      	cmp	r0, #0
 8000db2:	d0cb      	beq.n	8000d4c <__swbuf_r+0x28>
 8000db4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000db8:	e7ea      	b.n	8000d90 <__swbuf_r+0x6c>
 8000dba:	bf00      	nop
 8000dbc:	08002140 	.word	0x08002140
 8000dc0:	08002160 	.word	0x08002160
 8000dc4:	08002120 	.word	0x08002120

08000dc8 <__swsetup_r>:
 8000dc8:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <__swsetup_r+0xcc>)
 8000dca:	b570      	push	{r4, r5, r6, lr}
 8000dcc:	681d      	ldr	r5, [r3, #0]
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460c      	mov	r4, r1
 8000dd2:	b125      	cbz	r5, 8000dde <__swsetup_r+0x16>
 8000dd4:	69ab      	ldr	r3, [r5, #24]
 8000dd6:	b913      	cbnz	r3, 8000dde <__swsetup_r+0x16>
 8000dd8:	4628      	mov	r0, r5
 8000dda:	f000 f97d 	bl	80010d8 <__sinit>
 8000dde:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <__swsetup_r+0xd0>)
 8000de0:	429c      	cmp	r4, r3
 8000de2:	d10f      	bne.n	8000e04 <__swsetup_r+0x3c>
 8000de4:	686c      	ldr	r4, [r5, #4]
 8000de6:	89a3      	ldrh	r3, [r4, #12]
 8000de8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000dec:	0719      	lsls	r1, r3, #28
 8000dee:	d42c      	bmi.n	8000e4a <__swsetup_r+0x82>
 8000df0:	06dd      	lsls	r5, r3, #27
 8000df2:	d411      	bmi.n	8000e18 <__swsetup_r+0x50>
 8000df4:	2309      	movs	r3, #9
 8000df6:	6033      	str	r3, [r6, #0]
 8000df8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000dfc:	81a3      	strh	r3, [r4, #12]
 8000dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e02:	e03e      	b.n	8000e82 <__swsetup_r+0xba>
 8000e04:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <__swsetup_r+0xd4>)
 8000e06:	429c      	cmp	r4, r3
 8000e08:	d101      	bne.n	8000e0e <__swsetup_r+0x46>
 8000e0a:	68ac      	ldr	r4, [r5, #8]
 8000e0c:	e7eb      	b.n	8000de6 <__swsetup_r+0x1e>
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <__swsetup_r+0xd8>)
 8000e10:	429c      	cmp	r4, r3
 8000e12:	bf08      	it	eq
 8000e14:	68ec      	ldreq	r4, [r5, #12]
 8000e16:	e7e6      	b.n	8000de6 <__swsetup_r+0x1e>
 8000e18:	0758      	lsls	r0, r3, #29
 8000e1a:	d512      	bpl.n	8000e42 <__swsetup_r+0x7a>
 8000e1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e1e:	b141      	cbz	r1, 8000e32 <__swsetup_r+0x6a>
 8000e20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d002      	beq.n	8000e2e <__swsetup_r+0x66>
 8000e28:	4630      	mov	r0, r6
 8000e2a:	f000 fa59 	bl	80012e0 <_free_r>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	6363      	str	r3, [r4, #52]	; 0x34
 8000e32:	89a3      	ldrh	r3, [r4, #12]
 8000e34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000e38:	81a3      	strh	r3, [r4, #12]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	6063      	str	r3, [r4, #4]
 8000e3e:	6923      	ldr	r3, [r4, #16]
 8000e40:	6023      	str	r3, [r4, #0]
 8000e42:	89a3      	ldrh	r3, [r4, #12]
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	81a3      	strh	r3, [r4, #12]
 8000e4a:	6923      	ldr	r3, [r4, #16]
 8000e4c:	b94b      	cbnz	r3, 8000e62 <__swsetup_r+0x9a>
 8000e4e:	89a3      	ldrh	r3, [r4, #12]
 8000e50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e58:	d003      	beq.n	8000e62 <__swsetup_r+0x9a>
 8000e5a:	4621      	mov	r1, r4
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	f000 f9ff 	bl	8001260 <__smakebuf_r>
 8000e62:	89a0      	ldrh	r0, [r4, #12]
 8000e64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000e68:	f010 0301 	ands.w	r3, r0, #1
 8000e6c:	d00a      	beq.n	8000e84 <__swsetup_r+0xbc>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60a3      	str	r3, [r4, #8]
 8000e72:	6963      	ldr	r3, [r4, #20]
 8000e74:	425b      	negs	r3, r3
 8000e76:	61a3      	str	r3, [r4, #24]
 8000e78:	6923      	ldr	r3, [r4, #16]
 8000e7a:	b943      	cbnz	r3, 8000e8e <__swsetup_r+0xc6>
 8000e7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000e80:	d1ba      	bne.n	8000df8 <__swsetup_r+0x30>
 8000e82:	bd70      	pop	{r4, r5, r6, pc}
 8000e84:	0781      	lsls	r1, r0, #30
 8000e86:	bf58      	it	pl
 8000e88:	6963      	ldrpl	r3, [r4, #20]
 8000e8a:	60a3      	str	r3, [r4, #8]
 8000e8c:	e7f4      	b.n	8000e78 <__swsetup_r+0xb0>
 8000e8e:	2000      	movs	r0, #0
 8000e90:	e7f7      	b.n	8000e82 <__swsetup_r+0xba>
 8000e92:	bf00      	nop
 8000e94:	20000000 	.word	0x20000000
 8000e98:	08002140 	.word	0x08002140
 8000e9c:	08002160 	.word	0x08002160
 8000ea0:	08002120 	.word	0x08002120

08000ea4 <__sflush_r>:
 8000ea4:	898a      	ldrh	r2, [r1, #12]
 8000ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eaa:	4605      	mov	r5, r0
 8000eac:	0710      	lsls	r0, r2, #28
 8000eae:	460c      	mov	r4, r1
 8000eb0:	d458      	bmi.n	8000f64 <__sflush_r+0xc0>
 8000eb2:	684b      	ldr	r3, [r1, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	dc05      	bgt.n	8000ec4 <__sflush_r+0x20>
 8000eb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	dc02      	bgt.n	8000ec4 <__sflush_r+0x20>
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	d0f9      	beq.n	8000ebe <__sflush_r+0x1a>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000ed0:	682f      	ldr	r7, [r5, #0]
 8000ed2:	602b      	str	r3, [r5, #0]
 8000ed4:	d032      	beq.n	8000f3c <__sflush_r+0x98>
 8000ed6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ed8:	89a3      	ldrh	r3, [r4, #12]
 8000eda:	075a      	lsls	r2, r3, #29
 8000edc:	d505      	bpl.n	8000eea <__sflush_r+0x46>
 8000ede:	6863      	ldr	r3, [r4, #4]
 8000ee0:	1ac0      	subs	r0, r0, r3
 8000ee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ee4:	b10b      	cbz	r3, 8000eea <__sflush_r+0x46>
 8000ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ee8:	1ac0      	subs	r0, r0, r3
 8000eea:	2300      	movs	r3, #0
 8000eec:	4602      	mov	r2, r0
 8000eee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ef0:	6a21      	ldr	r1, [r4, #32]
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	47b0      	blx	r6
 8000ef6:	1c43      	adds	r3, r0, #1
 8000ef8:	89a3      	ldrh	r3, [r4, #12]
 8000efa:	d106      	bne.n	8000f0a <__sflush_r+0x66>
 8000efc:	6829      	ldr	r1, [r5, #0]
 8000efe:	291d      	cmp	r1, #29
 8000f00:	d82c      	bhi.n	8000f5c <__sflush_r+0xb8>
 8000f02:	4a2a      	ldr	r2, [pc, #168]	; (8000fac <__sflush_r+0x108>)
 8000f04:	40ca      	lsrs	r2, r1
 8000f06:	07d6      	lsls	r6, r2, #31
 8000f08:	d528      	bpl.n	8000f5c <__sflush_r+0xb8>
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	6062      	str	r2, [r4, #4]
 8000f0e:	04d9      	lsls	r1, r3, #19
 8000f10:	6922      	ldr	r2, [r4, #16]
 8000f12:	6022      	str	r2, [r4, #0]
 8000f14:	d504      	bpl.n	8000f20 <__sflush_r+0x7c>
 8000f16:	1c42      	adds	r2, r0, #1
 8000f18:	d101      	bne.n	8000f1e <__sflush_r+0x7a>
 8000f1a:	682b      	ldr	r3, [r5, #0]
 8000f1c:	b903      	cbnz	r3, 8000f20 <__sflush_r+0x7c>
 8000f1e:	6560      	str	r0, [r4, #84]	; 0x54
 8000f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f22:	602f      	str	r7, [r5, #0]
 8000f24:	2900      	cmp	r1, #0
 8000f26:	d0ca      	beq.n	8000ebe <__sflush_r+0x1a>
 8000f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d002      	beq.n	8000f36 <__sflush_r+0x92>
 8000f30:	4628      	mov	r0, r5
 8000f32:	f000 f9d5 	bl	80012e0 <_free_r>
 8000f36:	2000      	movs	r0, #0
 8000f38:	6360      	str	r0, [r4, #52]	; 0x34
 8000f3a:	e7c1      	b.n	8000ec0 <__sflush_r+0x1c>
 8000f3c:	6a21      	ldr	r1, [r4, #32]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	4628      	mov	r0, r5
 8000f42:	47b0      	blx	r6
 8000f44:	1c41      	adds	r1, r0, #1
 8000f46:	d1c7      	bne.n	8000ed8 <__sflush_r+0x34>
 8000f48:	682b      	ldr	r3, [r5, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0c4      	beq.n	8000ed8 <__sflush_r+0x34>
 8000f4e:	2b1d      	cmp	r3, #29
 8000f50:	d001      	beq.n	8000f56 <__sflush_r+0xb2>
 8000f52:	2b16      	cmp	r3, #22
 8000f54:	d101      	bne.n	8000f5a <__sflush_r+0xb6>
 8000f56:	602f      	str	r7, [r5, #0]
 8000f58:	e7b1      	b.n	8000ebe <__sflush_r+0x1a>
 8000f5a:	89a3      	ldrh	r3, [r4, #12]
 8000f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f60:	81a3      	strh	r3, [r4, #12]
 8000f62:	e7ad      	b.n	8000ec0 <__sflush_r+0x1c>
 8000f64:	690f      	ldr	r7, [r1, #16]
 8000f66:	2f00      	cmp	r7, #0
 8000f68:	d0a9      	beq.n	8000ebe <__sflush_r+0x1a>
 8000f6a:	0793      	lsls	r3, r2, #30
 8000f6c:	680e      	ldr	r6, [r1, #0]
 8000f6e:	bf08      	it	eq
 8000f70:	694b      	ldreq	r3, [r1, #20]
 8000f72:	600f      	str	r7, [r1, #0]
 8000f74:	bf18      	it	ne
 8000f76:	2300      	movne	r3, #0
 8000f78:	eba6 0807 	sub.w	r8, r6, r7
 8000f7c:	608b      	str	r3, [r1, #8]
 8000f7e:	f1b8 0f00 	cmp.w	r8, #0
 8000f82:	dd9c      	ble.n	8000ebe <__sflush_r+0x1a>
 8000f84:	6a21      	ldr	r1, [r4, #32]
 8000f86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000f88:	4643      	mov	r3, r8
 8000f8a:	463a      	mov	r2, r7
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	47b0      	blx	r6
 8000f90:	2800      	cmp	r0, #0
 8000f92:	dc06      	bgt.n	8000fa2 <__sflush_r+0xfe>
 8000f94:	89a3      	ldrh	r3, [r4, #12]
 8000f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f9a:	81a3      	strh	r3, [r4, #12]
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa0:	e78e      	b.n	8000ec0 <__sflush_r+0x1c>
 8000fa2:	4407      	add	r7, r0
 8000fa4:	eba8 0800 	sub.w	r8, r8, r0
 8000fa8:	e7e9      	b.n	8000f7e <__sflush_r+0xda>
 8000faa:	bf00      	nop
 8000fac:	20400001 	.word	0x20400001

08000fb0 <_fflush_r>:
 8000fb0:	b538      	push	{r3, r4, r5, lr}
 8000fb2:	690b      	ldr	r3, [r1, #16]
 8000fb4:	4605      	mov	r5, r0
 8000fb6:	460c      	mov	r4, r1
 8000fb8:	b913      	cbnz	r3, 8000fc0 <_fflush_r+0x10>
 8000fba:	2500      	movs	r5, #0
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	bd38      	pop	{r3, r4, r5, pc}
 8000fc0:	b118      	cbz	r0, 8000fca <_fflush_r+0x1a>
 8000fc2:	6983      	ldr	r3, [r0, #24]
 8000fc4:	b90b      	cbnz	r3, 8000fca <_fflush_r+0x1a>
 8000fc6:	f000 f887 	bl	80010d8 <__sinit>
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <_fflush_r+0x6c>)
 8000fcc:	429c      	cmp	r4, r3
 8000fce:	d11b      	bne.n	8001008 <_fflush_r+0x58>
 8000fd0:	686c      	ldr	r4, [r5, #4]
 8000fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0ef      	beq.n	8000fba <_fflush_r+0xa>
 8000fda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000fdc:	07d0      	lsls	r0, r2, #31
 8000fde:	d404      	bmi.n	8000fea <_fflush_r+0x3a>
 8000fe0:	0599      	lsls	r1, r3, #22
 8000fe2:	d402      	bmi.n	8000fea <_fflush_r+0x3a>
 8000fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000fe6:	f000 f915 	bl	8001214 <__retarget_lock_acquire_recursive>
 8000fea:	4628      	mov	r0, r5
 8000fec:	4621      	mov	r1, r4
 8000fee:	f7ff ff59 	bl	8000ea4 <__sflush_r>
 8000ff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ff4:	07da      	lsls	r2, r3, #31
 8000ff6:	4605      	mov	r5, r0
 8000ff8:	d4e0      	bmi.n	8000fbc <_fflush_r+0xc>
 8000ffa:	89a3      	ldrh	r3, [r4, #12]
 8000ffc:	059b      	lsls	r3, r3, #22
 8000ffe:	d4dd      	bmi.n	8000fbc <_fflush_r+0xc>
 8001000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001002:	f000 f908 	bl	8001216 <__retarget_lock_release_recursive>
 8001006:	e7d9      	b.n	8000fbc <_fflush_r+0xc>
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <_fflush_r+0x70>)
 800100a:	429c      	cmp	r4, r3
 800100c:	d101      	bne.n	8001012 <_fflush_r+0x62>
 800100e:	68ac      	ldr	r4, [r5, #8]
 8001010:	e7df      	b.n	8000fd2 <_fflush_r+0x22>
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <_fflush_r+0x74>)
 8001014:	429c      	cmp	r4, r3
 8001016:	bf08      	it	eq
 8001018:	68ec      	ldreq	r4, [r5, #12]
 800101a:	e7da      	b.n	8000fd2 <_fflush_r+0x22>
 800101c:	08002140 	.word	0x08002140
 8001020:	08002160 	.word	0x08002160
 8001024:	08002120 	.word	0x08002120

08001028 <std>:
 8001028:	2300      	movs	r3, #0
 800102a:	b510      	push	{r4, lr}
 800102c:	4604      	mov	r4, r0
 800102e:	e9c0 3300 	strd	r3, r3, [r0]
 8001032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001036:	6083      	str	r3, [r0, #8]
 8001038:	8181      	strh	r1, [r0, #12]
 800103a:	6643      	str	r3, [r0, #100]	; 0x64
 800103c:	81c2      	strh	r2, [r0, #14]
 800103e:	6183      	str	r3, [r0, #24]
 8001040:	4619      	mov	r1, r3
 8001042:	2208      	movs	r2, #8
 8001044:	305c      	adds	r0, #92	; 0x5c
 8001046:	f7ff fdd7 	bl	8000bf8 <memset>
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <std+0x38>)
 800104c:	6263      	str	r3, [r4, #36]	; 0x24
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <std+0x3c>)
 8001050:	62a3      	str	r3, [r4, #40]	; 0x28
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <std+0x40>)
 8001054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <std+0x44>)
 8001058:	6224      	str	r4, [r4, #32]
 800105a:	6323      	str	r3, [r4, #48]	; 0x30
 800105c:	bd10      	pop	{r4, pc}
 800105e:	bf00      	nop
 8001060:	08001a31 	.word	0x08001a31
 8001064:	08001a53 	.word	0x08001a53
 8001068:	08001a8b 	.word	0x08001a8b
 800106c:	08001aaf 	.word	0x08001aaf

08001070 <_cleanup_r>:
 8001070:	4901      	ldr	r1, [pc, #4]	; (8001078 <_cleanup_r+0x8>)
 8001072:	f000 b8af 	b.w	80011d4 <_fwalk_reent>
 8001076:	bf00      	nop
 8001078:	08000fb1 	.word	0x08000fb1

0800107c <__sfmoreglue>:
 800107c:	b570      	push	{r4, r5, r6, lr}
 800107e:	1e4a      	subs	r2, r1, #1
 8001080:	2568      	movs	r5, #104	; 0x68
 8001082:	4355      	muls	r5, r2
 8001084:	460e      	mov	r6, r1
 8001086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800108a:	f000 f979 	bl	8001380 <_malloc_r>
 800108e:	4604      	mov	r4, r0
 8001090:	b140      	cbz	r0, 80010a4 <__sfmoreglue+0x28>
 8001092:	2100      	movs	r1, #0
 8001094:	e9c0 1600 	strd	r1, r6, [r0]
 8001098:	300c      	adds	r0, #12
 800109a:	60a0      	str	r0, [r4, #8]
 800109c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80010a0:	f7ff fdaa 	bl	8000bf8 <memset>
 80010a4:	4620      	mov	r0, r4
 80010a6:	bd70      	pop	{r4, r5, r6, pc}

080010a8 <__sfp_lock_acquire>:
 80010a8:	4801      	ldr	r0, [pc, #4]	; (80010b0 <__sfp_lock_acquire+0x8>)
 80010aa:	f000 b8b3 	b.w	8001214 <__retarget_lock_acquire_recursive>
 80010ae:	bf00      	nop
 80010b0:	20000170 	.word	0x20000170

080010b4 <__sfp_lock_release>:
 80010b4:	4801      	ldr	r0, [pc, #4]	; (80010bc <__sfp_lock_release+0x8>)
 80010b6:	f000 b8ae 	b.w	8001216 <__retarget_lock_release_recursive>
 80010ba:	bf00      	nop
 80010bc:	20000170 	.word	0x20000170

080010c0 <__sinit_lock_acquire>:
 80010c0:	4801      	ldr	r0, [pc, #4]	; (80010c8 <__sinit_lock_acquire+0x8>)
 80010c2:	f000 b8a7 	b.w	8001214 <__retarget_lock_acquire_recursive>
 80010c6:	bf00      	nop
 80010c8:	2000016b 	.word	0x2000016b

080010cc <__sinit_lock_release>:
 80010cc:	4801      	ldr	r0, [pc, #4]	; (80010d4 <__sinit_lock_release+0x8>)
 80010ce:	f000 b8a2 	b.w	8001216 <__retarget_lock_release_recursive>
 80010d2:	bf00      	nop
 80010d4:	2000016b 	.word	0x2000016b

080010d8 <__sinit>:
 80010d8:	b510      	push	{r4, lr}
 80010da:	4604      	mov	r4, r0
 80010dc:	f7ff fff0 	bl	80010c0 <__sinit_lock_acquire>
 80010e0:	69a3      	ldr	r3, [r4, #24]
 80010e2:	b11b      	cbz	r3, 80010ec <__sinit+0x14>
 80010e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010e8:	f7ff bff0 	b.w	80010cc <__sinit_lock_release>
 80010ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80010f0:	6523      	str	r3, [r4, #80]	; 0x50
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <__sinit+0x68>)
 80010f4:	4a13      	ldr	r2, [pc, #76]	; (8001144 <__sinit+0x6c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80010fa:	42a3      	cmp	r3, r4
 80010fc:	bf04      	itt	eq
 80010fe:	2301      	moveq	r3, #1
 8001100:	61a3      	streq	r3, [r4, #24]
 8001102:	4620      	mov	r0, r4
 8001104:	f000 f820 	bl	8001148 <__sfp>
 8001108:	6060      	str	r0, [r4, #4]
 800110a:	4620      	mov	r0, r4
 800110c:	f000 f81c 	bl	8001148 <__sfp>
 8001110:	60a0      	str	r0, [r4, #8]
 8001112:	4620      	mov	r0, r4
 8001114:	f000 f818 	bl	8001148 <__sfp>
 8001118:	2200      	movs	r2, #0
 800111a:	60e0      	str	r0, [r4, #12]
 800111c:	2104      	movs	r1, #4
 800111e:	6860      	ldr	r0, [r4, #4]
 8001120:	f7ff ff82 	bl	8001028 <std>
 8001124:	68a0      	ldr	r0, [r4, #8]
 8001126:	2201      	movs	r2, #1
 8001128:	2109      	movs	r1, #9
 800112a:	f7ff ff7d 	bl	8001028 <std>
 800112e:	68e0      	ldr	r0, [r4, #12]
 8001130:	2202      	movs	r2, #2
 8001132:	2112      	movs	r1, #18
 8001134:	f7ff ff78 	bl	8001028 <std>
 8001138:	2301      	movs	r3, #1
 800113a:	61a3      	str	r3, [r4, #24]
 800113c:	e7d2      	b.n	80010e4 <__sinit+0xc>
 800113e:	bf00      	nop
 8001140:	0800211c 	.word	0x0800211c
 8001144:	08001071 	.word	0x08001071

08001148 <__sfp>:
 8001148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114a:	4607      	mov	r7, r0
 800114c:	f7ff ffac 	bl	80010a8 <__sfp_lock_acquire>
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <__sfp+0x84>)
 8001152:	681e      	ldr	r6, [r3, #0]
 8001154:	69b3      	ldr	r3, [r6, #24]
 8001156:	b913      	cbnz	r3, 800115e <__sfp+0x16>
 8001158:	4630      	mov	r0, r6
 800115a:	f7ff ffbd 	bl	80010d8 <__sinit>
 800115e:	3648      	adds	r6, #72	; 0x48
 8001160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001164:	3b01      	subs	r3, #1
 8001166:	d503      	bpl.n	8001170 <__sfp+0x28>
 8001168:	6833      	ldr	r3, [r6, #0]
 800116a:	b30b      	cbz	r3, 80011b0 <__sfp+0x68>
 800116c:	6836      	ldr	r6, [r6, #0]
 800116e:	e7f7      	b.n	8001160 <__sfp+0x18>
 8001170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001174:	b9d5      	cbnz	r5, 80011ac <__sfp+0x64>
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <__sfp+0x88>)
 8001178:	60e3      	str	r3, [r4, #12]
 800117a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800117e:	6665      	str	r5, [r4, #100]	; 0x64
 8001180:	f000 f847 	bl	8001212 <__retarget_lock_init_recursive>
 8001184:	f7ff ff96 	bl	80010b4 <__sfp_lock_release>
 8001188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800118c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001190:	6025      	str	r5, [r4, #0]
 8001192:	61a5      	str	r5, [r4, #24]
 8001194:	2208      	movs	r2, #8
 8001196:	4629      	mov	r1, r5
 8001198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800119c:	f7ff fd2c 	bl	8000bf8 <memset>
 80011a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80011a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80011a8:	4620      	mov	r0, r4
 80011aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ac:	3468      	adds	r4, #104	; 0x68
 80011ae:	e7d9      	b.n	8001164 <__sfp+0x1c>
 80011b0:	2104      	movs	r1, #4
 80011b2:	4638      	mov	r0, r7
 80011b4:	f7ff ff62 	bl	800107c <__sfmoreglue>
 80011b8:	4604      	mov	r4, r0
 80011ba:	6030      	str	r0, [r6, #0]
 80011bc:	2800      	cmp	r0, #0
 80011be:	d1d5      	bne.n	800116c <__sfp+0x24>
 80011c0:	f7ff ff78 	bl	80010b4 <__sfp_lock_release>
 80011c4:	230c      	movs	r3, #12
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	e7ee      	b.n	80011a8 <__sfp+0x60>
 80011ca:	bf00      	nop
 80011cc:	0800211c 	.word	0x0800211c
 80011d0:	ffff0001 	.word	0xffff0001

080011d4 <_fwalk_reent>:
 80011d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011d8:	4606      	mov	r6, r0
 80011da:	4688      	mov	r8, r1
 80011dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80011e0:	2700      	movs	r7, #0
 80011e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80011e6:	f1b9 0901 	subs.w	r9, r9, #1
 80011ea:	d505      	bpl.n	80011f8 <_fwalk_reent+0x24>
 80011ec:	6824      	ldr	r4, [r4, #0]
 80011ee:	2c00      	cmp	r4, #0
 80011f0:	d1f7      	bne.n	80011e2 <_fwalk_reent+0xe>
 80011f2:	4638      	mov	r0, r7
 80011f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011f8:	89ab      	ldrh	r3, [r5, #12]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d907      	bls.n	800120e <_fwalk_reent+0x3a>
 80011fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001202:	3301      	adds	r3, #1
 8001204:	d003      	beq.n	800120e <_fwalk_reent+0x3a>
 8001206:	4629      	mov	r1, r5
 8001208:	4630      	mov	r0, r6
 800120a:	47c0      	blx	r8
 800120c:	4307      	orrs	r7, r0
 800120e:	3568      	adds	r5, #104	; 0x68
 8001210:	e7e9      	b.n	80011e6 <_fwalk_reent+0x12>

08001212 <__retarget_lock_init_recursive>:
 8001212:	4770      	bx	lr

08001214 <__retarget_lock_acquire_recursive>:
 8001214:	4770      	bx	lr

08001216 <__retarget_lock_release_recursive>:
 8001216:	4770      	bx	lr

08001218 <__swhatbuf_r>:
 8001218:	b570      	push	{r4, r5, r6, lr}
 800121a:	460e      	mov	r6, r1
 800121c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001220:	2900      	cmp	r1, #0
 8001222:	b096      	sub	sp, #88	; 0x58
 8001224:	4614      	mov	r4, r2
 8001226:	461d      	mov	r5, r3
 8001228:	da07      	bge.n	800123a <__swhatbuf_r+0x22>
 800122a:	2300      	movs	r3, #0
 800122c:	602b      	str	r3, [r5, #0]
 800122e:	89b3      	ldrh	r3, [r6, #12]
 8001230:	061a      	lsls	r2, r3, #24
 8001232:	d410      	bmi.n	8001256 <__swhatbuf_r+0x3e>
 8001234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001238:	e00e      	b.n	8001258 <__swhatbuf_r+0x40>
 800123a:	466a      	mov	r2, sp
 800123c:	f000 fc5e 	bl	8001afc <_fstat_r>
 8001240:	2800      	cmp	r0, #0
 8001242:	dbf2      	blt.n	800122a <__swhatbuf_r+0x12>
 8001244:	9a01      	ldr	r2, [sp, #4]
 8001246:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800124a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800124e:	425a      	negs	r2, r3
 8001250:	415a      	adcs	r2, r3
 8001252:	602a      	str	r2, [r5, #0]
 8001254:	e7ee      	b.n	8001234 <__swhatbuf_r+0x1c>
 8001256:	2340      	movs	r3, #64	; 0x40
 8001258:	2000      	movs	r0, #0
 800125a:	6023      	str	r3, [r4, #0]
 800125c:	b016      	add	sp, #88	; 0x58
 800125e:	bd70      	pop	{r4, r5, r6, pc}

08001260 <__smakebuf_r>:
 8001260:	898b      	ldrh	r3, [r1, #12]
 8001262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001264:	079d      	lsls	r5, r3, #30
 8001266:	4606      	mov	r6, r0
 8001268:	460c      	mov	r4, r1
 800126a:	d507      	bpl.n	800127c <__smakebuf_r+0x1c>
 800126c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001270:	6023      	str	r3, [r4, #0]
 8001272:	6123      	str	r3, [r4, #16]
 8001274:	2301      	movs	r3, #1
 8001276:	6163      	str	r3, [r4, #20]
 8001278:	b002      	add	sp, #8
 800127a:	bd70      	pop	{r4, r5, r6, pc}
 800127c:	ab01      	add	r3, sp, #4
 800127e:	466a      	mov	r2, sp
 8001280:	f7ff ffca 	bl	8001218 <__swhatbuf_r>
 8001284:	9900      	ldr	r1, [sp, #0]
 8001286:	4605      	mov	r5, r0
 8001288:	4630      	mov	r0, r6
 800128a:	f000 f879 	bl	8001380 <_malloc_r>
 800128e:	b948      	cbnz	r0, 80012a4 <__smakebuf_r+0x44>
 8001290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001294:	059a      	lsls	r2, r3, #22
 8001296:	d4ef      	bmi.n	8001278 <__smakebuf_r+0x18>
 8001298:	f023 0303 	bic.w	r3, r3, #3
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	81a3      	strh	r3, [r4, #12]
 80012a2:	e7e3      	b.n	800126c <__smakebuf_r+0xc>
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <__smakebuf_r+0x7c>)
 80012a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80012a8:	89a3      	ldrh	r3, [r4, #12]
 80012aa:	6020      	str	r0, [r4, #0]
 80012ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b0:	81a3      	strh	r3, [r4, #12]
 80012b2:	9b00      	ldr	r3, [sp, #0]
 80012b4:	6163      	str	r3, [r4, #20]
 80012b6:	9b01      	ldr	r3, [sp, #4]
 80012b8:	6120      	str	r0, [r4, #16]
 80012ba:	b15b      	cbz	r3, 80012d4 <__smakebuf_r+0x74>
 80012bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012c0:	4630      	mov	r0, r6
 80012c2:	f000 fc2d 	bl	8001b20 <_isatty_r>
 80012c6:	b128      	cbz	r0, 80012d4 <__smakebuf_r+0x74>
 80012c8:	89a3      	ldrh	r3, [r4, #12]
 80012ca:	f023 0303 	bic.w	r3, r3, #3
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	81a3      	strh	r3, [r4, #12]
 80012d4:	89a0      	ldrh	r0, [r4, #12]
 80012d6:	4305      	orrs	r5, r0
 80012d8:	81a5      	strh	r5, [r4, #12]
 80012da:	e7cd      	b.n	8001278 <__smakebuf_r+0x18>
 80012dc:	08001071 	.word	0x08001071

080012e0 <_free_r>:
 80012e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012e2:	2900      	cmp	r1, #0
 80012e4:	d048      	beq.n	8001378 <_free_r+0x98>
 80012e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012ea:	9001      	str	r0, [sp, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f1a1 0404 	sub.w	r4, r1, #4
 80012f2:	bfb8      	it	lt
 80012f4:	18e4      	addlt	r4, r4, r3
 80012f6:	f000 fc35 	bl	8001b64 <__malloc_lock>
 80012fa:	4a20      	ldr	r2, [pc, #128]	; (800137c <_free_r+0x9c>)
 80012fc:	9801      	ldr	r0, [sp, #4]
 80012fe:	6813      	ldr	r3, [r2, #0]
 8001300:	4615      	mov	r5, r2
 8001302:	b933      	cbnz	r3, 8001312 <_free_r+0x32>
 8001304:	6063      	str	r3, [r4, #4]
 8001306:	6014      	str	r4, [r2, #0]
 8001308:	b003      	add	sp, #12
 800130a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800130e:	f000 bc2f 	b.w	8001b70 <__malloc_unlock>
 8001312:	42a3      	cmp	r3, r4
 8001314:	d90b      	bls.n	800132e <_free_r+0x4e>
 8001316:	6821      	ldr	r1, [r4, #0]
 8001318:	1862      	adds	r2, r4, r1
 800131a:	4293      	cmp	r3, r2
 800131c:	bf04      	itt	eq
 800131e:	681a      	ldreq	r2, [r3, #0]
 8001320:	685b      	ldreq	r3, [r3, #4]
 8001322:	6063      	str	r3, [r4, #4]
 8001324:	bf04      	itt	eq
 8001326:	1852      	addeq	r2, r2, r1
 8001328:	6022      	streq	r2, [r4, #0]
 800132a:	602c      	str	r4, [r5, #0]
 800132c:	e7ec      	b.n	8001308 <_free_r+0x28>
 800132e:	461a      	mov	r2, r3
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	b10b      	cbz	r3, 8001338 <_free_r+0x58>
 8001334:	42a3      	cmp	r3, r4
 8001336:	d9fa      	bls.n	800132e <_free_r+0x4e>
 8001338:	6811      	ldr	r1, [r2, #0]
 800133a:	1855      	adds	r5, r2, r1
 800133c:	42a5      	cmp	r5, r4
 800133e:	d10b      	bne.n	8001358 <_free_r+0x78>
 8001340:	6824      	ldr	r4, [r4, #0]
 8001342:	4421      	add	r1, r4
 8001344:	1854      	adds	r4, r2, r1
 8001346:	42a3      	cmp	r3, r4
 8001348:	6011      	str	r1, [r2, #0]
 800134a:	d1dd      	bne.n	8001308 <_free_r+0x28>
 800134c:	681c      	ldr	r4, [r3, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	6053      	str	r3, [r2, #4]
 8001352:	4421      	add	r1, r4
 8001354:	6011      	str	r1, [r2, #0]
 8001356:	e7d7      	b.n	8001308 <_free_r+0x28>
 8001358:	d902      	bls.n	8001360 <_free_r+0x80>
 800135a:	230c      	movs	r3, #12
 800135c:	6003      	str	r3, [r0, #0]
 800135e:	e7d3      	b.n	8001308 <_free_r+0x28>
 8001360:	6825      	ldr	r5, [r4, #0]
 8001362:	1961      	adds	r1, r4, r5
 8001364:	428b      	cmp	r3, r1
 8001366:	bf04      	itt	eq
 8001368:	6819      	ldreq	r1, [r3, #0]
 800136a:	685b      	ldreq	r3, [r3, #4]
 800136c:	6063      	str	r3, [r4, #4]
 800136e:	bf04      	itt	eq
 8001370:	1949      	addeq	r1, r1, r5
 8001372:	6021      	streq	r1, [r4, #0]
 8001374:	6054      	str	r4, [r2, #4]
 8001376:	e7c7      	b.n	8001308 <_free_r+0x28>
 8001378:	b003      	add	sp, #12
 800137a:	bd30      	pop	{r4, r5, pc}
 800137c:	2000008c 	.word	0x2000008c

08001380 <_malloc_r>:
 8001380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001382:	1ccd      	adds	r5, r1, #3
 8001384:	f025 0503 	bic.w	r5, r5, #3
 8001388:	3508      	adds	r5, #8
 800138a:	2d0c      	cmp	r5, #12
 800138c:	bf38      	it	cc
 800138e:	250c      	movcc	r5, #12
 8001390:	2d00      	cmp	r5, #0
 8001392:	4606      	mov	r6, r0
 8001394:	db01      	blt.n	800139a <_malloc_r+0x1a>
 8001396:	42a9      	cmp	r1, r5
 8001398:	d903      	bls.n	80013a2 <_malloc_r+0x22>
 800139a:	230c      	movs	r3, #12
 800139c:	6033      	str	r3, [r6, #0]
 800139e:	2000      	movs	r0, #0
 80013a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013a2:	f000 fbdf 	bl	8001b64 <__malloc_lock>
 80013a6:	4921      	ldr	r1, [pc, #132]	; (800142c <_malloc_r+0xac>)
 80013a8:	680a      	ldr	r2, [r1, #0]
 80013aa:	4614      	mov	r4, r2
 80013ac:	b99c      	cbnz	r4, 80013d6 <_malloc_r+0x56>
 80013ae:	4f20      	ldr	r7, [pc, #128]	; (8001430 <_malloc_r+0xb0>)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b923      	cbnz	r3, 80013be <_malloc_r+0x3e>
 80013b4:	4621      	mov	r1, r4
 80013b6:	4630      	mov	r0, r6
 80013b8:	f000 fb2a 	bl	8001a10 <_sbrk_r>
 80013bc:	6038      	str	r0, [r7, #0]
 80013be:	4629      	mov	r1, r5
 80013c0:	4630      	mov	r0, r6
 80013c2:	f000 fb25 	bl	8001a10 <_sbrk_r>
 80013c6:	1c43      	adds	r3, r0, #1
 80013c8:	d123      	bne.n	8001412 <_malloc_r+0x92>
 80013ca:	230c      	movs	r3, #12
 80013cc:	6033      	str	r3, [r6, #0]
 80013ce:	4630      	mov	r0, r6
 80013d0:	f000 fbce 	bl	8001b70 <__malloc_unlock>
 80013d4:	e7e3      	b.n	800139e <_malloc_r+0x1e>
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	1b5b      	subs	r3, r3, r5
 80013da:	d417      	bmi.n	800140c <_malloc_r+0x8c>
 80013dc:	2b0b      	cmp	r3, #11
 80013de:	d903      	bls.n	80013e8 <_malloc_r+0x68>
 80013e0:	6023      	str	r3, [r4, #0]
 80013e2:	441c      	add	r4, r3
 80013e4:	6025      	str	r5, [r4, #0]
 80013e6:	e004      	b.n	80013f2 <_malloc_r+0x72>
 80013e8:	6863      	ldr	r3, [r4, #4]
 80013ea:	42a2      	cmp	r2, r4
 80013ec:	bf0c      	ite	eq
 80013ee:	600b      	streq	r3, [r1, #0]
 80013f0:	6053      	strne	r3, [r2, #4]
 80013f2:	4630      	mov	r0, r6
 80013f4:	f000 fbbc 	bl	8001b70 <__malloc_unlock>
 80013f8:	f104 000b 	add.w	r0, r4, #11
 80013fc:	1d23      	adds	r3, r4, #4
 80013fe:	f020 0007 	bic.w	r0, r0, #7
 8001402:	1ac2      	subs	r2, r0, r3
 8001404:	d0cc      	beq.n	80013a0 <_malloc_r+0x20>
 8001406:	1a1b      	subs	r3, r3, r0
 8001408:	50a3      	str	r3, [r4, r2]
 800140a:	e7c9      	b.n	80013a0 <_malloc_r+0x20>
 800140c:	4622      	mov	r2, r4
 800140e:	6864      	ldr	r4, [r4, #4]
 8001410:	e7cc      	b.n	80013ac <_malloc_r+0x2c>
 8001412:	1cc4      	adds	r4, r0, #3
 8001414:	f024 0403 	bic.w	r4, r4, #3
 8001418:	42a0      	cmp	r0, r4
 800141a:	d0e3      	beq.n	80013e4 <_malloc_r+0x64>
 800141c:	1a21      	subs	r1, r4, r0
 800141e:	4630      	mov	r0, r6
 8001420:	f000 faf6 	bl	8001a10 <_sbrk_r>
 8001424:	3001      	adds	r0, #1
 8001426:	d1dd      	bne.n	80013e4 <_malloc_r+0x64>
 8001428:	e7cf      	b.n	80013ca <_malloc_r+0x4a>
 800142a:	bf00      	nop
 800142c:	2000008c 	.word	0x2000008c
 8001430:	20000090 	.word	0x20000090

08001434 <__sfputc_r>:
 8001434:	6893      	ldr	r3, [r2, #8]
 8001436:	3b01      	subs	r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	b410      	push	{r4}
 800143c:	6093      	str	r3, [r2, #8]
 800143e:	da08      	bge.n	8001452 <__sfputc_r+0x1e>
 8001440:	6994      	ldr	r4, [r2, #24]
 8001442:	42a3      	cmp	r3, r4
 8001444:	db01      	blt.n	800144a <__sfputc_r+0x16>
 8001446:	290a      	cmp	r1, #10
 8001448:	d103      	bne.n	8001452 <__sfputc_r+0x1e>
 800144a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800144e:	f7ff bc69 	b.w	8000d24 <__swbuf_r>
 8001452:	6813      	ldr	r3, [r2, #0]
 8001454:	1c58      	adds	r0, r3, #1
 8001456:	6010      	str	r0, [r2, #0]
 8001458:	7019      	strb	r1, [r3, #0]
 800145a:	4608      	mov	r0, r1
 800145c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001460:	4770      	bx	lr

08001462 <__sfputs_r>:
 8001462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001464:	4606      	mov	r6, r0
 8001466:	460f      	mov	r7, r1
 8001468:	4614      	mov	r4, r2
 800146a:	18d5      	adds	r5, r2, r3
 800146c:	42ac      	cmp	r4, r5
 800146e:	d101      	bne.n	8001474 <__sfputs_r+0x12>
 8001470:	2000      	movs	r0, #0
 8001472:	e007      	b.n	8001484 <__sfputs_r+0x22>
 8001474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001478:	463a      	mov	r2, r7
 800147a:	4630      	mov	r0, r6
 800147c:	f7ff ffda 	bl	8001434 <__sfputc_r>
 8001480:	1c43      	adds	r3, r0, #1
 8001482:	d1f3      	bne.n	800146c <__sfputs_r+0xa>
 8001484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001488 <_vfiprintf_r>:
 8001488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800148c:	460d      	mov	r5, r1
 800148e:	b09d      	sub	sp, #116	; 0x74
 8001490:	4614      	mov	r4, r2
 8001492:	4698      	mov	r8, r3
 8001494:	4606      	mov	r6, r0
 8001496:	b118      	cbz	r0, 80014a0 <_vfiprintf_r+0x18>
 8001498:	6983      	ldr	r3, [r0, #24]
 800149a:	b90b      	cbnz	r3, 80014a0 <_vfiprintf_r+0x18>
 800149c:	f7ff fe1c 	bl	80010d8 <__sinit>
 80014a0:	4b89      	ldr	r3, [pc, #548]	; (80016c8 <_vfiprintf_r+0x240>)
 80014a2:	429d      	cmp	r5, r3
 80014a4:	d11b      	bne.n	80014de <_vfiprintf_r+0x56>
 80014a6:	6875      	ldr	r5, [r6, #4]
 80014a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014aa:	07d9      	lsls	r1, r3, #31
 80014ac:	d405      	bmi.n	80014ba <_vfiprintf_r+0x32>
 80014ae:	89ab      	ldrh	r3, [r5, #12]
 80014b0:	059a      	lsls	r2, r3, #22
 80014b2:	d402      	bmi.n	80014ba <_vfiprintf_r+0x32>
 80014b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80014b6:	f7ff fead 	bl	8001214 <__retarget_lock_acquire_recursive>
 80014ba:	89ab      	ldrh	r3, [r5, #12]
 80014bc:	071b      	lsls	r3, r3, #28
 80014be:	d501      	bpl.n	80014c4 <_vfiprintf_r+0x3c>
 80014c0:	692b      	ldr	r3, [r5, #16]
 80014c2:	b9eb      	cbnz	r3, 8001500 <_vfiprintf_r+0x78>
 80014c4:	4629      	mov	r1, r5
 80014c6:	4630      	mov	r0, r6
 80014c8:	f7ff fc7e 	bl	8000dc8 <__swsetup_r>
 80014cc:	b1c0      	cbz	r0, 8001500 <_vfiprintf_r+0x78>
 80014ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014d0:	07dc      	lsls	r4, r3, #31
 80014d2:	d50e      	bpl.n	80014f2 <_vfiprintf_r+0x6a>
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d8:	b01d      	add	sp, #116	; 0x74
 80014da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014de:	4b7b      	ldr	r3, [pc, #492]	; (80016cc <_vfiprintf_r+0x244>)
 80014e0:	429d      	cmp	r5, r3
 80014e2:	d101      	bne.n	80014e8 <_vfiprintf_r+0x60>
 80014e4:	68b5      	ldr	r5, [r6, #8]
 80014e6:	e7df      	b.n	80014a8 <_vfiprintf_r+0x20>
 80014e8:	4b79      	ldr	r3, [pc, #484]	; (80016d0 <_vfiprintf_r+0x248>)
 80014ea:	429d      	cmp	r5, r3
 80014ec:	bf08      	it	eq
 80014ee:	68f5      	ldreq	r5, [r6, #12]
 80014f0:	e7da      	b.n	80014a8 <_vfiprintf_r+0x20>
 80014f2:	89ab      	ldrh	r3, [r5, #12]
 80014f4:	0598      	lsls	r0, r3, #22
 80014f6:	d4ed      	bmi.n	80014d4 <_vfiprintf_r+0x4c>
 80014f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80014fa:	f7ff fe8c 	bl	8001216 <__retarget_lock_release_recursive>
 80014fe:	e7e9      	b.n	80014d4 <_vfiprintf_r+0x4c>
 8001500:	2300      	movs	r3, #0
 8001502:	9309      	str	r3, [sp, #36]	; 0x24
 8001504:	2320      	movs	r3, #32
 8001506:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800150a:	f8cd 800c 	str.w	r8, [sp, #12]
 800150e:	2330      	movs	r3, #48	; 0x30
 8001510:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80016d4 <_vfiprintf_r+0x24c>
 8001514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001518:	f04f 0901 	mov.w	r9, #1
 800151c:	4623      	mov	r3, r4
 800151e:	469a      	mov	sl, r3
 8001520:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001524:	b10a      	cbz	r2, 800152a <_vfiprintf_r+0xa2>
 8001526:	2a25      	cmp	r2, #37	; 0x25
 8001528:	d1f9      	bne.n	800151e <_vfiprintf_r+0x96>
 800152a:	ebba 0b04 	subs.w	fp, sl, r4
 800152e:	d00b      	beq.n	8001548 <_vfiprintf_r+0xc0>
 8001530:	465b      	mov	r3, fp
 8001532:	4622      	mov	r2, r4
 8001534:	4629      	mov	r1, r5
 8001536:	4630      	mov	r0, r6
 8001538:	f7ff ff93 	bl	8001462 <__sfputs_r>
 800153c:	3001      	adds	r0, #1
 800153e:	f000 80aa 	beq.w	8001696 <_vfiprintf_r+0x20e>
 8001542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001544:	445a      	add	r2, fp
 8001546:	9209      	str	r2, [sp, #36]	; 0x24
 8001548:	f89a 3000 	ldrb.w	r3, [sl]
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80a2 	beq.w	8001696 <_vfiprintf_r+0x20e>
 8001552:	2300      	movs	r3, #0
 8001554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800155c:	f10a 0a01 	add.w	sl, sl, #1
 8001560:	9304      	str	r3, [sp, #16]
 8001562:	9307      	str	r3, [sp, #28]
 8001564:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001568:	931a      	str	r3, [sp, #104]	; 0x68
 800156a:	4654      	mov	r4, sl
 800156c:	2205      	movs	r2, #5
 800156e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001572:	4858      	ldr	r0, [pc, #352]	; (80016d4 <_vfiprintf_r+0x24c>)
 8001574:	f7fe fe34 	bl	80001e0 <memchr>
 8001578:	9a04      	ldr	r2, [sp, #16]
 800157a:	b9d8      	cbnz	r0, 80015b4 <_vfiprintf_r+0x12c>
 800157c:	06d1      	lsls	r1, r2, #27
 800157e:	bf44      	itt	mi
 8001580:	2320      	movmi	r3, #32
 8001582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001586:	0713      	lsls	r3, r2, #28
 8001588:	bf44      	itt	mi
 800158a:	232b      	movmi	r3, #43	; 0x2b
 800158c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001590:	f89a 3000 	ldrb.w	r3, [sl]
 8001594:	2b2a      	cmp	r3, #42	; 0x2a
 8001596:	d015      	beq.n	80015c4 <_vfiprintf_r+0x13c>
 8001598:	9a07      	ldr	r2, [sp, #28]
 800159a:	4654      	mov	r4, sl
 800159c:	2000      	movs	r0, #0
 800159e:	f04f 0c0a 	mov.w	ip, #10
 80015a2:	4621      	mov	r1, r4
 80015a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80015a8:	3b30      	subs	r3, #48	; 0x30
 80015aa:	2b09      	cmp	r3, #9
 80015ac:	d94e      	bls.n	800164c <_vfiprintf_r+0x1c4>
 80015ae:	b1b0      	cbz	r0, 80015de <_vfiprintf_r+0x156>
 80015b0:	9207      	str	r2, [sp, #28]
 80015b2:	e014      	b.n	80015de <_vfiprintf_r+0x156>
 80015b4:	eba0 0308 	sub.w	r3, r0, r8
 80015b8:	fa09 f303 	lsl.w	r3, r9, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	9304      	str	r3, [sp, #16]
 80015c0:	46a2      	mov	sl, r4
 80015c2:	e7d2      	b.n	800156a <_vfiprintf_r+0xe2>
 80015c4:	9b03      	ldr	r3, [sp, #12]
 80015c6:	1d19      	adds	r1, r3, #4
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	9103      	str	r1, [sp, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bfbb      	ittet	lt
 80015d0:	425b      	neglt	r3, r3
 80015d2:	f042 0202 	orrlt.w	r2, r2, #2
 80015d6:	9307      	strge	r3, [sp, #28]
 80015d8:	9307      	strlt	r3, [sp, #28]
 80015da:	bfb8      	it	lt
 80015dc:	9204      	strlt	r2, [sp, #16]
 80015de:	7823      	ldrb	r3, [r4, #0]
 80015e0:	2b2e      	cmp	r3, #46	; 0x2e
 80015e2:	d10c      	bne.n	80015fe <_vfiprintf_r+0x176>
 80015e4:	7863      	ldrb	r3, [r4, #1]
 80015e6:	2b2a      	cmp	r3, #42	; 0x2a
 80015e8:	d135      	bne.n	8001656 <_vfiprintf_r+0x1ce>
 80015ea:	9b03      	ldr	r3, [sp, #12]
 80015ec:	1d1a      	adds	r2, r3, #4
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	9203      	str	r2, [sp, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bfb8      	it	lt
 80015f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80015fa:	3402      	adds	r4, #2
 80015fc:	9305      	str	r3, [sp, #20]
 80015fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80016e4 <_vfiprintf_r+0x25c>
 8001602:	7821      	ldrb	r1, [r4, #0]
 8001604:	2203      	movs	r2, #3
 8001606:	4650      	mov	r0, sl
 8001608:	f7fe fdea 	bl	80001e0 <memchr>
 800160c:	b140      	cbz	r0, 8001620 <_vfiprintf_r+0x198>
 800160e:	2340      	movs	r3, #64	; 0x40
 8001610:	eba0 000a 	sub.w	r0, r0, sl
 8001614:	fa03 f000 	lsl.w	r0, r3, r0
 8001618:	9b04      	ldr	r3, [sp, #16]
 800161a:	4303      	orrs	r3, r0
 800161c:	3401      	adds	r4, #1
 800161e:	9304      	str	r3, [sp, #16]
 8001620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001624:	482c      	ldr	r0, [pc, #176]	; (80016d8 <_vfiprintf_r+0x250>)
 8001626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800162a:	2206      	movs	r2, #6
 800162c:	f7fe fdd8 	bl	80001e0 <memchr>
 8001630:	2800      	cmp	r0, #0
 8001632:	d03f      	beq.n	80016b4 <_vfiprintf_r+0x22c>
 8001634:	4b29      	ldr	r3, [pc, #164]	; (80016dc <_vfiprintf_r+0x254>)
 8001636:	bb1b      	cbnz	r3, 8001680 <_vfiprintf_r+0x1f8>
 8001638:	9b03      	ldr	r3, [sp, #12]
 800163a:	3307      	adds	r3, #7
 800163c:	f023 0307 	bic.w	r3, r3, #7
 8001640:	3308      	adds	r3, #8
 8001642:	9303      	str	r3, [sp, #12]
 8001644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001646:	443b      	add	r3, r7
 8001648:	9309      	str	r3, [sp, #36]	; 0x24
 800164a:	e767      	b.n	800151c <_vfiprintf_r+0x94>
 800164c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001650:	460c      	mov	r4, r1
 8001652:	2001      	movs	r0, #1
 8001654:	e7a5      	b.n	80015a2 <_vfiprintf_r+0x11a>
 8001656:	2300      	movs	r3, #0
 8001658:	3401      	adds	r4, #1
 800165a:	9305      	str	r3, [sp, #20]
 800165c:	4619      	mov	r1, r3
 800165e:	f04f 0c0a 	mov.w	ip, #10
 8001662:	4620      	mov	r0, r4
 8001664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001668:	3a30      	subs	r2, #48	; 0x30
 800166a:	2a09      	cmp	r2, #9
 800166c:	d903      	bls.n	8001676 <_vfiprintf_r+0x1ee>
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0c5      	beq.n	80015fe <_vfiprintf_r+0x176>
 8001672:	9105      	str	r1, [sp, #20]
 8001674:	e7c3      	b.n	80015fe <_vfiprintf_r+0x176>
 8001676:	fb0c 2101 	mla	r1, ip, r1, r2
 800167a:	4604      	mov	r4, r0
 800167c:	2301      	movs	r3, #1
 800167e:	e7f0      	b.n	8001662 <_vfiprintf_r+0x1da>
 8001680:	ab03      	add	r3, sp, #12
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	462a      	mov	r2, r5
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <_vfiprintf_r+0x258>)
 8001688:	a904      	add	r1, sp, #16
 800168a:	4630      	mov	r0, r6
 800168c:	f3af 8000 	nop.w
 8001690:	4607      	mov	r7, r0
 8001692:	1c78      	adds	r0, r7, #1
 8001694:	d1d6      	bne.n	8001644 <_vfiprintf_r+0x1bc>
 8001696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001698:	07d9      	lsls	r1, r3, #31
 800169a:	d405      	bmi.n	80016a8 <_vfiprintf_r+0x220>
 800169c:	89ab      	ldrh	r3, [r5, #12]
 800169e:	059a      	lsls	r2, r3, #22
 80016a0:	d402      	bmi.n	80016a8 <_vfiprintf_r+0x220>
 80016a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016a4:	f7ff fdb7 	bl	8001216 <__retarget_lock_release_recursive>
 80016a8:	89ab      	ldrh	r3, [r5, #12]
 80016aa:	065b      	lsls	r3, r3, #25
 80016ac:	f53f af12 	bmi.w	80014d4 <_vfiprintf_r+0x4c>
 80016b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80016b2:	e711      	b.n	80014d8 <_vfiprintf_r+0x50>
 80016b4:	ab03      	add	r3, sp, #12
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	462a      	mov	r2, r5
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <_vfiprintf_r+0x258>)
 80016bc:	a904      	add	r1, sp, #16
 80016be:	4630      	mov	r0, r6
 80016c0:	f000 f880 	bl	80017c4 <_printf_i>
 80016c4:	e7e4      	b.n	8001690 <_vfiprintf_r+0x208>
 80016c6:	bf00      	nop
 80016c8:	08002140 	.word	0x08002140
 80016cc:	08002160 	.word	0x08002160
 80016d0:	08002120 	.word	0x08002120
 80016d4:	08002180 	.word	0x08002180
 80016d8:	0800218a 	.word	0x0800218a
 80016dc:	00000000 	.word	0x00000000
 80016e0:	08001463 	.word	0x08001463
 80016e4:	08002186 	.word	0x08002186

080016e8 <_printf_common>:
 80016e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016ec:	4616      	mov	r6, r2
 80016ee:	4699      	mov	r9, r3
 80016f0:	688a      	ldr	r2, [r1, #8]
 80016f2:	690b      	ldr	r3, [r1, #16]
 80016f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80016f8:	4293      	cmp	r3, r2
 80016fa:	bfb8      	it	lt
 80016fc:	4613      	movlt	r3, r2
 80016fe:	6033      	str	r3, [r6, #0]
 8001700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001704:	4607      	mov	r7, r0
 8001706:	460c      	mov	r4, r1
 8001708:	b10a      	cbz	r2, 800170e <_printf_common+0x26>
 800170a:	3301      	adds	r3, #1
 800170c:	6033      	str	r3, [r6, #0]
 800170e:	6823      	ldr	r3, [r4, #0]
 8001710:	0699      	lsls	r1, r3, #26
 8001712:	bf42      	ittt	mi
 8001714:	6833      	ldrmi	r3, [r6, #0]
 8001716:	3302      	addmi	r3, #2
 8001718:	6033      	strmi	r3, [r6, #0]
 800171a:	6825      	ldr	r5, [r4, #0]
 800171c:	f015 0506 	ands.w	r5, r5, #6
 8001720:	d106      	bne.n	8001730 <_printf_common+0x48>
 8001722:	f104 0a19 	add.w	sl, r4, #25
 8001726:	68e3      	ldr	r3, [r4, #12]
 8001728:	6832      	ldr	r2, [r6, #0]
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	42ab      	cmp	r3, r5
 800172e:	dc26      	bgt.n	800177e <_printf_common+0x96>
 8001730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001734:	1e13      	subs	r3, r2, #0
 8001736:	6822      	ldr	r2, [r4, #0]
 8001738:	bf18      	it	ne
 800173a:	2301      	movne	r3, #1
 800173c:	0692      	lsls	r2, r2, #26
 800173e:	d42b      	bmi.n	8001798 <_printf_common+0xb0>
 8001740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001744:	4649      	mov	r1, r9
 8001746:	4638      	mov	r0, r7
 8001748:	47c0      	blx	r8
 800174a:	3001      	adds	r0, #1
 800174c:	d01e      	beq.n	800178c <_printf_common+0xa4>
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	68e5      	ldr	r5, [r4, #12]
 8001752:	6832      	ldr	r2, [r6, #0]
 8001754:	f003 0306 	and.w	r3, r3, #6
 8001758:	2b04      	cmp	r3, #4
 800175a:	bf08      	it	eq
 800175c:	1aad      	subeq	r5, r5, r2
 800175e:	68a3      	ldr	r3, [r4, #8]
 8001760:	6922      	ldr	r2, [r4, #16]
 8001762:	bf0c      	ite	eq
 8001764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001768:	2500      	movne	r5, #0
 800176a:	4293      	cmp	r3, r2
 800176c:	bfc4      	itt	gt
 800176e:	1a9b      	subgt	r3, r3, r2
 8001770:	18ed      	addgt	r5, r5, r3
 8001772:	2600      	movs	r6, #0
 8001774:	341a      	adds	r4, #26
 8001776:	42b5      	cmp	r5, r6
 8001778:	d11a      	bne.n	80017b0 <_printf_common+0xc8>
 800177a:	2000      	movs	r0, #0
 800177c:	e008      	b.n	8001790 <_printf_common+0xa8>
 800177e:	2301      	movs	r3, #1
 8001780:	4652      	mov	r2, sl
 8001782:	4649      	mov	r1, r9
 8001784:	4638      	mov	r0, r7
 8001786:	47c0      	blx	r8
 8001788:	3001      	adds	r0, #1
 800178a:	d103      	bne.n	8001794 <_printf_common+0xac>
 800178c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001794:	3501      	adds	r5, #1
 8001796:	e7c6      	b.n	8001726 <_printf_common+0x3e>
 8001798:	18e1      	adds	r1, r4, r3
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	2030      	movs	r0, #48	; 0x30
 800179e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80017a2:	4422      	add	r2, r4
 80017a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80017a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80017ac:	3302      	adds	r3, #2
 80017ae:	e7c7      	b.n	8001740 <_printf_common+0x58>
 80017b0:	2301      	movs	r3, #1
 80017b2:	4622      	mov	r2, r4
 80017b4:	4649      	mov	r1, r9
 80017b6:	4638      	mov	r0, r7
 80017b8:	47c0      	blx	r8
 80017ba:	3001      	adds	r0, #1
 80017bc:	d0e6      	beq.n	800178c <_printf_common+0xa4>
 80017be:	3601      	adds	r6, #1
 80017c0:	e7d9      	b.n	8001776 <_printf_common+0x8e>
	...

080017c4 <_printf_i>:
 80017c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80017c8:	460c      	mov	r4, r1
 80017ca:	4691      	mov	r9, r2
 80017cc:	7e27      	ldrb	r7, [r4, #24]
 80017ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80017d0:	2f78      	cmp	r7, #120	; 0x78
 80017d2:	4680      	mov	r8, r0
 80017d4:	469a      	mov	sl, r3
 80017d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80017da:	d807      	bhi.n	80017ec <_printf_i+0x28>
 80017dc:	2f62      	cmp	r7, #98	; 0x62
 80017de:	d80a      	bhi.n	80017f6 <_printf_i+0x32>
 80017e0:	2f00      	cmp	r7, #0
 80017e2:	f000 80d8 	beq.w	8001996 <_printf_i+0x1d2>
 80017e6:	2f58      	cmp	r7, #88	; 0x58
 80017e8:	f000 80a3 	beq.w	8001932 <_printf_i+0x16e>
 80017ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80017f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80017f4:	e03a      	b.n	800186c <_printf_i+0xa8>
 80017f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80017fa:	2b15      	cmp	r3, #21
 80017fc:	d8f6      	bhi.n	80017ec <_printf_i+0x28>
 80017fe:	a001      	add	r0, pc, #4	; (adr r0, 8001804 <_printf_i+0x40>)
 8001800:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001804:	0800185d 	.word	0x0800185d
 8001808:	08001871 	.word	0x08001871
 800180c:	080017ed 	.word	0x080017ed
 8001810:	080017ed 	.word	0x080017ed
 8001814:	080017ed 	.word	0x080017ed
 8001818:	080017ed 	.word	0x080017ed
 800181c:	08001871 	.word	0x08001871
 8001820:	080017ed 	.word	0x080017ed
 8001824:	080017ed 	.word	0x080017ed
 8001828:	080017ed 	.word	0x080017ed
 800182c:	080017ed 	.word	0x080017ed
 8001830:	0800197d 	.word	0x0800197d
 8001834:	080018a1 	.word	0x080018a1
 8001838:	0800195f 	.word	0x0800195f
 800183c:	080017ed 	.word	0x080017ed
 8001840:	080017ed 	.word	0x080017ed
 8001844:	0800199f 	.word	0x0800199f
 8001848:	080017ed 	.word	0x080017ed
 800184c:	080018a1 	.word	0x080018a1
 8001850:	080017ed 	.word	0x080017ed
 8001854:	080017ed 	.word	0x080017ed
 8001858:	08001967 	.word	0x08001967
 800185c:	680b      	ldr	r3, [r1, #0]
 800185e:	1d1a      	adds	r2, r3, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	600a      	str	r2, [r1, #0]
 8001864:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800186c:	2301      	movs	r3, #1
 800186e:	e0a3      	b.n	80019b8 <_printf_i+0x1f4>
 8001870:	6825      	ldr	r5, [r4, #0]
 8001872:	6808      	ldr	r0, [r1, #0]
 8001874:	062e      	lsls	r6, r5, #24
 8001876:	f100 0304 	add.w	r3, r0, #4
 800187a:	d50a      	bpl.n	8001892 <_printf_i+0xce>
 800187c:	6805      	ldr	r5, [r0, #0]
 800187e:	600b      	str	r3, [r1, #0]
 8001880:	2d00      	cmp	r5, #0
 8001882:	da03      	bge.n	800188c <_printf_i+0xc8>
 8001884:	232d      	movs	r3, #45	; 0x2d
 8001886:	426d      	negs	r5, r5
 8001888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800188c:	485e      	ldr	r0, [pc, #376]	; (8001a08 <_printf_i+0x244>)
 800188e:	230a      	movs	r3, #10
 8001890:	e019      	b.n	80018c6 <_printf_i+0x102>
 8001892:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001896:	6805      	ldr	r5, [r0, #0]
 8001898:	600b      	str	r3, [r1, #0]
 800189a:	bf18      	it	ne
 800189c:	b22d      	sxthne	r5, r5
 800189e:	e7ef      	b.n	8001880 <_printf_i+0xbc>
 80018a0:	680b      	ldr	r3, [r1, #0]
 80018a2:	6825      	ldr	r5, [r4, #0]
 80018a4:	1d18      	adds	r0, r3, #4
 80018a6:	6008      	str	r0, [r1, #0]
 80018a8:	0628      	lsls	r0, r5, #24
 80018aa:	d501      	bpl.n	80018b0 <_printf_i+0xec>
 80018ac:	681d      	ldr	r5, [r3, #0]
 80018ae:	e002      	b.n	80018b6 <_printf_i+0xf2>
 80018b0:	0669      	lsls	r1, r5, #25
 80018b2:	d5fb      	bpl.n	80018ac <_printf_i+0xe8>
 80018b4:	881d      	ldrh	r5, [r3, #0]
 80018b6:	4854      	ldr	r0, [pc, #336]	; (8001a08 <_printf_i+0x244>)
 80018b8:	2f6f      	cmp	r7, #111	; 0x6f
 80018ba:	bf0c      	ite	eq
 80018bc:	2308      	moveq	r3, #8
 80018be:	230a      	movne	r3, #10
 80018c0:	2100      	movs	r1, #0
 80018c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80018c6:	6866      	ldr	r6, [r4, #4]
 80018c8:	60a6      	str	r6, [r4, #8]
 80018ca:	2e00      	cmp	r6, #0
 80018cc:	bfa2      	ittt	ge
 80018ce:	6821      	ldrge	r1, [r4, #0]
 80018d0:	f021 0104 	bicge.w	r1, r1, #4
 80018d4:	6021      	strge	r1, [r4, #0]
 80018d6:	b90d      	cbnz	r5, 80018dc <_printf_i+0x118>
 80018d8:	2e00      	cmp	r6, #0
 80018da:	d04d      	beq.n	8001978 <_printf_i+0x1b4>
 80018dc:	4616      	mov	r6, r2
 80018de:	fbb5 f1f3 	udiv	r1, r5, r3
 80018e2:	fb03 5711 	mls	r7, r3, r1, r5
 80018e6:	5dc7      	ldrb	r7, [r0, r7]
 80018e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80018ec:	462f      	mov	r7, r5
 80018ee:	42bb      	cmp	r3, r7
 80018f0:	460d      	mov	r5, r1
 80018f2:	d9f4      	bls.n	80018de <_printf_i+0x11a>
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d10b      	bne.n	8001910 <_printf_i+0x14c>
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	07df      	lsls	r7, r3, #31
 80018fc:	d508      	bpl.n	8001910 <_printf_i+0x14c>
 80018fe:	6923      	ldr	r3, [r4, #16]
 8001900:	6861      	ldr	r1, [r4, #4]
 8001902:	4299      	cmp	r1, r3
 8001904:	bfde      	ittt	le
 8001906:	2330      	movle	r3, #48	; 0x30
 8001908:	f806 3c01 	strble.w	r3, [r6, #-1]
 800190c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8001910:	1b92      	subs	r2, r2, r6
 8001912:	6122      	str	r2, [r4, #16]
 8001914:	f8cd a000 	str.w	sl, [sp]
 8001918:	464b      	mov	r3, r9
 800191a:	aa03      	add	r2, sp, #12
 800191c:	4621      	mov	r1, r4
 800191e:	4640      	mov	r0, r8
 8001920:	f7ff fee2 	bl	80016e8 <_printf_common>
 8001924:	3001      	adds	r0, #1
 8001926:	d14c      	bne.n	80019c2 <_printf_i+0x1fe>
 8001928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800192c:	b004      	add	sp, #16
 800192e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001932:	4835      	ldr	r0, [pc, #212]	; (8001a08 <_printf_i+0x244>)
 8001934:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	680e      	ldr	r6, [r1, #0]
 800193c:	061f      	lsls	r7, r3, #24
 800193e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001942:	600e      	str	r6, [r1, #0]
 8001944:	d514      	bpl.n	8001970 <_printf_i+0x1ac>
 8001946:	07d9      	lsls	r1, r3, #31
 8001948:	bf44      	itt	mi
 800194a:	f043 0320 	orrmi.w	r3, r3, #32
 800194e:	6023      	strmi	r3, [r4, #0]
 8001950:	b91d      	cbnz	r5, 800195a <_printf_i+0x196>
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	f023 0320 	bic.w	r3, r3, #32
 8001958:	6023      	str	r3, [r4, #0]
 800195a:	2310      	movs	r3, #16
 800195c:	e7b0      	b.n	80018c0 <_printf_i+0xfc>
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	f043 0320 	orr.w	r3, r3, #32
 8001964:	6023      	str	r3, [r4, #0]
 8001966:	2378      	movs	r3, #120	; 0x78
 8001968:	4828      	ldr	r0, [pc, #160]	; (8001a0c <_printf_i+0x248>)
 800196a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800196e:	e7e3      	b.n	8001938 <_printf_i+0x174>
 8001970:	065e      	lsls	r6, r3, #25
 8001972:	bf48      	it	mi
 8001974:	b2ad      	uxthmi	r5, r5
 8001976:	e7e6      	b.n	8001946 <_printf_i+0x182>
 8001978:	4616      	mov	r6, r2
 800197a:	e7bb      	b.n	80018f4 <_printf_i+0x130>
 800197c:	680b      	ldr	r3, [r1, #0]
 800197e:	6826      	ldr	r6, [r4, #0]
 8001980:	6960      	ldr	r0, [r4, #20]
 8001982:	1d1d      	adds	r5, r3, #4
 8001984:	600d      	str	r5, [r1, #0]
 8001986:	0635      	lsls	r5, r6, #24
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	d501      	bpl.n	8001990 <_printf_i+0x1cc>
 800198c:	6018      	str	r0, [r3, #0]
 800198e:	e002      	b.n	8001996 <_printf_i+0x1d2>
 8001990:	0671      	lsls	r1, r6, #25
 8001992:	d5fb      	bpl.n	800198c <_printf_i+0x1c8>
 8001994:	8018      	strh	r0, [r3, #0]
 8001996:	2300      	movs	r3, #0
 8001998:	6123      	str	r3, [r4, #16]
 800199a:	4616      	mov	r6, r2
 800199c:	e7ba      	b.n	8001914 <_printf_i+0x150>
 800199e:	680b      	ldr	r3, [r1, #0]
 80019a0:	1d1a      	adds	r2, r3, #4
 80019a2:	600a      	str	r2, [r1, #0]
 80019a4:	681e      	ldr	r6, [r3, #0]
 80019a6:	6862      	ldr	r2, [r4, #4]
 80019a8:	2100      	movs	r1, #0
 80019aa:	4630      	mov	r0, r6
 80019ac:	f7fe fc18 	bl	80001e0 <memchr>
 80019b0:	b108      	cbz	r0, 80019b6 <_printf_i+0x1f2>
 80019b2:	1b80      	subs	r0, r0, r6
 80019b4:	6060      	str	r0, [r4, #4]
 80019b6:	6863      	ldr	r3, [r4, #4]
 80019b8:	6123      	str	r3, [r4, #16]
 80019ba:	2300      	movs	r3, #0
 80019bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019c0:	e7a8      	b.n	8001914 <_printf_i+0x150>
 80019c2:	6923      	ldr	r3, [r4, #16]
 80019c4:	4632      	mov	r2, r6
 80019c6:	4649      	mov	r1, r9
 80019c8:	4640      	mov	r0, r8
 80019ca:	47d0      	blx	sl
 80019cc:	3001      	adds	r0, #1
 80019ce:	d0ab      	beq.n	8001928 <_printf_i+0x164>
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	079b      	lsls	r3, r3, #30
 80019d4:	d413      	bmi.n	80019fe <_printf_i+0x23a>
 80019d6:	68e0      	ldr	r0, [r4, #12]
 80019d8:	9b03      	ldr	r3, [sp, #12]
 80019da:	4298      	cmp	r0, r3
 80019dc:	bfb8      	it	lt
 80019de:	4618      	movlt	r0, r3
 80019e0:	e7a4      	b.n	800192c <_printf_i+0x168>
 80019e2:	2301      	movs	r3, #1
 80019e4:	4632      	mov	r2, r6
 80019e6:	4649      	mov	r1, r9
 80019e8:	4640      	mov	r0, r8
 80019ea:	47d0      	blx	sl
 80019ec:	3001      	adds	r0, #1
 80019ee:	d09b      	beq.n	8001928 <_printf_i+0x164>
 80019f0:	3501      	adds	r5, #1
 80019f2:	68e3      	ldr	r3, [r4, #12]
 80019f4:	9903      	ldr	r1, [sp, #12]
 80019f6:	1a5b      	subs	r3, r3, r1
 80019f8:	42ab      	cmp	r3, r5
 80019fa:	dcf2      	bgt.n	80019e2 <_printf_i+0x21e>
 80019fc:	e7eb      	b.n	80019d6 <_printf_i+0x212>
 80019fe:	2500      	movs	r5, #0
 8001a00:	f104 0619 	add.w	r6, r4, #25
 8001a04:	e7f5      	b.n	80019f2 <_printf_i+0x22e>
 8001a06:	bf00      	nop
 8001a08:	08002191 	.word	0x08002191
 8001a0c:	080021a2 	.word	0x080021a2

08001a10 <_sbrk_r>:
 8001a10:	b538      	push	{r3, r4, r5, lr}
 8001a12:	4d06      	ldr	r5, [pc, #24]	; (8001a2c <_sbrk_r+0x1c>)
 8001a14:	2300      	movs	r3, #0
 8001a16:	4604      	mov	r4, r0
 8001a18:	4608      	mov	r0, r1
 8001a1a:	602b      	str	r3, [r5, #0]
 8001a1c:	f7ff f850 	bl	8000ac0 <_sbrk>
 8001a20:	1c43      	adds	r3, r0, #1
 8001a22:	d102      	bne.n	8001a2a <_sbrk_r+0x1a>
 8001a24:	682b      	ldr	r3, [r5, #0]
 8001a26:	b103      	cbz	r3, 8001a2a <_sbrk_r+0x1a>
 8001a28:	6023      	str	r3, [r4, #0]
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
 8001a2c:	20000174 	.word	0x20000174

08001a30 <__sread>:
 8001a30:	b510      	push	{r4, lr}
 8001a32:	460c      	mov	r4, r1
 8001a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a38:	f000 f8a0 	bl	8001b7c <_read_r>
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	bfab      	itete	ge
 8001a40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a42:	89a3      	ldrhlt	r3, [r4, #12]
 8001a44:	181b      	addge	r3, r3, r0
 8001a46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a4a:	bfac      	ite	ge
 8001a4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a4e:	81a3      	strhlt	r3, [r4, #12]
 8001a50:	bd10      	pop	{r4, pc}

08001a52 <__swrite>:
 8001a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a56:	461f      	mov	r7, r3
 8001a58:	898b      	ldrh	r3, [r1, #12]
 8001a5a:	05db      	lsls	r3, r3, #23
 8001a5c:	4605      	mov	r5, r0
 8001a5e:	460c      	mov	r4, r1
 8001a60:	4616      	mov	r6, r2
 8001a62:	d505      	bpl.n	8001a70 <__swrite+0x1e>
 8001a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a68:	2302      	movs	r3, #2
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f000 f868 	bl	8001b40 <_lseek_r>
 8001a70:	89a3      	ldrh	r3, [r4, #12]
 8001a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a7a:	81a3      	strh	r3, [r4, #12]
 8001a7c:	4632      	mov	r2, r6
 8001a7e:	463b      	mov	r3, r7
 8001a80:	4628      	mov	r0, r5
 8001a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a86:	f000 b817 	b.w	8001ab8 <_write_r>

08001a8a <__sseek>:
 8001a8a:	b510      	push	{r4, lr}
 8001a8c:	460c      	mov	r4, r1
 8001a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a92:	f000 f855 	bl	8001b40 <_lseek_r>
 8001a96:	1c43      	adds	r3, r0, #1
 8001a98:	89a3      	ldrh	r3, [r4, #12]
 8001a9a:	bf15      	itete	ne
 8001a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001aa6:	81a3      	strheq	r3, [r4, #12]
 8001aa8:	bf18      	it	ne
 8001aaa:	81a3      	strhne	r3, [r4, #12]
 8001aac:	bd10      	pop	{r4, pc}

08001aae <__sclose>:
 8001aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ab2:	f000 b813 	b.w	8001adc <_close_r>
	...

08001ab8 <_write_r>:
 8001ab8:	b538      	push	{r3, r4, r5, lr}
 8001aba:	4d07      	ldr	r5, [pc, #28]	; (8001ad8 <_write_r+0x20>)
 8001abc:	4604      	mov	r4, r0
 8001abe:	4608      	mov	r0, r1
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	602a      	str	r2, [r5, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	f000 f91c 	bl	8001d04 <_write>
 8001acc:	1c43      	adds	r3, r0, #1
 8001ace:	d102      	bne.n	8001ad6 <_write_r+0x1e>
 8001ad0:	682b      	ldr	r3, [r5, #0]
 8001ad2:	b103      	cbz	r3, 8001ad6 <_write_r+0x1e>
 8001ad4:	6023      	str	r3, [r4, #0]
 8001ad6:	bd38      	pop	{r3, r4, r5, pc}
 8001ad8:	20000174 	.word	0x20000174

08001adc <_close_r>:
 8001adc:	b538      	push	{r3, r4, r5, lr}
 8001ade:	4d06      	ldr	r5, [pc, #24]	; (8001af8 <_close_r+0x1c>)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	602b      	str	r3, [r5, #0]
 8001ae8:	f000 f93e 	bl	8001d68 <_close>
 8001aec:	1c43      	adds	r3, r0, #1
 8001aee:	d102      	bne.n	8001af6 <_close_r+0x1a>
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	b103      	cbz	r3, 8001af6 <_close_r+0x1a>
 8001af4:	6023      	str	r3, [r4, #0]
 8001af6:	bd38      	pop	{r3, r4, r5, pc}
 8001af8:	20000174 	.word	0x20000174

08001afc <_fstat_r>:
 8001afc:	b538      	push	{r3, r4, r5, lr}
 8001afe:	4d07      	ldr	r5, [pc, #28]	; (8001b1c <_fstat_r+0x20>)
 8001b00:	2300      	movs	r3, #0
 8001b02:	4604      	mov	r4, r0
 8001b04:	4608      	mov	r0, r1
 8001b06:	4611      	mov	r1, r2
 8001b08:	602b      	str	r3, [r5, #0]
 8001b0a:	f000 f974 	bl	8001df6 <_fstat>
 8001b0e:	1c43      	adds	r3, r0, #1
 8001b10:	d102      	bne.n	8001b18 <_fstat_r+0x1c>
 8001b12:	682b      	ldr	r3, [r5, #0]
 8001b14:	b103      	cbz	r3, 8001b18 <_fstat_r+0x1c>
 8001b16:	6023      	str	r3, [r4, #0]
 8001b18:	bd38      	pop	{r3, r4, r5, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000174 	.word	0x20000174

08001b20 <_isatty_r>:
 8001b20:	b538      	push	{r3, r4, r5, lr}
 8001b22:	4d06      	ldr	r5, [pc, #24]	; (8001b3c <_isatty_r+0x1c>)
 8001b24:	2300      	movs	r3, #0
 8001b26:	4604      	mov	r4, r0
 8001b28:	4608      	mov	r0, r1
 8001b2a:	602b      	str	r3, [r5, #0]
 8001b2c:	f000 fac8 	bl	80020c0 <_isatty>
 8001b30:	1c43      	adds	r3, r0, #1
 8001b32:	d102      	bne.n	8001b3a <_isatty_r+0x1a>
 8001b34:	682b      	ldr	r3, [r5, #0]
 8001b36:	b103      	cbz	r3, 8001b3a <_isatty_r+0x1a>
 8001b38:	6023      	str	r3, [r4, #0]
 8001b3a:	bd38      	pop	{r3, r4, r5, pc}
 8001b3c:	20000174 	.word	0x20000174

08001b40 <_lseek_r>:
 8001b40:	b538      	push	{r3, r4, r5, lr}
 8001b42:	4d07      	ldr	r5, [pc, #28]	; (8001b60 <_lseek_r+0x20>)
 8001b44:	4604      	mov	r4, r0
 8001b46:	4608      	mov	r0, r1
 8001b48:	4611      	mov	r1, r2
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	602a      	str	r2, [r5, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f000 f8c6 	bl	8001ce0 <_lseek>
 8001b54:	1c43      	adds	r3, r0, #1
 8001b56:	d102      	bne.n	8001b5e <_lseek_r+0x1e>
 8001b58:	682b      	ldr	r3, [r5, #0]
 8001b5a:	b103      	cbz	r3, 8001b5e <_lseek_r+0x1e>
 8001b5c:	6023      	str	r3, [r4, #0]
 8001b5e:	bd38      	pop	{r3, r4, r5, pc}
 8001b60:	20000174 	.word	0x20000174

08001b64 <__malloc_lock>:
 8001b64:	4801      	ldr	r0, [pc, #4]	; (8001b6c <__malloc_lock+0x8>)
 8001b66:	f7ff bb55 	b.w	8001214 <__retarget_lock_acquire_recursive>
 8001b6a:	bf00      	nop
 8001b6c:	2000016c 	.word	0x2000016c

08001b70 <__malloc_unlock>:
 8001b70:	4801      	ldr	r0, [pc, #4]	; (8001b78 <__malloc_unlock+0x8>)
 8001b72:	f7ff bb50 	b.w	8001216 <__retarget_lock_release_recursive>
 8001b76:	bf00      	nop
 8001b78:	2000016c 	.word	0x2000016c

08001b7c <_read_r>:
 8001b7c:	b538      	push	{r3, r4, r5, lr}
 8001b7e:	4d07      	ldr	r5, [pc, #28]	; (8001b9c <_read_r+0x20>)
 8001b80:	4604      	mov	r4, r0
 8001b82:	4608      	mov	r0, r1
 8001b84:	4611      	mov	r1, r2
 8001b86:	2200      	movs	r2, #0
 8001b88:	602a      	str	r2, [r5, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f000 f850 	bl	8001c30 <_read>
 8001b90:	1c43      	adds	r3, r0, #1
 8001b92:	d102      	bne.n	8001b9a <_read_r+0x1e>
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	b103      	cbz	r3, 8001b9a <_read_r+0x1e>
 8001b98:	6023      	str	r3, [r4, #0]
 8001b9a:	bd38      	pop	{r3, r4, r5, pc}
 8001b9c:	20000174 	.word	0x20000174

08001ba0 <findslot>:
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <findslot+0x2c>)
 8001ba2:	b510      	push	{r4, lr}
 8001ba4:	4604      	mov	r4, r0
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	b118      	cbz	r0, 8001bb2 <findslot+0x12>
 8001baa:	6983      	ldr	r3, [r0, #24]
 8001bac:	b90b      	cbnz	r3, 8001bb2 <findslot+0x12>
 8001bae:	f7ff fa93 	bl	80010d8 <__sinit>
 8001bb2:	2c13      	cmp	r4, #19
 8001bb4:	d807      	bhi.n	8001bc6 <findslot+0x26>
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <findslot+0x30>)
 8001bb8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001bbc:	3201      	adds	r2, #1
 8001bbe:	d002      	beq.n	8001bc6 <findslot+0x26>
 8001bc0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001bc4:	bd10      	pop	{r4, pc}
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	e7fc      	b.n	8001bc4 <findslot+0x24>
 8001bca:	bf00      	nop
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	200000a0 	.word	0x200000a0

08001bd4 <checkerror>:
 8001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd6:	1c43      	adds	r3, r0, #1
 8001bd8:	4604      	mov	r4, r0
 8001bda:	d109      	bne.n	8001bf0 <checkerror+0x1c>
 8001bdc:	f7fe ffe2 	bl	8000ba4 <__errno>
 8001be0:	2613      	movs	r6, #19
 8001be2:	4605      	mov	r5, r0
 8001be4:	2700      	movs	r7, #0
 8001be6:	4630      	mov	r0, r6
 8001be8:	4639      	mov	r1, r7
 8001bea:	beab      	bkpt	0x00ab
 8001bec:	4606      	mov	r6, r0
 8001bee:	602e      	str	r6, [r5, #0]
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001bf4 <error>:
 8001bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	f7fe ffd4 	bl	8000ba4 <__errno>
 8001bfc:	2613      	movs	r6, #19
 8001bfe:	4605      	mov	r5, r0
 8001c00:	2700      	movs	r7, #0
 8001c02:	4630      	mov	r0, r6
 8001c04:	4639      	mov	r1, r7
 8001c06:	beab      	bkpt	0x00ab
 8001c08:	4606      	mov	r6, r0
 8001c0a:	602e      	str	r6, [r5, #0]
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c10 <_swiread>:
 8001c10:	b530      	push	{r4, r5, lr}
 8001c12:	b085      	sub	sp, #20
 8001c14:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001c18:	9203      	str	r2, [sp, #12]
 8001c1a:	2406      	movs	r4, #6
 8001c1c:	ad01      	add	r5, sp, #4
 8001c1e:	4620      	mov	r0, r4
 8001c20:	4629      	mov	r1, r5
 8001c22:	beab      	bkpt	0x00ab
 8001c24:	4604      	mov	r4, r0
 8001c26:	4620      	mov	r0, r4
 8001c28:	f7ff ffd4 	bl	8001bd4 <checkerror>
 8001c2c:	b005      	add	sp, #20
 8001c2e:	bd30      	pop	{r4, r5, pc}

08001c30 <_read>:
 8001c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c32:	4615      	mov	r5, r2
 8001c34:	9101      	str	r1, [sp, #4]
 8001c36:	f7ff ffb3 	bl	8001ba0 <findslot>
 8001c3a:	9901      	ldr	r1, [sp, #4]
 8001c3c:	4604      	mov	r4, r0
 8001c3e:	b938      	cbnz	r0, 8001c50 <_read+0x20>
 8001c40:	f7fe ffb0 	bl	8000ba4 <__errno>
 8001c44:	2309      	movs	r3, #9
 8001c46:	6003      	str	r3, [r0, #0]
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c4c:	b003      	add	sp, #12
 8001c4e:	bd30      	pop	{r4, r5, pc}
 8001c50:	6800      	ldr	r0, [r0, #0]
 8001c52:	462a      	mov	r2, r5
 8001c54:	f7ff ffdc 	bl	8001c10 <_swiread>
 8001c58:	1c43      	adds	r3, r0, #1
 8001c5a:	d0f7      	beq.n	8001c4c <_read+0x1c>
 8001c5c:	6863      	ldr	r3, [r4, #4]
 8001c5e:	1a2a      	subs	r2, r5, r0
 8001c60:	4413      	add	r3, r2
 8001c62:	6063      	str	r3, [r4, #4]
 8001c64:	4610      	mov	r0, r2
 8001c66:	e7f1      	b.n	8001c4c <_read+0x1c>

08001c68 <_swilseek>:
 8001c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	4616      	mov	r6, r2
 8001c6e:	f7ff ff97 	bl	8001ba0 <findslot>
 8001c72:	4605      	mov	r5, r0
 8001c74:	b940      	cbnz	r0, 8001c88 <_swilseek+0x20>
 8001c76:	f7fe ff95 	bl	8000ba4 <__errno>
 8001c7a:	2309      	movs	r3, #9
 8001c7c:	6003      	str	r3, [r0, #0]
 8001c7e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001c82:	4620      	mov	r0, r4
 8001c84:	b003      	add	sp, #12
 8001c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c88:	2e02      	cmp	r6, #2
 8001c8a:	d903      	bls.n	8001c94 <_swilseek+0x2c>
 8001c8c:	f7fe ff8a 	bl	8000ba4 <__errno>
 8001c90:	2316      	movs	r3, #22
 8001c92:	e7f3      	b.n	8001c7c <_swilseek+0x14>
 8001c94:	2e01      	cmp	r6, #1
 8001c96:	d112      	bne.n	8001cbe <_swilseek+0x56>
 8001c98:	6843      	ldr	r3, [r0, #4]
 8001c9a:	18e4      	adds	r4, r4, r3
 8001c9c:	d4f6      	bmi.n	8001c8c <_swilseek+0x24>
 8001c9e:	682b      	ldr	r3, [r5, #0]
 8001ca0:	260a      	movs	r6, #10
 8001ca2:	e9cd 3400 	strd	r3, r4, [sp]
 8001ca6:	466f      	mov	r7, sp
 8001ca8:	4630      	mov	r0, r6
 8001caa:	4639      	mov	r1, r7
 8001cac:	beab      	bkpt	0x00ab
 8001cae:	4606      	mov	r6, r0
 8001cb0:	4630      	mov	r0, r6
 8001cb2:	f7ff ff8f 	bl	8001bd4 <checkerror>
 8001cb6:	2800      	cmp	r0, #0
 8001cb8:	dbe1      	blt.n	8001c7e <_swilseek+0x16>
 8001cba:	606c      	str	r4, [r5, #4]
 8001cbc:	e7e1      	b.n	8001c82 <_swilseek+0x1a>
 8001cbe:	2e02      	cmp	r6, #2
 8001cc0:	d1ed      	bne.n	8001c9e <_swilseek+0x36>
 8001cc2:	6803      	ldr	r3, [r0, #0]
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	260c      	movs	r6, #12
 8001cc8:	466f      	mov	r7, sp
 8001cca:	4630      	mov	r0, r6
 8001ccc:	4639      	mov	r1, r7
 8001cce:	beab      	bkpt	0x00ab
 8001cd0:	4606      	mov	r6, r0
 8001cd2:	4630      	mov	r0, r6
 8001cd4:	f7ff ff7e 	bl	8001bd4 <checkerror>
 8001cd8:	1c43      	adds	r3, r0, #1
 8001cda:	d0d0      	beq.n	8001c7e <_swilseek+0x16>
 8001cdc:	4404      	add	r4, r0
 8001cde:	e7de      	b.n	8001c9e <_swilseek+0x36>

08001ce0 <_lseek>:
 8001ce0:	f7ff bfc2 	b.w	8001c68 <_swilseek>

08001ce4 <_swiwrite>:
 8001ce4:	b530      	push	{r4, r5, lr}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001cec:	9203      	str	r2, [sp, #12]
 8001cee:	2405      	movs	r4, #5
 8001cf0:	ad01      	add	r5, sp, #4
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	beab      	bkpt	0x00ab
 8001cf8:	4604      	mov	r4, r0
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7ff ff6a 	bl	8001bd4 <checkerror>
 8001d00:	b005      	add	sp, #20
 8001d02:	bd30      	pop	{r4, r5, pc}

08001d04 <_write>:
 8001d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d06:	4615      	mov	r5, r2
 8001d08:	9101      	str	r1, [sp, #4]
 8001d0a:	f7ff ff49 	bl	8001ba0 <findslot>
 8001d0e:	9901      	ldr	r1, [sp, #4]
 8001d10:	4604      	mov	r4, r0
 8001d12:	b930      	cbnz	r0, 8001d22 <_write+0x1e>
 8001d14:	f7fe ff46 	bl	8000ba4 <__errno>
 8001d18:	2309      	movs	r3, #9
 8001d1a:	6003      	str	r3, [r0, #0]
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d20:	e012      	b.n	8001d48 <_write+0x44>
 8001d22:	6800      	ldr	r0, [r0, #0]
 8001d24:	462a      	mov	r2, r5
 8001d26:	f7ff ffdd 	bl	8001ce4 <_swiwrite>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	dbf6      	blt.n	8001d1c <_write+0x18>
 8001d2e:	6862      	ldr	r2, [r4, #4]
 8001d30:	1a2b      	subs	r3, r5, r0
 8001d32:	441a      	add	r2, r3
 8001d34:	42a8      	cmp	r0, r5
 8001d36:	6062      	str	r2, [r4, #4]
 8001d38:	d105      	bne.n	8001d46 <_write+0x42>
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	b003      	add	sp, #12
 8001d3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001d42:	f7ff bf57 	b.w	8001bf4 <error>
 8001d46:	4618      	mov	r0, r3
 8001d48:	b003      	add	sp, #12
 8001d4a:	bd30      	pop	{r4, r5, pc}

08001d4c <_swiclose>:
 8001d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d4e:	2402      	movs	r4, #2
 8001d50:	9001      	str	r0, [sp, #4]
 8001d52:	ad01      	add	r5, sp, #4
 8001d54:	4620      	mov	r0, r4
 8001d56:	4629      	mov	r1, r5
 8001d58:	beab      	bkpt	0x00ab
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f7ff ff39 	bl	8001bd4 <checkerror>
 8001d62:	b003      	add	sp, #12
 8001d64:	bd30      	pop	{r4, r5, pc}
	...

08001d68 <_close>:
 8001d68:	b538      	push	{r3, r4, r5, lr}
 8001d6a:	4605      	mov	r5, r0
 8001d6c:	f7ff ff18 	bl	8001ba0 <findslot>
 8001d70:	4604      	mov	r4, r0
 8001d72:	b930      	cbnz	r0, 8001d82 <_close+0x1a>
 8001d74:	f7fe ff16 	bl	8000ba4 <__errno>
 8001d78:	2309      	movs	r3, #9
 8001d7a:	6003      	str	r3, [r0, #0]
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d80:	bd38      	pop	{r3, r4, r5, pc}
 8001d82:	3d01      	subs	r5, #1
 8001d84:	2d01      	cmp	r5, #1
 8001d86:	d809      	bhi.n	8001d9c <_close+0x34>
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <_close+0x48>)
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d104      	bne.n	8001d9c <_close+0x34>
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d96:	6003      	str	r3, [r0, #0]
 8001d98:	2000      	movs	r0, #0
 8001d9a:	e7f1      	b.n	8001d80 <_close+0x18>
 8001d9c:	6820      	ldr	r0, [r4, #0]
 8001d9e:	f7ff ffd5 	bl	8001d4c <_swiclose>
 8001da2:	2800      	cmp	r0, #0
 8001da4:	d1ec      	bne.n	8001d80 <_close+0x18>
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001daa:	6023      	str	r3, [r4, #0]
 8001dac:	e7e8      	b.n	8001d80 <_close+0x18>
 8001dae:	bf00      	nop
 8001db0:	200000a0 	.word	0x200000a0

08001db4 <_swistat>:
 8001db4:	b570      	push	{r4, r5, r6, lr}
 8001db6:	460c      	mov	r4, r1
 8001db8:	f7ff fef2 	bl	8001ba0 <findslot>
 8001dbc:	4605      	mov	r5, r0
 8001dbe:	b930      	cbnz	r0, 8001dce <_swistat+0x1a>
 8001dc0:	f7fe fef0 	bl	8000ba4 <__errno>
 8001dc4:	2309      	movs	r3, #9
 8001dc6:	6003      	str	r3, [r0, #0]
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dcc:	bd70      	pop	{r4, r5, r6, pc}
 8001dce:	6863      	ldr	r3, [r4, #4]
 8001dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dd4:	6063      	str	r3, [r4, #4]
 8001dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dda:	64a3      	str	r3, [r4, #72]	; 0x48
 8001ddc:	260c      	movs	r6, #12
 8001dde:	4630      	mov	r0, r6
 8001de0:	4629      	mov	r1, r5
 8001de2:	beab      	bkpt	0x00ab
 8001de4:	4605      	mov	r5, r0
 8001de6:	4628      	mov	r0, r5
 8001de8:	f7ff fef4 	bl	8001bd4 <checkerror>
 8001dec:	1c43      	adds	r3, r0, #1
 8001dee:	bf1c      	itt	ne
 8001df0:	6120      	strne	r0, [r4, #16]
 8001df2:	2000      	movne	r0, #0
 8001df4:	e7ea      	b.n	8001dcc <_swistat+0x18>

08001df6 <_fstat>:
 8001df6:	460b      	mov	r3, r1
 8001df8:	b510      	push	{r4, lr}
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	2258      	movs	r2, #88	; 0x58
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fef9 	bl	8000bf8 <memset>
 8001e06:	4601      	mov	r1, r0
 8001e08:	4620      	mov	r0, r4
 8001e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e0e:	f7ff bfd1 	b.w	8001db4 <_swistat>

08001e12 <_stat>:
 8001e12:	b538      	push	{r3, r4, r5, lr}
 8001e14:	460d      	mov	r5, r1
 8001e16:	4604      	mov	r4, r0
 8001e18:	2258      	movs	r2, #88	; 0x58
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4628      	mov	r0, r5
 8001e1e:	f7fe feeb 	bl	8000bf8 <memset>
 8001e22:	4620      	mov	r0, r4
 8001e24:	2100      	movs	r1, #0
 8001e26:	f000 f811 	bl	8001e4c <_swiopen>
 8001e2a:	1c43      	adds	r3, r0, #1
 8001e2c:	4604      	mov	r4, r0
 8001e2e:	d00b      	beq.n	8001e48 <_stat+0x36>
 8001e30:	686b      	ldr	r3, [r5, #4]
 8001e32:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001e36:	606b      	str	r3, [r5, #4]
 8001e38:	4629      	mov	r1, r5
 8001e3a:	f7ff ffbb 	bl	8001db4 <_swistat>
 8001e3e:	4605      	mov	r5, r0
 8001e40:	4620      	mov	r0, r4
 8001e42:	f7ff ff91 	bl	8001d68 <_close>
 8001e46:	462c      	mov	r4, r5
 8001e48:	4620      	mov	r0, r4
 8001e4a:	bd38      	pop	{r3, r4, r5, pc}

08001e4c <_swiopen>:
 8001e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e50:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <_swiopen+0xb0>)
 8001e52:	b097      	sub	sp, #92	; 0x5c
 8001e54:	4681      	mov	r9, r0
 8001e56:	460f      	mov	r7, r1
 8001e58:	2500      	movs	r5, #0
 8001e5a:	461e      	mov	r6, r3
 8001e5c:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8001e60:	1c61      	adds	r1, r4, #1
 8001e62:	d037      	beq.n	8001ed4 <_swiopen+0x88>
 8001e64:	3501      	adds	r5, #1
 8001e66:	2d14      	cmp	r5, #20
 8001e68:	d1f8      	bne.n	8001e5c <_swiopen+0x10>
 8001e6a:	f7fe fe9b 	bl	8000ba4 <__errno>
 8001e6e:	2318      	movs	r3, #24
 8001e70:	6003      	str	r3, [r0, #0]
 8001e72:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001e76:	e03d      	b.n	8001ef4 <_swiopen+0xa8>
 8001e78:	f3c7 4400 	ubfx	r4, r7, #16, #1
 8001e7c:	f240 6301 	movw	r3, #1537	; 0x601
 8001e80:	07ba      	lsls	r2, r7, #30
 8001e82:	bf48      	it	mi
 8001e84:	f044 0402 	orrmi.w	r4, r4, #2
 8001e88:	421f      	tst	r7, r3
 8001e8a:	bf18      	it	ne
 8001e8c:	f044 0404 	orrne.w	r4, r4, #4
 8001e90:	073b      	lsls	r3, r7, #28
 8001e92:	bf48      	it	mi
 8001e94:	f024 0404 	bicmi.w	r4, r4, #4
 8001e98:	4648      	mov	r0, r9
 8001e9a:	bf48      	it	mi
 8001e9c:	f044 0408 	orrmi.w	r4, r4, #8
 8001ea0:	f8cd 9000 	str.w	r9, [sp]
 8001ea4:	f7fe f9ec 	bl	8000280 <strlen>
 8001ea8:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001eac:	2401      	movs	r4, #1
 8001eae:	4620      	mov	r0, r4
 8001eb0:	4641      	mov	r1, r8
 8001eb2:	beab      	bkpt	0x00ab
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	2c00      	cmp	r4, #0
 8001eb8:	db07      	blt.n	8001eca <_swiopen+0x7e>
 8001eba:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 8001ebe:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	6073      	str	r3, [r6, #4]
 8001ec6:	462c      	mov	r4, r5
 8001ec8:	e014      	b.n	8001ef4 <_swiopen+0xa8>
 8001eca:	4620      	mov	r0, r4
 8001ecc:	f7ff fe92 	bl	8001bf4 <error>
 8001ed0:	4604      	mov	r4, r0
 8001ed2:	e00f      	b.n	8001ef4 <_swiopen+0xa8>
 8001ed4:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 8001ed8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001edc:	46e8      	mov	r8, sp
 8001ede:	d1cb      	bne.n	8001e78 <_swiopen+0x2c>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	4648      	mov	r0, r9
 8001ee4:	f7ff ff95 	bl	8001e12 <_stat>
 8001ee8:	3001      	adds	r0, #1
 8001eea:	d0c5      	beq.n	8001e78 <_swiopen+0x2c>
 8001eec:	f7fe fe5a 	bl	8000ba4 <__errno>
 8001ef0:	2311      	movs	r3, #17
 8001ef2:	6003      	str	r3, [r0, #0]
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	b017      	add	sp, #92	; 0x5c
 8001ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001efc:	200000a0 	.word	0x200000a0

08001f00 <_get_semihosting_exts>:
 8001f00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001f04:	4606      	mov	r6, r0
 8001f06:	460f      	mov	r7, r1
 8001f08:	482a      	ldr	r0, [pc, #168]	; (8001fb4 <_get_semihosting_exts+0xb4>)
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4615      	mov	r5, r2
 8001f0e:	f7ff ff9d 	bl	8001e4c <_swiopen>
 8001f12:	462a      	mov	r2, r5
 8001f14:	4604      	mov	r4, r0
 8001f16:	2100      	movs	r1, #0
 8001f18:	4630      	mov	r0, r6
 8001f1a:	f7fe fe6d 	bl	8000bf8 <memset>
 8001f1e:	1c63      	adds	r3, r4, #1
 8001f20:	d016      	beq.n	8001f50 <_get_semihosting_exts+0x50>
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7ff fe3c 	bl	8001ba0 <findslot>
 8001f28:	f04f 090c 	mov.w	r9, #12
 8001f2c:	4680      	mov	r8, r0
 8001f2e:	4648      	mov	r0, r9
 8001f30:	4641      	mov	r1, r8
 8001f32:	beab      	bkpt	0x00ab
 8001f34:	4680      	mov	r8, r0
 8001f36:	4640      	mov	r0, r8
 8001f38:	f7ff fe4c 	bl	8001bd4 <checkerror>
 8001f3c:	2803      	cmp	r0, #3
 8001f3e:	dd02      	ble.n	8001f46 <_get_semihosting_exts+0x46>
 8001f40:	1ec3      	subs	r3, r0, #3
 8001f42:	42ab      	cmp	r3, r5
 8001f44:	dc08      	bgt.n	8001f58 <_get_semihosting_exts+0x58>
 8001f46:	4620      	mov	r0, r4
 8001f48:	f7ff ff0e 	bl	8001d68 <_close>
 8001f4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001f50:	4620      	mov	r0, r4
 8001f52:	b003      	add	sp, #12
 8001f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f58:	2204      	movs	r2, #4
 8001f5a:	eb0d 0102 	add.w	r1, sp, r2
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f7ff fe66 	bl	8001c30 <_read>
 8001f64:	2803      	cmp	r0, #3
 8001f66:	ddee      	ble.n	8001f46 <_get_semihosting_exts+0x46>
 8001f68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001f6c:	2b53      	cmp	r3, #83	; 0x53
 8001f6e:	d1ea      	bne.n	8001f46 <_get_semihosting_exts+0x46>
 8001f70:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001f74:	2b48      	cmp	r3, #72	; 0x48
 8001f76:	d1e6      	bne.n	8001f46 <_get_semihosting_exts+0x46>
 8001f78:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001f7c:	2b46      	cmp	r3, #70	; 0x46
 8001f7e:	d1e2      	bne.n	8001f46 <_get_semihosting_exts+0x46>
 8001f80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f84:	2b42      	cmp	r3, #66	; 0x42
 8001f86:	d1de      	bne.n	8001f46 <_get_semihosting_exts+0x46>
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4639      	mov	r1, r7
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f7ff fe6b 	bl	8001c68 <_swilseek>
 8001f92:	2800      	cmp	r0, #0
 8001f94:	dbd7      	blt.n	8001f46 <_get_semihosting_exts+0x46>
 8001f96:	462a      	mov	r2, r5
 8001f98:	4631      	mov	r1, r6
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f7ff fe48 	bl	8001c30 <_read>
 8001fa0:	4605      	mov	r5, r0
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f7ff fee0 	bl	8001d68 <_close>
 8001fa8:	4628      	mov	r0, r5
 8001faa:	f7ff fe13 	bl	8001bd4 <checkerror>
 8001fae:	4604      	mov	r4, r0
 8001fb0:	e7ce      	b.n	8001f50 <_get_semihosting_exts+0x50>
 8001fb2:	bf00      	nop
 8001fb4:	080021b3 	.word	0x080021b3

08001fb8 <initialise_semihosting_exts>:
 8001fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001fba:	4d0a      	ldr	r5, [pc, #40]	; (8001fe4 <initialise_semihosting_exts+0x2c>)
 8001fbc:	4c0a      	ldr	r4, [pc, #40]	; (8001fe8 <initialise_semihosting_exts+0x30>)
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	a801      	add	r0, sp, #4
 8001fc4:	6029      	str	r1, [r5, #0]
 8001fc6:	6022      	str	r2, [r4, #0]
 8001fc8:	f7ff ff9a 	bl	8001f00 <_get_semihosting_exts>
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	dd07      	ble.n	8001fe0 <initialise_semihosting_exts+0x28>
 8001fd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001fd4:	f003 0201 	and.w	r2, r3, #1
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	602a      	str	r2, [r5, #0]
 8001fde:	6023      	str	r3, [r4, #0]
 8001fe0:	b003      	add	sp, #12
 8001fe2:	bd30      	pop	{r4, r5, pc}
 8001fe4:	20000064 	.word	0x20000064
 8001fe8:	20000068 	.word	0x20000068

08001fec <_has_ext_stdout_stderr>:
 8001fec:	b510      	push	{r4, lr}
 8001fee:	4c04      	ldr	r4, [pc, #16]	; (8002000 <_has_ext_stdout_stderr+0x14>)
 8001ff0:	6822      	ldr	r2, [r4, #0]
 8001ff2:	2a00      	cmp	r2, #0
 8001ff4:	da01      	bge.n	8001ffa <_has_ext_stdout_stderr+0xe>
 8001ff6:	f7ff ffdf 	bl	8001fb8 <initialise_semihosting_exts>
 8001ffa:	6820      	ldr	r0, [r4, #0]
 8001ffc:	bd10      	pop	{r4, pc}
 8001ffe:	bf00      	nop
 8002000:	20000068 	.word	0x20000068

08002004 <initialise_monitor_handles>:
 8002004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002008:	b085      	sub	sp, #20
 800200a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80020bc <initialise_monitor_handles+0xb8>
 800200e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002012:	2303      	movs	r3, #3
 8002014:	2400      	movs	r4, #0
 8002016:	9303      	str	r3, [sp, #12]
 8002018:	f10d 0804 	add.w	r8, sp, #4
 800201c:	9402      	str	r4, [sp, #8]
 800201e:	2501      	movs	r5, #1
 8002020:	4628      	mov	r0, r5
 8002022:	4641      	mov	r1, r8
 8002024:	beab      	bkpt	0x00ab
 8002026:	4605      	mov	r5, r0
 8002028:	4e20      	ldr	r6, [pc, #128]	; (80020ac <initialise_monitor_handles+0xa8>)
 800202a:	4a21      	ldr	r2, [pc, #132]	; (80020b0 <initialise_monitor_handles+0xac>)
 800202c:	6035      	str	r5, [r6, #0]
 800202e:	4623      	mov	r3, r4
 8002030:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002034:	4614      	mov	r4, r2
 8002036:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800203a:	3301      	adds	r3, #1
 800203c:	2b14      	cmp	r3, #20
 800203e:	d1fa      	bne.n	8002036 <initialise_monitor_handles+0x32>
 8002040:	f7ff ffd4 	bl	8001fec <_has_ext_stdout_stderr>
 8002044:	4d1b      	ldr	r5, [pc, #108]	; (80020b4 <initialise_monitor_handles+0xb0>)
 8002046:	b1d0      	cbz	r0, 800207e <initialise_monitor_handles+0x7a>
 8002048:	f04f 0a03 	mov.w	sl, #3
 800204c:	2304      	movs	r3, #4
 800204e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002052:	2701      	movs	r7, #1
 8002054:	f8cd a00c 	str.w	sl, [sp, #12]
 8002058:	9302      	str	r3, [sp, #8]
 800205a:	4638      	mov	r0, r7
 800205c:	4641      	mov	r1, r8
 800205e:	beab      	bkpt	0x00ab
 8002060:	4683      	mov	fp, r0
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <initialise_monitor_handles+0xb4>)
 8002064:	f8cd 9004 	str.w	r9, [sp, #4]
 8002068:	f8c3 b000 	str.w	fp, [r3]
 800206c:	2308      	movs	r3, #8
 800206e:	f8cd a00c 	str.w	sl, [sp, #12]
 8002072:	9302      	str	r3, [sp, #8]
 8002074:	4638      	mov	r0, r7
 8002076:	4641      	mov	r1, r8
 8002078:	beab      	bkpt	0x00ab
 800207a:	4607      	mov	r7, r0
 800207c:	602f      	str	r7, [r5, #0]
 800207e:	682b      	ldr	r3, [r5, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	bf02      	ittt	eq
 8002084:	4b0c      	ldreq	r3, [pc, #48]	; (80020b8 <initialise_monitor_handles+0xb4>)
 8002086:	681b      	ldreq	r3, [r3, #0]
 8002088:	602b      	streq	r3, [r5, #0]
 800208a:	6833      	ldr	r3, [r6, #0]
 800208c:	6023      	str	r3, [r4, #0]
 800208e:	2600      	movs	r6, #0
 8002090:	6066      	str	r6, [r4, #4]
 8002092:	f7ff ffab 	bl	8001fec <_has_ext_stdout_stderr>
 8002096:	b130      	cbz	r0, 80020a6 <initialise_monitor_handles+0xa2>
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <initialise_monitor_handles+0xb4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80020a0:	682b      	ldr	r3, [r5, #0]
 80020a2:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80020a6:	b005      	add	sp, #20
 80020a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020ac:	20000098 	.word	0x20000098
 80020b0:	200000a0 	.word	0x200000a0
 80020b4:	20000094 	.word	0x20000094
 80020b8:	2000009c 	.word	0x2000009c
 80020bc:	080021c9 	.word	0x080021c9

080020c0 <_isatty>:
 80020c0:	b570      	push	{r4, r5, r6, lr}
 80020c2:	f7ff fd6d 	bl	8001ba0 <findslot>
 80020c6:	2509      	movs	r5, #9
 80020c8:	4604      	mov	r4, r0
 80020ca:	b920      	cbnz	r0, 80020d6 <_isatty+0x16>
 80020cc:	f7fe fd6a 	bl	8000ba4 <__errno>
 80020d0:	6005      	str	r5, [r0, #0]
 80020d2:	4620      	mov	r0, r4
 80020d4:	bd70      	pop	{r4, r5, r6, pc}
 80020d6:	4628      	mov	r0, r5
 80020d8:	4621      	mov	r1, r4
 80020da:	beab      	bkpt	0x00ab
 80020dc:	4604      	mov	r4, r0
 80020de:	2c01      	cmp	r4, #1
 80020e0:	d0f7      	beq.n	80020d2 <_isatty+0x12>
 80020e2:	f7fe fd5f 	bl	8000ba4 <__errno>
 80020e6:	2400      	movs	r4, #0
 80020e8:	4605      	mov	r5, r0
 80020ea:	2613      	movs	r6, #19
 80020ec:	4630      	mov	r0, r6
 80020ee:	4621      	mov	r1, r4
 80020f0:	beab      	bkpt	0x00ab
 80020f2:	4606      	mov	r6, r0
 80020f4:	602e      	str	r6, [r5, #0]
 80020f6:	e7ec      	b.n	80020d2 <_isatty+0x12>

080020f8 <_init>:
 80020f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fa:	bf00      	nop
 80020fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fe:	bc08      	pop	{r3}
 8002100:	469e      	mov	lr, r3
 8002102:	4770      	bx	lr

08002104 <_fini>:
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002106:	bf00      	nop
 8002108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210a:	bc08      	pop	{r3}
 800210c:	469e      	mov	lr, r3
 800210e:	4770      	bx	lr
