
weather_station2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd0  08002cd0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002cd0  08002cd0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cd0  08002cd0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cd0  08002cd0  00012cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000064  08002d3c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002d3c  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008047  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b79  00000000  00000000  000280db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c0  00000000  00000000  00029c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c8  00000000  00000000  0002a118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000102fe  00000000  00000000  0002a4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006243  00000000  00000000  0003a7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055b97  00000000  00000000  00040a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000965b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001544  00000000  00000000  0009660c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002bf8 	.word	0x08002bf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08002bf8 	.word	0x08002bf8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <calculate_SYSCFG_values>:
 *  Created on: Nov 29, 2021
 *      Author: toni
 */
#include "EXTI_lib.h"

static void calculate_SYSCFG_values(uint8_t pin_num, uint8_t *buf) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]

	uint8_t SYSCFG_num = pin_num / 4;
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	089b      	lsrs	r3, r3, #2
 8000290:	73fb      	strb	r3, [r7, #15]
	uint8_t SYSCFG_pos = pin_num % 4 * 4;
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 0303 	and.w	r3, r3, #3
 8000298:	b2db      	uxtb	r3, r3
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	73bb      	strb	r3, [r7, #14]

	buf[0] = SYSCFG_num;
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	7bfa      	ldrb	r2, [r7, #15]
 80002a2:	701a      	strb	r2, [r3, #0]
	buf[1] = SYSCFG_pos;
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	3301      	adds	r3, #1
 80002a8:	7bba      	ldrb	r2, [r7, #14]
 80002aa:	701a      	strb	r2, [r3, #0]

}
 80002ac:	bf00      	nop
 80002ae:	3714      	adds	r7, #20
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <enable_EXTI_GPIO>:

void enable_EXTI_GPIO(uint8_t pin_num, uint8_t gpio, uint8_t edge) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
 80002c2:	460b      	mov	r3, r1
 80002c4:	71bb      	strb	r3, [r7, #6]
 80002c6:	4613      	mov	r3, r2
 80002c8:	717b      	strb	r3, [r7, #5]

	RCC->APB2ENR |= 1u << 14;
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <enable_EXTI_GPIO+0x5c>)
 80002cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ce:	4a11      	ldr	r2, [pc, #68]	; (8000314 <enable_EXTI_GPIO+0x5c>)
 80002d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002d4:	6453      	str	r3, [r2, #68]	; 0x44

	//enable correct port from SYSCFG register for EXTI
	uint8_t SYSCFG_values[2];
	calculate_SYSCFG_values(pin_num, SYSCFG_values);
 80002d6:	f107 020c 	add.w	r2, r7, #12
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	4611      	mov	r1, r2
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ffce 	bl	8000280 <calculate_SYSCFG_values>

	SYSCFG->EXTICR[SYSCFG_values[0]] |= (gpio << SYSCFG_values[1]);
 80002e4:	4a0c      	ldr	r2, [pc, #48]	; (8000318 <enable_EXTI_GPIO+0x60>)
 80002e6:	7b3b      	ldrb	r3, [r7, #12]
 80002e8:	3302      	adds	r3, #2
 80002ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ee:	79ba      	ldrb	r2, [r7, #6]
 80002f0:	7b79      	ldrb	r1, [r7, #13]
 80002f2:	408a      	lsls	r2, r1
 80002f4:	4908      	ldr	r1, [pc, #32]	; (8000318 <enable_EXTI_GPIO+0x60>)
 80002f6:	7b38      	ldrb	r0, [r7, #12]
 80002f8:	431a      	orrs	r2, r3
 80002fa:	1c83      	adds	r3, r0, #2
 80002fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	enable_EXTI(pin_num, edge);
 8000300:	797a      	ldrb	r2, [r7, #5]
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	4611      	mov	r1, r2
 8000306:	4618      	mov	r0, r3
 8000308:	f000 f82e 	bl	8000368 <enable_EXTI>

}
 800030c:	bf00      	nop
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40023800 	.word	0x40023800
 8000318:	40013800 	.word	0x40013800

0800031c <disable_EXTI_GPIO>:

void disable_EXTI_GPIO(uint8_t pin_num) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
	uint8_t SYSCFG_values[2];
	calculate_SYSCFG_values(pin_num, SYSCFG_values);
 8000326:	f107 020c 	add.w	r2, r7, #12
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	4611      	mov	r1, r2
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ffa6 	bl	8000280 <calculate_SYSCFG_values>

	SYSCFG->EXTICR[SYSCFG_values[0]] &= ~(0xFu << SYSCFG_values[1]);
 8000334:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <disable_EXTI_GPIO+0x48>)
 8000336:	7b3b      	ldrb	r3, [r7, #12]
 8000338:	3302      	adds	r3, #2
 800033a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800033e:	7b7b      	ldrb	r3, [r7, #13]
 8000340:	4619      	mov	r1, r3
 8000342:	230f      	movs	r3, #15
 8000344:	408b      	lsls	r3, r1
 8000346:	43db      	mvns	r3, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <disable_EXTI_GPIO+0x48>)
 800034a:	7b38      	ldrb	r0, [r7, #12]
 800034c:	401a      	ands	r2, r3
 800034e:	1c83      	adds	r3, r0, #2
 8000350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	disable_EXTI(pin_num);
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f850 	bl	80003fc <disable_EXTI>

}
 800035c:	bf00      	nop
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40013800 	.word	0x40013800

08000368 <enable_EXTI>:

void enable_EXTI(uint8_t EXTI_num, uint8_t edge) {
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	460a      	mov	r2, r1
 8000372:	71fb      	strb	r3, [r7, #7]
 8000374:	4613      	mov	r3, r2
 8000376:	71bb      	strb	r3, [r7, #6]
	switch (edge) {
 8000378:	79bb      	ldrb	r3, [r7, #6]
 800037a:	2b02      	cmp	r3, #2
 800037c:	d006      	beq.n	800038c <enable_EXTI+0x24>
 800037e:	2b02      	cmp	r3, #2
 8000380:	dc2b      	bgt.n	80003da <enable_EXTI+0x72>
 8000382:	2b00      	cmp	r3, #0
 8000384:	d015      	beq.n	80003b2 <enable_EXTI+0x4a>
 8000386:	2b01      	cmp	r3, #1
 8000388:	d01d      	beq.n	80003c6 <enable_EXTI+0x5e>
 800038a:	e026      	b.n	80003da <enable_EXTI+0x72>
	case EXTI_REFE:
		EXTI->FTSR |= 1u << EXTI_num;
 800038c:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <enable_EXTI+0x90>)
 800038e:	68da      	ldr	r2, [r3, #12]
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	2101      	movs	r1, #1
 8000394:	fa01 f303 	lsl.w	r3, r1, r3
 8000398:	4917      	ldr	r1, [pc, #92]	; (80003f8 <enable_EXTI+0x90>)
 800039a:	4313      	orrs	r3, r2
 800039c:	60cb      	str	r3, [r1, #12]
		EXTI->RTSR |= 1u << EXTI_num;
 800039e:	4b16      	ldr	r3, [pc, #88]	; (80003f8 <enable_EXTI+0x90>)
 80003a0:	689a      	ldr	r2, [r3, #8]
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	2101      	movs	r1, #1
 80003a6:	fa01 f303 	lsl.w	r3, r1, r3
 80003aa:	4913      	ldr	r1, [pc, #76]	; (80003f8 <enable_EXTI+0x90>)
 80003ac:	4313      	orrs	r3, r2
 80003ae:	608b      	str	r3, [r1, #8]
		break;
 80003b0:	e013      	b.n	80003da <enable_EXTI+0x72>

	case EXTI_RE:
		EXTI->RTSR |= 1u << EXTI_num;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <enable_EXTI+0x90>)
 80003b4:	689a      	ldr	r2, [r3, #8]
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2101      	movs	r1, #1
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	490e      	ldr	r1, [pc, #56]	; (80003f8 <enable_EXTI+0x90>)
 80003c0:	4313      	orrs	r3, r2
 80003c2:	608b      	str	r3, [r1, #8]
		break;
 80003c4:	e009      	b.n	80003da <enable_EXTI+0x72>

	case EXTI_FE:
		EXTI->FTSR |= 1u << EXTI_num;
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <enable_EXTI+0x90>)
 80003c8:	68da      	ldr	r2, [r3, #12]
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	2101      	movs	r1, #1
 80003ce:	fa01 f303 	lsl.w	r3, r1, r3
 80003d2:	4909      	ldr	r1, [pc, #36]	; (80003f8 <enable_EXTI+0x90>)
 80003d4:	4313      	orrs	r3, r2
 80003d6:	60cb      	str	r3, [r1, #12]
		break;
 80003d8:	bf00      	nop
	}

	EXTI->IMR |= 1u << EXTI_num;
 80003da:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <enable_EXTI+0x90>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2101      	movs	r1, #1
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	4904      	ldr	r1, [pc, #16]	; (80003f8 <enable_EXTI+0x90>)
 80003e8:	4313      	orrs	r3, r2
 80003ea:	600b      	str	r3, [r1, #0]
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	40013c00 	.word	0x40013c00

080003fc <disable_EXTI>:

void disable_EXTI(uint8_t EXTI_num) {
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
	EXTI->FTSR &= ~(1u << EXTI_num);
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <disable_EXTI+0x54>)
 8000408:	68da      	ldr	r2, [r3, #12]
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2101      	movs	r1, #1
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	43db      	mvns	r3, r3
 8000414:	490e      	ldr	r1, [pc, #56]	; (8000450 <disable_EXTI+0x54>)
 8000416:	4013      	ands	r3, r2
 8000418:	60cb      	str	r3, [r1, #12]
	EXTI->RTSR &= ~(1u << EXTI_num);
 800041a:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <disable_EXTI+0x54>)
 800041c:	689a      	ldr	r2, [r3, #8]
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	2101      	movs	r1, #1
 8000422:	fa01 f303 	lsl.w	r3, r1, r3
 8000426:	43db      	mvns	r3, r3
 8000428:	4909      	ldr	r1, [pc, #36]	; (8000450 <disable_EXTI+0x54>)
 800042a:	4013      	ands	r3, r2
 800042c:	608b      	str	r3, [r1, #8]

	EXTI->IMR &= ~(1u << EXTI_num);
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <disable_EXTI+0x54>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2101      	movs	r1, #1
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	4904      	ldr	r1, [pc, #16]	; (8000450 <disable_EXTI+0x54>)
 800043e:	4013      	ands	r3, r2
 8000440:	600b      	str	r3, [r1, #0]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40013c00 	.word	0x40013c00

08000454 <enable_GPIOx_clock>:
#include "GPIO_Lib.h"

static void enable_GPIOx_clock(GPIO_TypeDef *gpio) {
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]

	if (gpio == GPIOA) {
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a23      	ldr	r2, [pc, #140]	; (80004ec <enable_GPIOx_clock+0x98>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <enable_GPIOx_clock+0x1e>

		RCC->AHB1ENR |= GPIOA_CLOCK_EN;
 8000464:	4b22      	ldr	r3, [pc, #136]	; (80004f0 <enable_GPIOx_clock+0x9c>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000468:	4a21      	ldr	r2, [pc, #132]	; (80004f0 <enable_GPIOx_clock+0x9c>)
 800046a:	f043 0301 	orr.w	r3, r3, #1
 800046e:	6313      	str	r3, [r2, #48]	; 0x30

	} else if (gpio == GPIOH) {

		RCC->AHB1ENR |= GPIOH_CLOCK_EN;
	}
}
 8000470:	e035      	b.n	80004de <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOB) {
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a1f      	ldr	r2, [pc, #124]	; (80004f4 <enable_GPIOx_clock+0xa0>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <enable_GPIOx_clock+0x34>
		RCC->AHB1ENR |= GPIOB_CLOCK_EN;
 800047a:	4b1d      	ldr	r3, [pc, #116]	; (80004f0 <enable_GPIOx_clock+0x9c>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047e:	4a1c      	ldr	r2, [pc, #112]	; (80004f0 <enable_GPIOx_clock+0x9c>)
 8000480:	f043 0302 	orr.w	r3, r3, #2
 8000484:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000486:	e02a      	b.n	80004de <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOC) {
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a1b      	ldr	r2, [pc, #108]	; (80004f8 <enable_GPIOx_clock+0xa4>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <enable_GPIOx_clock+0x4a>
		RCC->AHB1ENR |= GPIOC_CLOCK_EN;
 8000490:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <enable_GPIOx_clock+0x9c>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	4a16      	ldr	r2, [pc, #88]	; (80004f0 <enable_GPIOx_clock+0x9c>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049c:	e01f      	b.n	80004de <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOD) {
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a16      	ldr	r2, [pc, #88]	; (80004fc <enable_GPIOx_clock+0xa8>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <enable_GPIOx_clock+0x60>
		RCC->AHB1ENR |= GPIOD_CLOCK_EN;
 80004a6:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <enable_GPIOx_clock+0x9c>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004aa:	4a11      	ldr	r2, [pc, #68]	; (80004f0 <enable_GPIOx_clock+0x9c>)
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b2:	e014      	b.n	80004de <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOE) {
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a12      	ldr	r2, [pc, #72]	; (8000500 <enable_GPIOx_clock+0xac>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <enable_GPIOx_clock+0x76>
		RCC->AHB1ENR |= GPIOE_CLOCK_EN;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <enable_GPIOx_clock+0x9c>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	4a0b      	ldr	r2, [pc, #44]	; (80004f0 <enable_GPIOx_clock+0x9c>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c8:	e009      	b.n	80004de <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOH) {
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <enable_GPIOx_clock+0xb0>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d105      	bne.n	80004de <enable_GPIOx_clock+0x8a>
		RCC->AHB1ENR |= GPIOH_CLOCK_EN;
 80004d2:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <enable_GPIOx_clock+0x9c>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d6:	4a06      	ldr	r2, [pc, #24]	; (80004f0 <enable_GPIOx_clock+0x9c>)
 80004d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40020000 	.word	0x40020000
 80004f0:	40023800 	.word	0x40023800
 80004f4:	40020400 	.word	0x40020400
 80004f8:	40020800 	.word	0x40020800
 80004fc:	40020c00 	.word	0x40020c00
 8000500:	40021000 	.word	0x40021000
 8000504:	40021c00 	.word	0x40021c00

08000508 <init_pin>:

void init_pin(pin_type *pin) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]

	enable_GPIOx_clock(pin->gpio);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff ff9d 	bl	8000454 <enable_GPIOx_clock>

	change_mode(pin);
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f000 f822 	bl	8000564 <change_mode>

	uint8_t reg_H_L = pin->pin_num < 8 ? 0 : 1;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	791b      	ldrb	r3, [r3, #4]
 8000524:	2b07      	cmp	r3, #7
 8000526:	bf8c      	ite	hi
 8000528:	2301      	movhi	r3, #1
 800052a:	2300      	movls	r3, #0
 800052c:	b2db      	uxtb	r3, r3
 800052e:	73fb      	strb	r3, [r7, #15]
	pin->gpio->AFR[reg_H_L] |= pin->AF_num << (pin->pin_num * 4);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	7bfa      	ldrb	r2, [r7, #15]
 8000536:	3208      	adds	r2, #8
 8000538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	7a1b      	ldrb	r3, [r3, #8]
 8000540:	461a      	mov	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	4618      	mov	r0, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	7bfa      	ldrb	r2, [r7, #15]
 8000554:	4301      	orrs	r1, r0
 8000556:	3208      	adds	r2, #8
 8000558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <change_mode>:

void change_mode(pin_type *pin) {
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	pin->gpio->MODER &= ~(3u << ((pin->pin_num * 2)));
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	6819      	ldr	r1, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	791b      	ldrb	r3, [r3, #4]
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	2203      	movs	r2, #3
 800057a:	fa02 f303 	lsl.w	r3, r2, r3
 800057e:	43da      	mvns	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	400a      	ands	r2, r1
 8000586:	601a      	str	r2, [r3, #0]
	pin->gpio->PUPDR &= ~(3u << ((pin->pin_num * 2)));
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	68d9      	ldr	r1, [r3, #12]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	791b      	ldrb	r3, [r3, #4]
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	2203      	movs	r2, #3
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	43da      	mvns	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	400a      	ands	r2, r1
 80005a2:	60da      	str	r2, [r3, #12]
	pin->gpio->OTYPER &= ~(1u << pin->pin_num);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	6859      	ldr	r1, [r3, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	791b      	ldrb	r3, [r3, #4]
 80005ae:	461a      	mov	r2, r3
 80005b0:	2301      	movs	r3, #1
 80005b2:	4093      	lsls	r3, r2
 80005b4:	43da      	mvns	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	400a      	ands	r2, r1
 80005bc:	605a      	str	r2, [r3, #4]

	pin->gpio->MODER |= pin->mode << (pin->pin_num * 2);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	795b      	ldrb	r3, [r3, #5]
 80005c8:	4619      	mov	r1, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	fa01 f303 	lsl.w	r3, r1, r3
 80005d4:	4619      	mov	r1, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	430a      	orrs	r2, r1
 80005dc:	601a      	str	r2, [r3, #0]
	pin->gpio->OTYPER |= pin->PP_OD << pin->pin_num;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	685a      	ldr	r2, [r3, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	4619      	mov	r1, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	430a      	orrs	r2, r1
 80005fa:	605a      	str	r2, [r3, #4]
	pin->gpio->PUPDR |= pin->push_pull << (pin->pin_num * 2);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	68da      	ldr	r2, [r3, #12]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	79db      	ldrb	r3, [r3, #7]
 8000606:	4619      	mov	r1, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	4619      	mov	r1, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	430a      	orrs	r2, r1
 800061a:	60da      	str	r2, [r3, #12]

}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <write_pin>:

pin_state write_pin(pin_type *pin, pin_state state) {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
	if (state == HIGH) {
 8000634:	78fb      	ldrb	r3, [r7, #3]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d10d      	bne.n	8000656 <write_pin+0x2e>
		pin->gpio->ODR |= (1u << pin->pin_num);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6959      	ldr	r1, [r3, #20]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	461a      	mov	r2, r3
 8000646:	2301      	movs	r3, #1
 8000648:	fa03 f202 	lsl.w	r2, r3, r2
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	430a      	orrs	r2, r1
 8000652:	615a      	str	r2, [r3, #20]
 8000654:	e00c      	b.n	8000670 <write_pin+0x48>
	} else {
		pin->gpio->ODR &= ~(1u << pin->pin_num);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	6959      	ldr	r1, [r3, #20]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	461a      	mov	r2, r3
 8000662:	2301      	movs	r3, #1
 8000664:	4093      	lsls	r3, r2
 8000666:	43da      	mvns	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	400a      	ands	r2, r1
 800066e:	615a      	str	r2, [r3, #20]
	}

	return state;
 8000670:	78fb      	ldrb	r3, [r7, #3]
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <read_pin>:

pin_state read_pin(pin_type *pin) {
 800067e:	b480      	push	{r7}
 8000680:	b085      	sub	sp, #20
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
	uint32_t state = (pin->gpio->IDR >> pin->pin_num) & 1u;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	7912      	ldrb	r2, [r2, #4]
 8000690:	40d3      	lsrs	r3, r2
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]

	if (state == 1) {
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d101      	bne.n	80006a2 <read_pin+0x24>
		return HIGH;
 800069e:	2301      	movs	r3, #1
 80006a0:	e000      	b.n	80006a4 <read_pin+0x26>
	}

	return LOW;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <I2C_enable_clock>:
 */
#include "I2C_lib.h"
#include "clocks_lib.h"
#include "NVIC_lib.h"

static void I2C_enable_clock(I2C_handle_type *handle) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

	if (handle->peripheral == I2C1) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a13      	ldr	r2, [pc, #76]	; (800070c <I2C_enable_clock+0x5c>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d106      	bne.n	80006d0 <I2C_enable_clock+0x20>
		RCC->APB1ENR |= 1u << 21;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <I2C_enable_clock+0x60>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <I2C_enable_clock+0x60>)
 80006c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006cc:	6413      	str	r3, [r2, #64]	; 0x40
	} else if (handle->peripheral == I2C2) {
		RCC->APB1ENR |= 1u << 22;
	} else if (handle->peripheral == I2C3) {
		RCC->APB1ENR |= 1u << 23;
	}
}
 80006ce:	e016      	b.n	80006fe <I2C_enable_clock+0x4e>
	} else if (handle->peripheral == I2C2) {
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <I2C_enable_clock+0x64>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d106      	bne.n	80006e8 <I2C_enable_clock+0x38>
		RCC->APB1ENR |= 1u << 22;
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <I2C_enable_clock+0x60>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	4a0c      	ldr	r2, [pc, #48]	; (8000710 <I2C_enable_clock+0x60>)
 80006e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006e4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006e6:	e00a      	b.n	80006fe <I2C_enable_clock+0x4e>
	} else if (handle->peripheral == I2C3) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <I2C_enable_clock+0x68>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d105      	bne.n	80006fe <I2C_enable_clock+0x4e>
		RCC->APB1ENR |= 1u << 23;
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <I2C_enable_clock+0x60>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	4a06      	ldr	r2, [pc, #24]	; (8000710 <I2C_enable_clock+0x60>)
 80006f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006fc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40005400 	.word	0x40005400
 8000710:	40023800 	.word	0x40023800
 8000714:	40005800 	.word	0x40005800
 8000718:	40005c00 	.word	0x40005c00

0800071c <I2C_disable_IR>:
		enable_IR(I2C3_EV_IRQn);
		enable_IR(I2C3_ER_IRQn);
	}
}

static void I2C_disable_IR(I2C_handle_type *handle) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	if (handle->peripheral == I2C1) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <I2C_disable_IR+0x58>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d106      	bne.n	800073c <I2C_disable_IR+0x20>
		disable_IR(I2C1_EV_IRQn);
 800072e:	201f      	movs	r0, #31
 8000730:	f000 fb14 	bl	8000d5c <disable_IR>
		disable_IR(I2C1_ER_IRQn);
 8000734:	2020      	movs	r0, #32
 8000736:	f000 fb11 	bl	8000d5c <disable_IR>
		disable_IR(I2C2_ER_IRQn);
	} else if (handle->peripheral == I2C3) {
		disable_IR(I2C3_EV_IRQn);
		disable_IR(I2C3_ER_IRQn);
	}
}
 800073a:	e016      	b.n	800076a <I2C_disable_IR+0x4e>
	} else if (handle->peripheral == I2C2) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <I2C_disable_IR+0x5c>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d106      	bne.n	8000754 <I2C_disable_IR+0x38>
		disable_IR(I2C2_EV_IRQn);
 8000746:	2021      	movs	r0, #33	; 0x21
 8000748:	f000 fb08 	bl	8000d5c <disable_IR>
		disable_IR(I2C2_ER_IRQn);
 800074c:	2022      	movs	r0, #34	; 0x22
 800074e:	f000 fb05 	bl	8000d5c <disable_IR>
}
 8000752:	e00a      	b.n	800076a <I2C_disable_IR+0x4e>
	} else if (handle->peripheral == I2C3) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <I2C_disable_IR+0x60>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d105      	bne.n	800076a <I2C_disable_IR+0x4e>
		disable_IR(I2C3_EV_IRQn);
 800075e:	2048      	movs	r0, #72	; 0x48
 8000760:	f000 fafc 	bl	8000d5c <disable_IR>
		disable_IR(I2C3_ER_IRQn);
 8000764:	2049      	movs	r0, #73	; 0x49
 8000766:	f000 faf9 	bl	8000d5c <disable_IR>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40005400 	.word	0x40005400
 8000778:	40005800 	.word	0x40005800
 800077c:	40005c00 	.word	0x40005c00

08000780 <I2C_init>:

void I2C_init(I2C_handle_type *handle) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

	I2C_pins_init();
 8000788:	f001 fc48 	bl	800201c <I2C_pins_init>
	I2C_enable_clock(handle);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ff8f 	bl	80006b0 <I2C_enable_clock>

	//Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
	uint32_t APB1_clk = get_APB1_clock();
 8000792:	f000 ffa5 	bl	80016e0 <get_APB1_clock>
 8000796:	60f8      	str	r0, [r7, #12]
	uint8_t APB1_clk_MHz = APB1_clk / 1000000;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	4a15      	ldr	r2, [pc, #84]	; (80007f0 <I2C_init+0x70>)
 800079c:	fba2 2303 	umull	r2, r3, r2, r3
 80007a0:	0c9b      	lsrs	r3, r3, #18
 80007a2:	72fb      	strb	r3, [r7, #11]
	handle->peripheral->CR2 |= 0x1Fu & APB1_clk_MHz;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	6859      	ldr	r1, [r3, #4]
 80007aa:	7afb      	ldrb	r3, [r7, #11]
 80007ac:	f003 021f 	and.w	r2, r3, #31
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	605a      	str	r2, [r3, #4]

	//Configure the clock control registers
	uint16_t ccr = APB1_clk / 200000;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	099b      	lsrs	r3, r3, #6
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <I2C_init+0x74>)
 80007be:	fba2 2303 	umull	r2, r3, r2, r3
 80007c2:	099b      	lsrs	r3, r3, #6
 80007c4:	813b      	strh	r3, [r7, #8]
	handle->peripheral->CCR = ccr;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	893a      	ldrh	r2, [r7, #8]
 80007cc:	61da      	str	r2, [r3, #28]

	//Configure the rise time register
	handle->peripheral->TRISE = ccr + 1;
 80007ce:	893b      	ldrh	r3, [r7, #8]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	621a      	str	r2, [r3, #32]

	//enable interrupts
	handle->peripheral->CR2 |= 7u << 8;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	685a      	ldr	r2, [r3, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80007e6:	605a      	str	r2, [r3, #4]
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	431bde83 	.word	0x431bde83
 80007f4:	053e2d63 	.word	0x053e2d63

080007f8 <enable_peripheral>:

static void enable_peripheral(I2C_handle_type *handle) {
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	handle->peripheral->CR1 |= 1u;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f042 0201 	orr.w	r2, r2, #1
 800080e:	601a      	str	r2, [r3, #0]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <disable_peripheral>:

static void disable_peripheral(I2C_handle_type *handle) {
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	handle->peripheral->CR1 &= ~1u;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f022 0201 	bic.w	r2, r2, #1
 8000832:	601a      	str	r2, [r3, #0]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <generate_start_condition>:

static void generate_start_condition(I2C_handle_type *handle) {
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	handle->peripheral->CR1 |= 1u << 8;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000856:	601a      	str	r2, [r3, #0]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <start_communication>:

static uint8_t start_communication(I2C_handle_type *handle) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	if (handle->status != I2C_STATUS_IDLE) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	7c1b      	ldrb	r3, [r3, #16]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <start_communication+0x14>
		return 1;
 8000874:	2301      	movs	r3, #1
 8000876:	e006      	b.n	8000886 <start_communication+0x22>
	}

	enable_peripheral(handle);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff ffbd 	bl	80007f8 <enable_peripheral>

	generate_start_condition(handle);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff ffde 	bl	8000840 <generate_start_condition>

	return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <handle_start_condition>:

static void handle_start_condition(I2C_handle_type *handle) {
 800088e:	b480      	push	{r7}
 8000890:	b085      	sub	sp, #20
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]

	if (handle->addressing_mode == I2C_7_BIT_ADDRESSING) {
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	791b      	ldrb	r3, [r3, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d110      	bne.n	80008c0 <handle_start_condition+0x32>
		uint8_t rw = handle->status == I2C_STATUS_RECEIVING ? 1 : 0;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	7c1b      	ldrb	r3, [r3, #16]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	bf0c      	ite	eq
 80008a6:	2301      	moveq	r3, #1
 80008a8:	2300      	movne	r3, #0
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	737b      	strb	r3, [r7, #13]
		handle->peripheral->DR = (handle->slave_address << 1) | rw;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	88db      	ldrh	r3, [r3, #6]
 80008b2:	005a      	lsls	r2, r3, #1
 80008b4:	7b7b      	ldrb	r3, [r7, #13]
 80008b6:	431a      	orrs	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	611a      	str	r2, [r3, #16]

		header |= (0b11 << 1) & bits_9_8;

		handle->peripheral->DR = header;
	}
}
 80008be:	e011      	b.n	80008e4 <handle_start_condition+0x56>
		uint8_t header = 0xF0;
 80008c0:	23f0      	movs	r3, #240	; 0xf0
 80008c2:	73fb      	strb	r3, [r7, #15]
		uint8_t bits_9_8 = handle->slave_address >> 8;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	88db      	ldrh	r3, [r3, #6]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	73bb      	strb	r3, [r7, #14]
		header |= (0b11 << 1) & bits_9_8;
 80008ce:	7bbb      	ldrb	r3, [r7, #14]
 80008d0:	f003 0306 	and.w	r3, r3, #6
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	4313      	orrs	r3, r2
 80008da:	73fb      	strb	r3, [r7, #15]
		handle->peripheral->DR = header;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	7bfa      	ldrb	r2, [r7, #15]
 80008e2:	611a      	str	r2, [r3, #16]
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <handle_transmitting>:

static void handle_transmitting(I2C_handle_type *handle) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

	if (handle->peripheral->SR1 & 1u) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	2b00      	cmp	r3, #0
 8000904:	d003      	beq.n	800090e <handle_transmitting+0x1e>
		//start condition
		handle_start_condition(handle);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff ffc1 	bl	800088e <handle_start_condition>
 800090c:	e041      	b.n	8000992 <handle_transmitting+0xa2>

	} else if (handle->peripheral->SR1 & (1u << 3)) {
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	f003 0308 	and.w	r3, r3, #8
 8000918:	2b00      	cmp	r3, #0
 800091a:	d006      	beq.n	800092a <handle_transmitting+0x3a>
		//header sent, send rest of the address

		handle->peripheral->DR = handle->slave_address << 1;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	88db      	ldrh	r3, [r3, #6]
 8000920:	005a      	lsls	r2, r3, #1
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	611a      	str	r2, [r3, #16]
 8000928:	e033      	b.n	8000992 <handle_transmitting+0xa2>

	} else if (handle->peripheral->SR1 & 2u) {
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	f003 0302 	and.w	r3, r3, #2
 8000934:	2b00      	cmp	r3, #0
 8000936:	d003      	beq.n	8000940 <handle_transmitting+0x50>
		//address sent
		(void) handle->peripheral->SR2;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	e028      	b.n	8000992 <handle_transmitting+0xa2>

	} else if (handle->peripheral->SR1 & (1u << 7)) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	2b00      	cmp	r3, #0
 800094c:	d021      	beq.n	8000992 <handle_transmitting+0xa2>
		//data register empty, write next frame to DR

		if (handle->data_len-- == 0) {
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	1e59      	subs	r1, r3, #1
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	60d1      	str	r1, [r2, #12]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d111      	bne.n	8000980 <handle_transmitting+0x90>
			//generate stop condition
			handle->peripheral->CR1 |= 1u << 9;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800096a:	601a      	str	r2, [r3, #0]

			disable_peripheral(handle);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ff55 	bl	800081c <disable_peripheral>
			I2C_disable_IR(handle);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff fed2 	bl	800071c <I2C_disable_IR>
			handle->status = I2C_STATUS_IDLE;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	741a      	strb	r2, [r3, #16]

			return;
 800097e:	e008      	b.n	8000992 <handle_transmitting+0xa2>

		}

		handle->peripheral->DR = *(handle->data++);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	1c59      	adds	r1, r3, #1
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	6091      	str	r1, [r2, #8]
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	611a      	str	r2, [r3, #16]

	}
}
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <I2C_transmit_data_polling>:
	handle->status = I2C_STATUS_TRANSMITTING;

	return 0;
}

uint8_t I2C_transmit_data_polling(I2C_handle_type *handle) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

	if (start_communication(handle)) {
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff5f 	bl	8000864 <start_communication>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <I2C_transmit_data_polling+0x18>
		return 1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e05c      	b.n	8000a6a <I2C_transmit_data_polling+0xd2>
	}

	handle->status = I2C_STATUS_TRANSMITTING;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2201      	movs	r2, #1
 80009b4:	741a      	strb	r2, [r3, #16]

	while (!(handle->peripheral->SR1 & 1u))
 80009b6:	bf00      	nop
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0f8      	beq.n	80009b8 <I2C_transmit_data_polling+0x20>
		;
	//start condition
	handle_start_condition(handle);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff ff61 	bl	800088e <handle_start_condition>

	while ((!(handle->peripheral->SR1 & (1u << 3)))
 80009cc:	bf00      	nop
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f003 0308 	and.w	r3, r3, #8
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d106      	bne.n	80009ea <I2C_transmit_data_polling+0x52>
			&& (!(handle->peripheral->SR1 & 2u)))
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f1      	beq.n	80009ce <I2C_transmit_data_polling+0x36>
		;

	if (handle->addressing_mode == I2C_10_BIT_ADDRESSING) {
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	791b      	ldrb	r3, [r3, #4]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d105      	bne.n	80009fe <I2C_transmit_data_polling+0x66>
		//header sent, send rest of the address
		handle->peripheral->DR = handle->slave_address << 1;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	88db      	ldrh	r3, [r3, #6]
 80009f6:	005a      	lsls	r2, r3, #1
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	611a      	str	r2, [r3, #16]
	}

	while (!(handle->peripheral->SR1 & 2u))
 80009fe:	bf00      	nop
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0f8      	beq.n	8000a00 <I2C_transmit_data_polling+0x68>
		;

	//address sent
	(void) handle->peripheral->SR2;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	699b      	ldr	r3, [r3, #24]

	while (1) {

		if (handle->peripheral->SR1 & (1u << 7)) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d0f8      	beq.n	8000a14 <I2C_transmit_data_polling+0x7c>
			//data register empty, write next frame to DR

			if (handle->data_len-- == 0) {
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	1e59      	subs	r1, r3, #1
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	60d1      	str	r1, [r2, #12]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d112      	bne.n	8000a56 <I2C_transmit_data_polling+0xbe>
				//generate stop condition
				handle->peripheral->CR1 |= 1u << 9;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a3e:	601a      	str	r2, [r3, #0]

				disable_peripheral(handle);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff feeb 	bl	800081c <disable_peripheral>
				I2C_disable_IR(handle);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff fe68 	bl	800071c <I2C_disable_IR>
				handle->status = I2C_STATUS_IDLE;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	741a      	strb	r2, [r3, #16]

				return 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e009      	b.n	8000a6a <I2C_transmit_data_polling+0xd2>

			}

			handle->peripheral->DR = *(handle->data++);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	1c59      	adds	r1, r3, #1
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	6091      	str	r1, [r2, #8]
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	611a      	str	r2, [r3, #16]
		if (handle->peripheral->SR1 & (1u << 7)) {
 8000a68:	e7d4      	b.n	8000a14 <I2C_transmit_data_polling+0x7c>

	}

	return 0;

}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <handle_receiving>:
		;

	return 0;
}

static void handle_receiving(I2C_handle_type *handle) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

	static uint8_t repeated_start = 0;

	if (handle->peripheral->SR1 & 1u) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d01d      	beq.n	8000ac6 <handle_receiving+0x52>
		//start condition
		if (!repeated_start) {
 8000a8a:	4b48      	ldr	r3, [pc, #288]	; (8000bac <handle_receiving+0x138>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d103      	bne.n	8000a9a <handle_receiving+0x26>
			handle_start_condition(handle);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fefb 	bl	800088e <handle_start_condition>
			disable_peripheral(handle);
			I2C_disable_IR(handle);

		}
	}
}
 8000a98:	e084      	b.n	8000ba4 <handle_receiving+0x130>
			uint8_t header = 0xF0;
 8000a9a:	23f0      	movs	r3, #240	; 0xf0
 8000a9c:	73fb      	strb	r3, [r7, #15]
			uint8_t bits_9_8 = handle->slave_address >> 8;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	88db      	ldrh	r3, [r3, #6]
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
			header |= ((0b11 << 1) & bits_9_8) | 1u;
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
 8000aaa:	f003 0306 	and.w	r3, r3, #6
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
			handle->peripheral->DR = header;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	7bfa      	ldrb	r2, [r7, #15]
 8000ac2:	611a      	str	r2, [r3, #16]
}
 8000ac4:	e06e      	b.n	8000ba4 <handle_receiving+0x130>
	} else if (handle->peripheral->SR1 & (1u << 3)) {
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	f003 0308 	and.w	r3, r3, #8
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d006      	beq.n	8000ae2 <handle_receiving+0x6e>
		handle->peripheral->DR = handle->slave_address << 1;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	88db      	ldrh	r3, [r3, #6]
 8000ad8:	005a      	lsls	r2, r3, #1
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	611a      	str	r2, [r3, #16]
}
 8000ae0:	e060      	b.n	8000ba4 <handle_receiving+0x130>
	} else if (handle->peripheral->SR1 & 2u) {
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d023      	beq.n	8000b38 <handle_receiving+0xc4>
		if (!repeated_start
 8000af0:	4b2e      	ldr	r3, [pc, #184]	; (8000bac <handle_receiving+0x138>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d10f      	bne.n	8000b18 <handle_receiving+0xa4>
				&& (handle->addressing_mode == I2C_10_BIT_ADDRESSING)) {
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	791b      	ldrb	r3, [r3, #4]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d10b      	bne.n	8000b18 <handle_receiving+0xa4>
			handle->peripheral->CR1 |= 1u << 8;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b0e:	601a      	str	r2, [r3, #0]
			repeated_start = 1;
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <handle_receiving+0x138>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	e00b      	b.n	8000b30 <handle_receiving+0xbc>
		} else if (handle->data_len == 1) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d107      	bne.n	8000b30 <handle_receiving+0xbc>
			handle->peripheral->CR1 &= ~(1u << 10);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b2e:	601a      	str	r2, [r3, #0]
		(void) handle->peripheral->SR2;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	699b      	ldr	r3, [r3, #24]
}
 8000b36:	e035      	b.n	8000ba4 <handle_receiving+0x130>
	} else if (handle->peripheral->SR1 & (1u << 6)) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d02e      	beq.n	8000ba4 <handle_receiving+0x130>
		*(handle->data++) = handle->peripheral->DR;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6918      	ldr	r0, [r3, #16]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	1c59      	adds	r1, r3, #1
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	6091      	str	r1, [r2, #8]
 8000b56:	b2c2      	uxtb	r2, r0
 8000b58:	701a      	strb	r2, [r3, #0]
		if (--handle->data_len < 2) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	1e5a      	subs	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d81b      	bhi.n	8000ba4 <handle_receiving+0x130>
			handle->peripheral->CR1 &= ~(1u << 10);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b7a:	601a      	str	r2, [r3, #0]
			handle->peripheral->CR1 |= 1u << 9;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b8a:	601a      	str	r2, [r3, #0]
			repeated_start = 0;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <handle_receiving+0x138>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
			handle->status = I2C_STATUS_IDLE;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	741a      	strb	r2, [r3, #16]
			disable_peripheral(handle);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fe3f 	bl	800081c <disable_peripheral>
			I2C_disable_IR(handle);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff fdbc 	bl	800071c <I2C_disable_IR>
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000080 	.word	0x20000080

08000bb0 <I2C_handle_EV>:

void I2C_handle_EV(I2C_handle_type *handle) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

	if (handle->status == I2C_STATUS_TRANSMITTING) {
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	7c1b      	ldrb	r3, [r3, #16]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d103      	bne.n	8000bc8 <I2C_handle_EV+0x18>
		handle_transmitting(handle);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fe95 	bl	80008f0 <handle_transmitting>

	} else if (handle->status == I2C_STATUS_RECEIVING) {
		handle_receiving(handle);
	}

}
 8000bc6:	e006      	b.n	8000bd6 <I2C_handle_EV+0x26>
	} else if (handle->status == I2C_STATUS_RECEIVING) {
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7c1b      	ldrb	r3, [r3, #16]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d102      	bne.n	8000bd6 <I2C_handle_EV+0x26>
		handle_receiving(handle);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff4f 	bl	8000a74 <handle_receiving>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <I2C_handle_ER>:

uint8_t I2C_handle_ER(I2C_handle_type *handle) {
 8000bde:	b480      	push	{r7}
 8000be0:	b085      	sub	sp, #20
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
	uint8_t error_code;

	if (handle->peripheral->SR1 & (1u << 8)) {
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <I2C_handle_ER+0x1c>
		error_code = 8;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	73fb      	strb	r3, [r7, #15]
 8000bf8:	e01c      	b.n	8000c34 <I2C_handle_ER+0x56>
	} else if (handle->peripheral->SR1 & (1u << 10)) {
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d002      	beq.n	8000c0e <I2C_handle_ER+0x30>
		error_code = 10;
 8000c08:	230a      	movs	r3, #10
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	e012      	b.n	8000c34 <I2C_handle_ER+0x56>
	} else if (handle->peripheral->SR1 & (1u << 11)) {
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d002      	beq.n	8000c22 <I2C_handle_ER+0x44>
		error_code = 11;
 8000c1c:	230b      	movs	r3, #11
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	e008      	b.n	8000c34 <I2C_handle_ER+0x56>
	} else if (handle->peripheral->SR1 & (1u << 14)) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <I2C_handle_ER+0x56>
		error_code = 14;
 8000c30:	230e      	movs	r3, #14
 8000c32:	73fb      	strb	r3, [r7, #15]
	}

	handle->peripheral->CR1 &= ~1u;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f022 0201 	bic.w	r2, r2, #1
 8000c42:	601a      	str	r2, [r3, #0]
	handle->status = I2C_STATUS_IDLE;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	741a      	strb	r2, [r3, #16]

	return error_code;
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]

}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <calculate_register_values>:
#include "NVIC_lib.h"
#include "stm32f4xx.h"

static void calculate_register_values(uint8_t IRQn, uint8_t *buf,
		uint8_t bits_in_field) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
 8000c64:	4613      	mov	r3, r2
 8000c66:	71bb      	strb	r3, [r7, #6]

	bits_in_field = 32 / bits_in_field;
 8000c68:	79bb      	ldrb	r3, [r7, #6]
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c70:	71bb      	strb	r3, [r7, #6]
	uint8_t num = IRQn / bits_in_field;
 8000c72:	79fa      	ldrb	r2, [r7, #7]
 8000c74:	79bb      	ldrb	r3, [r7, #6]
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	73fb      	strb	r3, [r7, #15]
	uint8_t pos = IRQn % bits_in_field;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	79ba      	ldrb	r2, [r7, #6]
 8000c80:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c84:	fb02 f201 	mul.w	r2, r2, r1
 8000c88:	1a9b      	subs	r3, r3, r2
 8000c8a:	73bb      	strb	r3, [r7, #14]

	buf[0] = num;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	7bfa      	ldrb	r2, [r7, #15]
 8000c90:	701a      	strb	r2, [r3, #0]
	buf[1] = pos;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	3301      	adds	r3, #1
 8000c96:	7bba      	ldrb	r2, [r7, #14]
 8000c98:	701a      	strb	r2, [r3, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <calculate_ISER_values>:

static void calculate_ISER_values(uint8_t IRQn, uint8_t *buf) {
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	6039      	str	r1, [r7, #0]
 8000cb0:	71fb      	strb	r3, [r7, #7]

	calculate_register_values(IRQn, buf, 1);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	6839      	ldr	r1, [r7, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ffcd 	bl	8000c58 <calculate_register_values>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <set_priority>:



//priority must be between 0 and 15
void set_priority(uint8_t IRQn, uint8_t priority) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	460a      	mov	r2, r1
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	71bb      	strb	r3, [r7, #6]

	NVIC->IP[IRQn] = 0;
 8000cd8:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <set_priority+0x50>)
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	4413      	add	r3, r2
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	NVIC->IP[IRQn] |= priority << 4;
 8000ce4:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <set_priority+0x50>)
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4413      	add	r3, r2
 8000cea:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	b25a      	sxtb	r2, r3
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b259      	sxtb	r1, r3
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <set_priority+0x50>)
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	b2c9      	uxtb	r1, r1
 8000d02:	4413      	add	r3, r2
 8000d04:	460a      	mov	r2, r1
 8000d06:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100

08000d1c <enable_IR>:

void enable_IR(uint8_t IRQn) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]

	uint8_t ISER_values[2];
	calculate_ISER_values(IRQn, ISER_values);
 8000d26:	f107 020c 	add.w	r2, r7, #12
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ffb9 	bl	8000ca6 <calculate_ISER_values>

	NVIC->ISER[ISER_values[0]] |= 1u << ISER_values[1];
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <enable_IR+0x3c>)
 8000d36:	7b3a      	ldrb	r2, [r7, #12]
 8000d38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d3c:	7b7b      	ldrb	r3, [r7, #13]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2301      	movs	r3, #1
 8000d42:	408b      	lsls	r3, r1
 8000d44:	4904      	ldr	r1, [pc, #16]	; (8000d58 <enable_IR+0x3c>)
 8000d46:	7b38      	ldrb	r0, [r7, #12]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <disable_IR>:

void disable_IR(uint8_t IRQn) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	uint8_t ISER_values[2];
	calculate_ISER_values(IRQn, ISER_values);
 8000d66:	f107 020c 	add.w	r2, r7, #12
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff99 	bl	8000ca6 <calculate_ISER_values>

	NVIC->ISER[ISER_values[0]] &= ~(1u << ISER_values[1]);
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <disable_IR+0x3c>)
 8000d76:	7b3a      	ldrb	r2, [r7, #12]
 8000d78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d7c:	7b7b      	ldrb	r3, [r7, #13]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	2301      	movs	r3, #1
 8000d82:	408b      	lsls	r3, r1
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4904      	ldr	r1, [pc, #16]	; (8000d98 <disable_IR+0x3c>)
 8000d88:	7b38      	ldrb	r0, [r7, #12]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]

}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <bin2bcd>:

#include "RTC.h"
#include "NVIC_lib.h"
#include "EXTI_lib.h"

static uint16_t bin2bcd(uint8_t bin) {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
	uint8_t digit;
	uint8_t shift = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	73fb      	strb	r3, [r7, #15]
	uint16_t bcd = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	81bb      	strh	r3, [r7, #12]

	while (bin) {
 8000dae:	e01d      	b.n	8000dec <bin2bcd+0x50>
		digit = bin % 10;
 8000db0:	79fa      	ldrb	r2, [r7, #7]
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <bin2bcd+0x64>)
 8000db4:	fba3 1302 	umull	r1, r3, r3, r2
 8000db8:	08d9      	lsrs	r1, r3, #3
 8000dba:	460b      	mov	r3, r1
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	72fb      	strb	r3, [r7, #11]
		bin /= 10;
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <bin2bcd+0x64>)
 8000dca:	fba2 2303 	umull	r2, r3, r2, r3
 8000dce:	08db      	lsrs	r3, r3, #3
 8000dd0:	71fb      	strb	r3, [r7, #7]
		bcd |= (0xFu & digit) << (4 * shift++);
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	f003 020f 	and.w	r2, r3, #15
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	1c59      	adds	r1, r3, #1
 8000ddc:	73f9      	strb	r1, [r7, #15]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	89bb      	ldrh	r3, [r7, #12]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	81bb      	strh	r3, [r7, #12]
	while (bin) {
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1de      	bne.n	8000db0 <bin2bcd+0x14>
	}

	return bcd;
 8000df2:	89bb      	ldrh	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	cccccccd 	.word	0xcccccccd

08000e04 <bcd2bin>:

static uint8_t bcd2bin(uint16_t bcd) {
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]

	uint8_t multiplier = 1;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	73fb      	strb	r3, [r7, #15]
	uint8_t bin = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	73bb      	strb	r3, [r7, #14]

	while (bcd) {
 8000e16:	e014      	b.n	8000e42 <bcd2bin+0x3e>
		bin += (bcd & 0xFu) * multiplier;
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f003 030f 	and.w	r3, r3, #15
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	7bfa      	ldrb	r2, [r7, #15]
 8000e24:	fb12 f303 	smulbb	r3, r2, r3
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	73bb      	strb	r3, [r7, #14]
		bcd >>= 4;
 8000e30:	88fb      	ldrh	r3, [r7, #6]
 8000e32:	091b      	lsrs	r3, r3, #4
 8000e34:	80fb      	strh	r3, [r7, #6]
		multiplier *= 10;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	0092      	lsls	r2, r2, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]
	while (bcd) {
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1e7      	bne.n	8000e18 <bcd2bin+0x14>
	}

	return bin;
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <unlock_write_protection>:

static void unlock_write_protection() {
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
	RTC->WPR = 0xCAu;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <unlock_write_protection+0x1c>)
 8000e5e:	22ca      	movs	r2, #202	; 0xca
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53u;
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <unlock_write_protection+0x1c>)
 8000e64:	2253      	movs	r2, #83	; 0x53
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40002800 	.word	0x40002800

08000e78 <enable_write_protection>:

static void enable_write_protection() {
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
	RTC->WPR |= 0xFFu;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <enable_write_protection+0x1c>)
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <enable_write_protection+0x1c>)
 8000e82:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000e86:	6253      	str	r3, [r2, #36]	; 0x24

}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40002800 	.word	0x40002800

08000e98 <RTC_init>:

void RTC_init(date_time_type *time) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= 1u << 28;
 8000ea0:	4b52      	ldr	r3, [pc, #328]	; (8000fec <RTC_init+0x154>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	4a51      	ldr	r2, [pc, #324]	; (8000fec <RTC_init+0x154>)
 8000ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= 1u << 8;
 8000eac:	4b50      	ldr	r3, [pc, #320]	; (8000ff0 <RTC_init+0x158>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <RTC_init+0x158>)
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb6:	6013      	str	r3, [r2, #0]
	RCC->BDCR |= 1u << 15;
 8000eb8:	4b4c      	ldr	r3, [pc, #304]	; (8000fec <RTC_init+0x154>)
 8000eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ebc:	4a4b      	ldr	r2, [pc, #300]	; (8000fec <RTC_init+0x154>)
 8000ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ec2:	6713      	str	r3, [r2, #112]	; 0x70

	unlock_write_protection();
 8000ec4:	f7ff ffc8 	bl	8000e58 <unlock_write_protection>

	//configure LSE clock for RTC
	RCC->BDCR |= 1u;
 8000ec8:	4b48      	ldr	r3, [pc, #288]	; (8000fec <RTC_init+0x154>)
 8000eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ecc:	4a47      	ldr	r2, [pc, #284]	; (8000fec <RTC_init+0x154>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6713      	str	r3, [r2, #112]	; 0x70
	while (!(RCC->BDCR & 2u))
 8000ed4:	bf00      	nop
 8000ed6:	4b45      	ldr	r3, [pc, #276]	; (8000fec <RTC_init+0x154>)
 8000ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f9      	beq.n	8000ed6 <RTC_init+0x3e>
		;

	RCC->BDCR |= 1u << 8;
 8000ee2:	4b42      	ldr	r3, [pc, #264]	; (8000fec <RTC_init+0x154>)
 8000ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee6:	4a41      	ldr	r2, [pc, #260]	; (8000fec <RTC_init+0x154>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	6713      	str	r3, [r2, #112]	; 0x70

	//Set INIT bit to 1 in the RTC_ISR register to enter initialization mode
	RTC->ISR |= 1u << 7;
 8000eee:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <RTC_init+0x15c>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	4a40      	ldr	r2, [pc, #256]	; (8000ff4 <RTC_init+0x15c>)
 8000ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef8:	60d3      	str	r3, [r2, #12]

	//Poll INITF bit of in the RTC_ISR register. The initialization phase mode is entered when
	//INITF is set to 1
	while (!(RTC->ISR & (1u << 6)))
 8000efa:	bf00      	nop
 8000efc:	4b3d      	ldr	r3, [pc, #244]	; (8000ff4 <RTC_init+0x15c>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f9      	beq.n	8000efc <RTC_init+0x64>
		;

	//configure date and time
	uint32_t time_tmp = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
	uint32_t date_tmp = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]

	time_tmp |= 0x7Fu & bin2bcd(time->seconds);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff41 	bl	8000d9c <bin2bcd>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
	time_tmp |= (0x7Fu & bin2bcd(time->minutes)) << 8;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	785b      	ldrb	r3, [r3, #1]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff36 	bl	8000d9c <bin2bcd>
 8000f30:	4603      	mov	r3, r0
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
	time_tmp |= (0x3Fu & bin2bcd(time->hours)) << 16;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	789b      	ldrb	r3, [r3, #2]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff2a 	bl	8000d9c <bin2bcd>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	041b      	lsls	r3, r3, #16
 8000f4c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]

	if (time->time_format == format_12) {
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	79db      	ldrb	r3, [r3, #7]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d10a      	bne.n	8000f74 <RTC_init+0xdc>
		time_tmp |= 1u << 6;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f64:	60fb      	str	r3, [r7, #12]
		time_tmp |= time->am_pm << 22;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7a1b      	ldrb	r3, [r3, #8]
 8000f6a:	059b      	lsls	r3, r3, #22
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]
	}

	date_tmp |= 0x3Fu & bin2bcd(time->date);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	78db      	ldrb	r3, [r3, #3]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff0f 	bl	8000d9c <bin2bcd>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	60bb      	str	r3, [r7, #8]
	date_tmp |= (0x1Fu & bin2bcd(time->month)) << 8;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	795b      	ldrb	r3, [r3, #5]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff04 	bl	8000d9c <bin2bcd>
 8000f94:	4603      	mov	r3, r0
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	60bb      	str	r3, [r7, #8]
	date_tmp |= (0x7u & time->day) << 13;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	791b      	ldrb	r3, [r3, #4]
 8000fa6:	035b      	lsls	r3, r3, #13
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
	date_tmp |= (0xFFu & bin2bcd(time->year)) << 16;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	799b      	ldrb	r3, [r3, #6]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fef1 	bl	8000d9c <bin2bcd>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	041b      	lsls	r3, r3, #16
 8000fbe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]

	RTC->TR = time_tmp;
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <RTC_init+0x15c>)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6013      	str	r3, [r2, #0]
	RTC->DR = date_tmp;
 8000fce:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <RTC_init+0x15c>)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	6053      	str	r3, [r2, #4]

	//exit the initialization mode
	RTC->ISR &= ~(1u << 7);
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <RTC_init+0x15c>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <RTC_init+0x15c>)
 8000fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fde:	60d3      	str	r3, [r2, #12]

	enable_write_protection();
 8000fe0:	f7ff ff4a 	bl	8000e78 <enable_write_protection>

}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40007000 	.word	0x40007000
 8000ff4:	40002800 	.word	0x40002800

08000ff8 <get_date_time>:

date_time_type get_date_time() {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

	date_time_type date_time;

	date_time.time_format = (RTC->CR >> 6) & 1u;
 8001000:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <get_date_time+0xdc>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	099b      	lsrs	r3, r3, #6
 8001006:	b2db      	uxtb	r3, r3
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	74fb      	strb	r3, [r7, #19]
	date_time.am_pm = (RTC->TR >> 22) & 1u;
 8001010:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <get_date_time+0xdc>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	0d9b      	lsrs	r3, r3, #22
 8001016:	b2db      	uxtb	r3, r3
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	753b      	strb	r3, [r7, #20]

	date_time.seconds = bcd2bin(RTC->TR & 0x7Fu);
 8001020:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <get_date_time+0xdc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	b29b      	uxth	r3, r3
 8001026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800102a:	b29b      	uxth	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fee9 	bl	8000e04 <bcd2bin>
 8001032:	4603      	mov	r3, r0
 8001034:	733b      	strb	r3, [r7, #12]
	date_time.minutes = bcd2bin((RTC->TR >> 8) & 0x7Fu);
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <get_date_time+0xdc>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	0a1b      	lsrs	r3, r3, #8
 800103c:	b29b      	uxth	r3, r3
 800103e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001042:	b29b      	uxth	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fedd 	bl	8000e04 <bcd2bin>
 800104a:	4603      	mov	r3, r0
 800104c:	737b      	strb	r3, [r7, #13]
	date_time.hours = bcd2bin((RTC->TR >> 16) & 0x3Fu);
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <get_date_time+0xdc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	0c1b      	lsrs	r3, r3, #16
 8001054:	b29b      	uxth	r3, r3
 8001056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800105a:	b29b      	uxth	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fed1 	bl	8000e04 <bcd2bin>
 8001062:	4603      	mov	r3, r0
 8001064:	73bb      	strb	r3, [r7, #14]

	date_time.date = bcd2bin(RTC->DR & 0x3Fu);
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <get_date_time+0xdc>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	b29b      	uxth	r3, r3
 800106c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001070:	b29b      	uxth	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fec6 	bl	8000e04 <bcd2bin>
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]
	date_time.month = bcd2bin((RTC->DR >> 8) & 0x1Fu);
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <get_date_time+0xdc>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	b29b      	uxth	r3, r3
 8001084:	f003 031f 	and.w	r3, r3, #31
 8001088:	b29b      	uxth	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff feba 	bl	8000e04 <bcd2bin>
 8001090:	4603      	mov	r3, r0
 8001092:	747b      	strb	r3, [r7, #17]
	date_time.year = bcd2bin((RTC->DR >> 16) & 0xFFu);
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <get_date_time+0xdc>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	0c1b      	lsrs	r3, r3, #16
 800109a:	b29b      	uxth	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff feaf 	bl	8000e04 <bcd2bin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	74bb      	strb	r3, [r7, #18]

	date_time.day = ((RTC->DR >> 13) & 0x7u);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <get_date_time+0xdc>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	0b5b      	lsrs	r3, r3, #13
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	743b      	strb	r3, [r7, #16]

	return date_time;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	461a      	mov	r2, r3
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	cb03      	ldmia	r3!, {r0, r1}
 80010c4:	6010      	str	r0, [r2, #0]
 80010c6:	6051      	str	r1, [r2, #4]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	7213      	strb	r3, [r2, #8]
}
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40002800 	.word	0x40002800

080010d8 <set_alarm>:

void set_alarm(date_time_type *time, alarm_mask_type *alarm_mask,
		alarm_type alarm) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	4613      	mov	r3, r2
 80010e4:	71fb      	strb	r3, [r7, #7]

	enable_IR(RTC_Alarm_IRQn);
 80010e6:	2029      	movs	r0, #41	; 0x29
 80010e8:	f7ff fe18 	bl	8000d1c <enable_IR>
	enable_EXTI(17, EXTI_RE);
 80010ec:	2100      	movs	r1, #0
 80010ee:	2011      	movs	r0, #17
 80010f0:	f7ff f93a 	bl	8000368 <enable_EXTI>

	uint32_t RTC_base = 0x40002800u;
 80010f4:	4b58      	ldr	r3, [pc, #352]	; (8001258 <set_alarm+0x180>)
 80010f6:	61fb      	str	r3, [r7, #28]

	volatile uint32_t *alarm_reg = (uint32_t*) (
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <set_alarm+0x2c>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3320      	adds	r3, #32
 8001102:	e001      	b.n	8001108 <set_alarm+0x30>
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	331c      	adds	r3, #28
 8001108:	61bb      	str	r3, [r7, #24]
			alarm ? RTC_base + 0x20 : RTC_base + 0x1C);

	unlock_write_protection();
 800110a:	f7ff fea5 	bl	8000e58 <unlock_write_protection>
	uint8_t enable_alarm = alarm ? 9 : 8;
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <set_alarm+0x40>
 8001114:	2309      	movs	r3, #9
 8001116:	e000      	b.n	800111a <set_alarm+0x42>
 8001118:	2308      	movs	r3, #8
 800111a:	75fb      	strb	r3, [r7, #23]
	RTC->CR &= ~(1u << enable_alarm);
 800111c:	4b4e      	ldr	r3, [pc, #312]	; (8001258 <set_alarm+0x180>)
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	2101      	movs	r1, #1
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	494b      	ldr	r1, [pc, #300]	; (8001258 <set_alarm+0x180>)
 800112c:	4013      	ands	r3, r2
 800112e:	608b      	str	r3, [r1, #8]

	uint8_t ready_flag = alarm ? 1 : 0;
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	bf14      	ite	ne
 8001136:	2301      	movne	r3, #1
 8001138:	2300      	moveq	r3, #0
 800113a:	b2db      	uxtb	r3, r3
 800113c:	75bb      	strb	r3, [r7, #22]
	while (!((RTC->ISR >> ready_flag) & 1u))
 800113e:	bf00      	nop
 8001140:	4b45      	ldr	r3, [pc, #276]	; (8001258 <set_alarm+0x180>)
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	7dbb      	ldrb	r3, [r7, #22]
 8001146:	fa22 f303 	lsr.w	r3, r2, r3
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f6      	beq.n	8001140 <set_alarm+0x68>
		;

	*alarm_reg = 0;
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]

	*alarm_reg |= (bin2bcd(time->seconds) | (~(alarm_mask->seconds) << 7))
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fe1d 	bl	8000d9c <bin2bcd>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	43db      	mvns	r3, r3
 800116c:	01db      	lsls	r3, r3, #7
 800116e:	4313      	orrs	r3, r2
			& 0xFF;
 8001170:	b2da      	uxtb	r2, r3
	*alarm_reg |= (bin2bcd(time->seconds) | (~(alarm_mask->seconds) << 7))
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	431a      	orrs	r2, r3
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	601a      	str	r2, [r3, #0]

	*alarm_reg |= ((bin2bcd(time->minutes) | (~(alarm_mask->minutes) << 7))
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	785b      	ldrb	r3, [r3, #1]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fe0b 	bl	8000d9c <bin2bcd>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	785b      	ldrb	r3, [r3, #1]
 800118e:	43db      	mvns	r3, r3
 8001190:	01db      	lsls	r3, r3, #7
 8001192:	4313      	orrs	r3, r2
			& 0xFF) << 8;
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
	*alarm_reg |= ((bin2bcd(time->minutes) | (~(alarm_mask->minutes) << 7))
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	431a      	orrs	r2, r3
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	601a      	str	r2, [r3, #0]

	*alarm_reg |= ((bin2bcd(time->hours) | (~(alarm_mask->hours) << 7)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	789b      	ldrb	r3, [r3, #2]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fdf7 	bl	8000d9c <bin2bcd>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	789b      	ldrb	r3, [r3, #2]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	01db      	lsls	r3, r3, #7
 80011ba:	431a      	orrs	r2, r3
			| (time->am_pm << 6)) & 0xFF) << 16;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	7a1b      	ldrb	r3, [r3, #8]
 80011c0:	019b      	lsls	r3, r3, #6
 80011c2:	4313      	orrs	r3, r2
 80011c4:	041b      	lsls	r3, r3, #16
 80011c6:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
	*alarm_reg |= ((bin2bcd(time->hours) | (~(alarm_mask->hours) << 7)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	431a      	orrs	r2, r3
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	601a      	str	r2, [r3, #0]

	uint8_t selection = alarm_mask->weekday ? 1 : 0;
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	791b      	ldrb	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bf14      	ite	ne
 80011dc:	2301      	movne	r3, #1
 80011de:	2300      	moveq	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	757b      	strb	r3, [r7, #21]
	uint8_t mask = ~(alarm_mask->weekday) | ~(alarm_mask->date);
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	791a      	ldrb	r2, [r3, #4]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	78db      	ldrb	r3, [r3, #3]
 80011ec:	4013      	ands	r3, r2
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	753b      	strb	r3, [r7, #20]
	*alarm_reg |= ((bin2bcd(time->hours) | (mask << 7) | (selection << 6))
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	789b      	ldrb	r3, [r3, #2]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fdcf 	bl	8000d9c <bin2bcd>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	7d3b      	ldrb	r3, [r7, #20]
 8001204:	01db      	lsls	r3, r3, #7
 8001206:	431a      	orrs	r2, r3
 8001208:	7d7b      	ldrb	r3, [r7, #21]
 800120a:	019b      	lsls	r3, r3, #6
 800120c:	4313      	orrs	r3, r2
			& 0xFF) << 24;
 800120e:	061a      	lsls	r2, r3, #24
	*alarm_reg |= ((bin2bcd(time->hours) | (mask << 7) | (selection << 6))
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	431a      	orrs	r2, r3
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	601a      	str	r2, [r3, #0]

	RTC->CR |= 1u << enable_alarm;
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <set_alarm+0x180>)
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	2101      	movs	r1, #1
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	490c      	ldr	r1, [pc, #48]	; (8001258 <set_alarm+0x180>)
 8001228:	4313      	orrs	r3, r2
 800122a:	608b      	str	r3, [r1, #8]

	uint8_t enable_alarm_interrupt = alarm ? 13 : 12;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <set_alarm+0x15e>
 8001232:	230d      	movs	r3, #13
 8001234:	e000      	b.n	8001238 <set_alarm+0x160>
 8001236:	230c      	movs	r3, #12
 8001238:	74fb      	strb	r3, [r7, #19]
	RTC->CR |= 1u << enable_alarm_interrupt;
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <set_alarm+0x180>)
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	7cfb      	ldrb	r3, [r7, #19]
 8001240:	2101      	movs	r1, #1
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	4904      	ldr	r1, [pc, #16]	; (8001258 <set_alarm+0x180>)
 8001248:	4313      	orrs	r3, r2
 800124a:	608b      	str	r3, [r1, #8]

	enable_write_protection();
 800124c:	f7ff fe14 	bl	8000e78 <enable_write_protection>

}
 8001250:	bf00      	nop
 8001252:	3720      	adds	r7, #32
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40002800 	.word	0x40002800

0800125c <enable_uart_clock>:
 *      Author: toni
 */
#include "UART_lib.h"
#include "clocks_lib.h"

static void enable_uart_clock(USART_TypeDef* uart) {
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

	if (uart == USART2) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <enable_uart_clock+0x54>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d106      	bne.n	800127a <enable_uart_clock+0x1e>
		RCC->APB1ENR |= 1u << 17;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <enable_uart_clock+0x58>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <enable_uart_clock+0x58>)
 8001272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001276:	6413      	str	r3, [r2, #64]	; 0x40
		RCC->APB2ENR |= 1u << 4;
	} else if (uart == USART6) {
		RCC->APB2ENR |= 1u << 5;
	}

}
 8001278:	e014      	b.n	80012a4 <enable_uart_clock+0x48>
	} else if (uart == USART1) {
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <enable_uart_clock+0x5c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d106      	bne.n	8001290 <enable_uart_clock+0x34>
		RCC->APB2ENR |= 1u << 4;
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <enable_uart_clock+0x58>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <enable_uart_clock+0x58>)
 8001288:	f043 0310 	orr.w	r3, r3, #16
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800128e:	e009      	b.n	80012a4 <enable_uart_clock+0x48>
	} else if (uart == USART6) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <enable_uart_clock+0x60>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d105      	bne.n	80012a4 <enable_uart_clock+0x48>
		RCC->APB2ENR |= 1u << 5;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <enable_uart_clock+0x58>)
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <enable_uart_clock+0x58>)
 800129e:	f043 0320 	orr.w	r3, r3, #32
 80012a2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	40004400 	.word	0x40004400
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40011000 	.word	0x40011000
 80012bc:	40011400 	.word	0x40011400

080012c0 <set_BRR>:

static void set_BRR(uint32_t baudrate, USART_TypeDef* uart) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	uint32_t clk_speed;
	if (uart == USART2) {
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <set_BRR+0x34>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d103      	bne.n	80012da <set_BRR+0x1a>
		clk_speed = get_APB1_clock();
 80012d2:	f000 fa05 	bl	80016e0 <get_APB1_clock>
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	e002      	b.n	80012e0 <set_BRR+0x20>
	} else {
		clk_speed = get_APB2_clock();
 80012da:	f000 fa0d 	bl	80016f8 <get_APB2_clock>
 80012de:	60f8      	str	r0, [r7, #12]
	}

	uart->BRR = clk_speed / baudrate;
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	609a      	str	r2, [r3, #8]
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40004400 	.word	0x40004400

080012f8 <uart_init>:


void uart_init(USART_TypeDef* uart, uint8_t word_length, uint8_t stop_bits, uint32_t baudrate) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	460b      	mov	r3, r1
 8001304:	72fb      	strb	r3, [r7, #11]
 8001306:	4613      	mov	r3, r2
 8001308:	72bb      	strb	r3, [r7, #10]
	enable_uart_clock(uart);
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f7ff ffa6 	bl	800125c <enable_uart_clock>

	uart_pins_init();
 8001310:	f000 fe5e 	bl	8001fd0 <uart_pins_init>

	//Enable the USART
	uart->CR1 |= 1u << 13;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	60da      	str	r2, [r3, #12]

	//Program the M bit in USART_CR1 to define the word length
	uart->CR1 |= word_length << 12;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	7afa      	ldrb	r2, [r7, #11]
 8001326:	0312      	lsls	r2, r2, #12
 8001328:	431a      	orrs	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	60da      	str	r2, [r3, #12]

	//Program the number of stop bits in USART_CR2.
	uart->CR2 |= stop_bits << 12;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	7aba      	ldrb	r2, [r7, #10]
 8001334:	0312      	lsls	r2, r2, #12
 8001336:	431a      	orrs	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	611a      	str	r2, [r3, #16]

	//Select the desired baud rate using the baud rate register USART_BRR
	set_BRR(baudrate, uart);
 800133c:	68f9      	ldr	r1, [r7, #12]
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffbe 	bl	80012c0 <set_BRR>

	//Set the RE bit USART_CR1. This enables the receiver which begins searching for a start bit.
	uart->CR1 |= 1u << 2;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	f043 0204 	orr.w	r2, r3, #4
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	60da      	str	r2, [r3, #12]

}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <uart_transmit_data>:

void uart_transmit_data(USART_TypeDef* uart, uint8_t* data_buffer, uint32_t len) {
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]

	//Set the TE bit in USART_CR1 to send an idle frame as first transmission.
	uart->CR1 |= 1u << 3;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	f043 0208 	orr.w	r2, r3, #8
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	60da      	str	r2, [r3, #12]

	//Write the data to send in the USART_DR register (this clears the TXE bit). Repeat this
	//for each data to be transmitted in case of single buffer.
	for (int i = 0; i < len; i++) {
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	e010      	b.n	8001398 <uart_transmit_data+0x40>
		uart->DR = data_buffer[i];
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	605a      	str	r2, [r3, #4]

		while (!(uart->SR & (1u << 7)));
 8001384:	bf00      	nop
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f9      	beq.n	8001386 <uart_transmit_data+0x2e>
	for (int i = 0; i < len; i++) {
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	d8ea      	bhi.n	8001376 <uart_transmit_data+0x1e>
	//After writing the last data into the USART_DR register, wait until TC=1. This indicates
	//that the transmission of the last frame is complete. This is required for instance when
	//the USART is disabled or enters the Halt mode to avoid corrupting the last
	//transmission.

	while(!(uart->SR & (1u << 6)));
 80013a0:	bf00      	nop
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f9      	beq.n	80013a2 <uart_transmit_data+0x4a>

	//disable transmission and clear TC bit
	uint32_t temp = uart->SR;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]
	uart->DR = 0;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
	(void) temp;
	uart->CR1 &= ~(1u << 3);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f023 0208 	bic.w	r2, r3, #8
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	60da      	str	r2, [r3, #12]


}
 80013c6:	bf00      	nop
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <get_AHB_prescaler>:

static void select_clk_source(uint8_t clk_source) {
	RCC->CFGR |= clk_source;
}

static uint16_t get_AHB_prescaler() {
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
	uint8_t bits = (15u << 4) & RCC->CFGR;
 80013da:	4b23      	ldr	r3, [pc, #140]	; (8001468 <get_AHB_prescaler+0x94>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	f023 030f 	bic.w	r3, r3, #15
 80013e4:	717b      	strb	r3, [r7, #5]
	uint16_t AHB_prescaler;

	if (!(bits & 8u)) {
 80013e6:	797b      	ldrb	r3, [r7, #5]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <get_AHB_prescaler+0x20>
		return 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e032      	b.n	800145a <get_AHB_prescaler+0x86>
	}

	switch (bits) {
 80013f4:	797b      	ldrb	r3, [r7, #5]
 80013f6:	3b08      	subs	r3, #8
 80013f8:	2b07      	cmp	r3, #7
 80013fa:	d82d      	bhi.n	8001458 <get_AHB_prescaler+0x84>
 80013fc:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <get_AHB_prescaler+0x30>)
 80013fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001402:	bf00      	nop
 8001404:	08001425 	.word	0x08001425
 8001408:	0800142b 	.word	0x0800142b
 800140c:	08001431 	.word	0x08001431
 8001410:	08001437 	.word	0x08001437
 8001414:	0800143d 	.word	0x0800143d
 8001418:	08001443 	.word	0x08001443
 800141c:	08001449 	.word	0x08001449
 8001420:	08001451 	.word	0x08001451
	case AHB_PRESCALER_2:
		AHB_prescaler = 2;
 8001424:	2302      	movs	r3, #2
 8001426:	80fb      	strh	r3, [r7, #6]
		break;
 8001428:	e016      	b.n	8001458 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_4:
		AHB_prescaler = 4;
 800142a:	2304      	movs	r3, #4
 800142c:	80fb      	strh	r3, [r7, #6]
		break;
 800142e:	e013      	b.n	8001458 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_8:
		AHB_prescaler = 8;
 8001430:	2308      	movs	r3, #8
 8001432:	80fb      	strh	r3, [r7, #6]
		break;
 8001434:	e010      	b.n	8001458 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_16:
		AHB_prescaler = 16;
 8001436:	2310      	movs	r3, #16
 8001438:	80fb      	strh	r3, [r7, #6]
		break;
 800143a:	e00d      	b.n	8001458 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_64:
		AHB_prescaler = 64;
 800143c:	2340      	movs	r3, #64	; 0x40
 800143e:	80fb      	strh	r3, [r7, #6]
		break;
 8001440:	e00a      	b.n	8001458 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_128:
		AHB_prescaler = 128;
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	80fb      	strh	r3, [r7, #6]
		break;
 8001446:	e007      	b.n	8001458 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_256:
		AHB_prescaler = 256;
 8001448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144c:	80fb      	strh	r3, [r7, #6]
		break;
 800144e:	e003      	b.n	8001458 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_512:
		AHB_prescaler = 512;
 8001450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001454:	80fb      	strh	r3, [r7, #6]
		break;
 8001456:	bf00      	nop
	}

	return AHB_prescaler;
 8001458:	88fb      	ldrh	r3, [r7, #6]
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800

0800146c <get_PLLM>:



static uint8_t get_PLLM() {
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

	return RCC->PLLCFGR & 63u;
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <get_PLLM+0x1c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800147a:	b2db      	uxtb	r3, r3
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800

0800148c <get_PLLN>:

static uint16_t get_PLLN() {
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

	return (RCC->PLLCFGR & (511u << 6)) >> 6;
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <get_PLLN+0x1c>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	099b      	lsrs	r3, r3, #6
 8001496:	b29b      	uxth	r3, r3
 8001498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800149c:	b29b      	uxth	r3, r3
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40023800 	.word	0x40023800

080014ac <get_PLLP>:

static uint8_t get_PLLP() {
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
	uint8_t PLLP;

	switch ((RCC->PLLCFGR & (3u << 16)) >> 16) {
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <get_PLLP+0x54>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	0c1b      	lsrs	r3, r3, #16
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d817      	bhi.n	80014f0 <get_PLLP+0x44>
 80014c0:	a201      	add	r2, pc, #4	; (adr r2, 80014c8 <get_PLLP+0x1c>)
 80014c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c6:	bf00      	nop
 80014c8:	080014d9 	.word	0x080014d9
 80014cc:	080014df 	.word	0x080014df
 80014d0:	080014e5 	.word	0x080014e5
 80014d4:	080014eb 	.word	0x080014eb
	case PLLP_2:
		PLLP = 2;
 80014d8:	2302      	movs	r3, #2
 80014da:	71fb      	strb	r3, [r7, #7]
		break;
 80014dc:	e008      	b.n	80014f0 <get_PLLP+0x44>
	case PLLP_4:
		PLLP = 4;
 80014de:	2304      	movs	r3, #4
 80014e0:	71fb      	strb	r3, [r7, #7]
		break;
 80014e2:	e005      	b.n	80014f0 <get_PLLP+0x44>
	case PLLP_6:
		PLLP = 6;
 80014e4:	2306      	movs	r3, #6
 80014e6:	71fb      	strb	r3, [r7, #7]
		break;
 80014e8:	e002      	b.n	80014f0 <get_PLLP+0x44>
	case PLLP_8:
		PLLP = 8;
 80014ea:	2308      	movs	r3, #8
 80014ec:	71fb      	strb	r3, [r7, #7]
		break;
 80014ee:	bf00      	nop
	}

	return PLLP;
 80014f0:	79fb      	ldrb	r3, [r7, #7]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800

08001504 <get_clk_value>:

static uint32_t get_clk_value(uint8_t clk_source) {
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
	uint32_t clk_value;
	if (clk_source == HSI) {
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <get_clk_value+0x16>
		clk_value = 16000000;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <get_clk_value+0x30>)
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	e004      	b.n	8001524 <get_clk_value+0x20>
	} else if (clk_source == HSE) {
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d101      	bne.n	8001524 <get_clk_value+0x20>
		clk_value = 8000000;
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <get_clk_value+0x34>)
 8001522:	60fb      	str	r3, [r7, #12]
	}

	return clk_value;
 8001524:	68fb      	ldr	r3, [r7, #12]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	00f42400 	.word	0x00f42400
 8001538:	007a1200 	.word	0x007a1200

0800153c <calculate_PLL_clk>:

static uint32_t calculate_PLL_clk(uint32_t clk_value, uint8_t PLLM,
		uint16_t PLLN, uint8_t PLLP) {
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	4608      	mov	r0, r1
 8001546:	4611      	mov	r1, r2
 8001548:	461a      	mov	r2, r3
 800154a:	4603      	mov	r3, r0
 800154c:	70fb      	strb	r3, [r7, #3]
 800154e:	460b      	mov	r3, r1
 8001550:	803b      	strh	r3, [r7, #0]
 8001552:	4613      	mov	r3, r2
 8001554:	70bb      	strb	r3, [r7, #2]

	return clk_value / PLLM * PLLN / PLLP;
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	883a      	ldrh	r2, [r7, #0]
 8001560:	fb02 f203 	mul.w	r2, r2, r3
 8001564:	78bb      	ldrb	r3, [r7, #2]
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <get_APB1_prescaler>:
	RCC->CFGR |= AHB_prescaler << 4;
	RCC->CFGR |= APB1_prescaler << 10;
	RCC->CFGR |= APB2_prescaler << 13;
}

uint8_t get_APB1_prescaler() {
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
	uint8_t bits = ((7u << 10) & RCC->CFGR) >> 10;
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <get_APB1_prescaler+0x68>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	0a9b      	lsrs	r3, r3, #10
 8001584:	b2db      	uxtb	r3, r3
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	71bb      	strb	r3, [r7, #6]
	uint8_t APB1_prescaler;

	if (!(bits & 4u)) {
 800158c:	79bb      	ldrb	r3, [r7, #6]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <get_APB1_prescaler+0x22>
		return 1;
 8001596:	2301      	movs	r3, #1
 8001598:	e01b      	b.n	80015d2 <get_APB1_prescaler+0x5a>
	}

	switch (bits) {
 800159a:	79bb      	ldrb	r3, [r7, #6]
 800159c:	3b04      	subs	r3, #4
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d816      	bhi.n	80015d0 <get_APB1_prescaler+0x58>
 80015a2:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <get_APB1_prescaler+0x30>)
 80015a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a8:	080015b9 	.word	0x080015b9
 80015ac:	080015bf 	.word	0x080015bf
 80015b0:	080015c5 	.word	0x080015c5
 80015b4:	080015cb 	.word	0x080015cb
	case APBx_PRESCALER_2:
		APB1_prescaler = 2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	71fb      	strb	r3, [r7, #7]
		break;
 80015bc:	e008      	b.n	80015d0 <get_APB1_prescaler+0x58>
	case APBx_PRESCALER_4:
		APB1_prescaler = 4;
 80015be:	2304      	movs	r3, #4
 80015c0:	71fb      	strb	r3, [r7, #7]
		break;
 80015c2:	e005      	b.n	80015d0 <get_APB1_prescaler+0x58>
	case APBx_PRESCALER_8:
		APB1_prescaler = 8;
 80015c4:	2308      	movs	r3, #8
 80015c6:	71fb      	strb	r3, [r7, #7]
		break;
 80015c8:	e002      	b.n	80015d0 <get_APB1_prescaler+0x58>
	case APBx_PRESCALER_16:
		APB1_prescaler = 16;
 80015ca:	2310      	movs	r3, #16
 80015cc:	71fb      	strb	r3, [r7, #7]
		break;
 80015ce:	bf00      	nop
	}

	return APB1_prescaler;
 80015d0:	79fb      	ldrb	r3, [r7, #7]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <get_APB2_prescaler>:

uint8_t get_APB2_prescaler() {
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
	uint8_t bits = (7u << 13) & RCC->CFGR;
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <get_APB2_prescaler+0x64>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2300      	movs	r3, #0
 80015f0:	717b      	strb	r3, [r7, #5]
	uint16_t APB2_prescaler;

	if (!(bits & 4u)) {
 80015f2:	797b      	ldrb	r3, [r7, #5]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <get_APB2_prescaler+0x1c>
		return 1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e01d      	b.n	800163c <get_APB2_prescaler+0x58>
	}

	switch (bits) {
 8001600:	797b      	ldrb	r3, [r7, #5]
 8001602:	3b04      	subs	r3, #4
 8001604:	2b03      	cmp	r3, #3
 8001606:	d817      	bhi.n	8001638 <get_APB2_prescaler+0x54>
 8001608:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <get_APB2_prescaler+0x2c>)
 800160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160e:	bf00      	nop
 8001610:	08001621 	.word	0x08001621
 8001614:	08001627 	.word	0x08001627
 8001618:	0800162d 	.word	0x0800162d
 800161c:	08001633 	.word	0x08001633
	case APBx_PRESCALER_2:
		APB2_prescaler = 2;
 8001620:	2302      	movs	r3, #2
 8001622:	80fb      	strh	r3, [r7, #6]
		break;
 8001624:	e008      	b.n	8001638 <get_APB2_prescaler+0x54>
	case APBx_PRESCALER_4:
		APB2_prescaler = 4;
 8001626:	2304      	movs	r3, #4
 8001628:	80fb      	strh	r3, [r7, #6]
		break;
 800162a:	e005      	b.n	8001638 <get_APB2_prescaler+0x54>
	case APBx_PRESCALER_8:
		APB2_prescaler = 8;
 800162c:	2308      	movs	r3, #8
 800162e:	80fb      	strh	r3, [r7, #6]
		break;
 8001630:	e002      	b.n	8001638 <get_APB2_prescaler+0x54>
	case APBx_PRESCALER_16:
		APB2_prescaler = 16;
 8001632:	2310      	movs	r3, #16
 8001634:	80fb      	strh	r3, [r7, #6]
		break;
 8001636:	bf00      	nop
	}

	return APB2_prescaler;
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	b2db      	uxtb	r3, r3
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40023800 	.word	0x40023800

0800164c <get_SYSCLK>:

uint32_t get_SYSCLK() {
 800164c:	b5b0      	push	{r4, r5, r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0

	uint8_t clk_source = 3u & RCC->CFGR;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <get_SYSCLK+0x70>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	70fb      	strb	r3, [r7, #3]
	uint32_t clk_speed;

	if (clk_source == HSI || clk_source == HSE) {
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <get_SYSCLK+0x1e>
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d107      	bne.n	800167a <get_SYSCLK+0x2e>
		clk_speed = get_clk_value(clk_source);
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff49 	bl	8001504 <get_clk_value>
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	bf00      	nop

		return calculate_PLL_clk(clk_speed, get_PLLM(), get_PLLN(), get_PLLP());

	}

	return clk_speed;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	e01b      	b.n	80016b2 <get_SYSCLK+0x66>
		if ((1u << 22) & RCC->PLLCFGR) {
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <get_SYSCLK+0x70>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <get_SYSCLK+0x40>
			clk_speed = 8000000;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <get_SYSCLK+0x74>)
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	e001      	b.n	8001690 <get_SYSCLK+0x44>
			clk_speed = 16000000;
 800168c:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <get_SYSCLK+0x78>)
 800168e:	607b      	str	r3, [r7, #4]
		return calculate_PLL_clk(clk_speed, get_PLLM(), get_PLLN(), get_PLLP());
 8001690:	f7ff feec 	bl	800146c <get_PLLM>
 8001694:	4603      	mov	r3, r0
 8001696:	461c      	mov	r4, r3
 8001698:	f7ff fef8 	bl	800148c <get_PLLN>
 800169c:	4603      	mov	r3, r0
 800169e:	461d      	mov	r5, r3
 80016a0:	f7ff ff04 	bl	80014ac <get_PLLP>
 80016a4:	4603      	mov	r3, r0
 80016a6:	462a      	mov	r2, r5
 80016a8:	4621      	mov	r1, r4
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ff46 	bl	800153c <calculate_PLL_clk>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bdb0      	pop	{r4, r5, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	007a1200 	.word	0x007a1200
 80016c4:	00f42400 	.word	0x00f42400

080016c8 <get_AHB_clock>:

uint32_t get_AHB_clock() {
 80016c8:	b598      	push	{r3, r4, r7, lr}
 80016ca:	af00      	add	r7, sp, #0

	return get_SYSCLK() / get_AHB_prescaler();
 80016cc:	f7ff ffbe 	bl	800164c <get_SYSCLK>
 80016d0:	4604      	mov	r4, r0
 80016d2:	f7ff fe7f 	bl	80013d4 <get_AHB_prescaler>
 80016d6:	4603      	mov	r3, r0
 80016d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80016dc:	4618      	mov	r0, r3
 80016de:	bd98      	pop	{r3, r4, r7, pc}

080016e0 <get_APB1_clock>:

uint32_t get_APB1_clock() {
 80016e0:	b598      	push	{r3, r4, r7, lr}
 80016e2:	af00      	add	r7, sp, #0

	return get_AHB_clock() / get_APB1_prescaler();
 80016e4:	f7ff fff0 	bl	80016c8 <get_AHB_clock>
 80016e8:	4604      	mov	r4, r0
 80016ea:	f7ff ff45 	bl	8001578 <get_APB1_prescaler>
 80016ee:	4603      	mov	r3, r0
 80016f0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	bd98      	pop	{r3, r4, r7, pc}

080016f8 <get_APB2_clock>:

uint32_t get_APB2_clock() {
 80016f8:	b598      	push	{r3, r4, r7, lr}
 80016fa:	af00      	add	r7, sp, #0

	return get_AHB_clock() / get_APB2_prescaler();
 80016fc:	f7ff ffe4 	bl	80016c8 <get_AHB_clock>
 8001700:	4604      	mov	r4, r0
 8001702:	f7ff ff6f 	bl	80015e4 <get_APB2_prescaler>
 8001706:	4603      	mov	r3, r0
 8001708:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800170c:	4618      	mov	r0, r3
 800170e:	bd98      	pop	{r3, r4, r7, pc}

08001710 <enable_timer_clock>:
 *      Author: toni
 */
#include "delay_timer_lib.h"
#include "clocks_lib.h"

static void enable_timer_clock(TIM_TypeDef *timer) {
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	if (timer == TIM1) {
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a2e      	ldr	r2, [pc, #184]	; (80017d4 <enable_timer_clock+0xc4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d106      	bne.n	800172e <enable_timer_clock+0x1e>
		RCC->APB2ENR |= 1u;
 8001720:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <enable_timer_clock+0xc8>)
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	4a2c      	ldr	r2, [pc, #176]	; (80017d8 <enable_timer_clock+0xc8>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6453      	str	r3, [r2, #68]	; 0x44
	} else if (timer == TIM10) {
		RCC->APB2ENR |= 1u << 17;
	} else if (timer == TIM11) {
		RCC->APB2ENR |= 1u << 18;
	}
}
 800172c:	e04b      	b.n	80017c6 <enable_timer_clock+0xb6>
	} else if (timer == TIM2) {
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001734:	d106      	bne.n	8001744 <enable_timer_clock+0x34>
		RCC->APB1ENR |= 1u;
 8001736:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <enable_timer_clock+0xc8>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a27      	ldr	r2, [pc, #156]	; (80017d8 <enable_timer_clock+0xc8>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001742:	e040      	b.n	80017c6 <enable_timer_clock+0xb6>
	} else if (timer == TIM3) {
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a25      	ldr	r2, [pc, #148]	; (80017dc <enable_timer_clock+0xcc>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d106      	bne.n	800175a <enable_timer_clock+0x4a>
		RCC->APB1ENR |= 2u;
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <enable_timer_clock+0xc8>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <enable_timer_clock+0xc8>)
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001758:	e035      	b.n	80017c6 <enable_timer_clock+0xb6>
	} else if (timer == TIM4) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <enable_timer_clock+0xd0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d106      	bne.n	8001770 <enable_timer_clock+0x60>
		RCC->APB1ENR |= 4u;
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <enable_timer_clock+0xc8>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <enable_timer_clock+0xc8>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800176e:	e02a      	b.n	80017c6 <enable_timer_clock+0xb6>
	} else if (timer == TIM5) {
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <enable_timer_clock+0xd4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d106      	bne.n	8001786 <enable_timer_clock+0x76>
		RCC->APB1ENR |= 8u;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <enable_timer_clock+0xc8>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <enable_timer_clock+0xc8>)
 800177e:	f043 0308 	orr.w	r3, r3, #8
 8001782:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001784:	e01f      	b.n	80017c6 <enable_timer_clock+0xb6>
	} else if (timer == TIM9) {
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <enable_timer_clock+0xd8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d106      	bne.n	800179c <enable_timer_clock+0x8c>
		RCC->APB2ENR |= 1u << 16;
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <enable_timer_clock+0xc8>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <enable_timer_clock+0xc8>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
}
 800179a:	e014      	b.n	80017c6 <enable_timer_clock+0xb6>
	} else if (timer == TIM10) {
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a13      	ldr	r2, [pc, #76]	; (80017ec <enable_timer_clock+0xdc>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d106      	bne.n	80017b2 <enable_timer_clock+0xa2>
		RCC->APB2ENR |= 1u << 17;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <enable_timer_clock+0xc8>)
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <enable_timer_clock+0xc8>)
 80017aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ae:	6453      	str	r3, [r2, #68]	; 0x44
}
 80017b0:	e009      	b.n	80017c6 <enable_timer_clock+0xb6>
	} else if (timer == TIM11) {
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <enable_timer_clock+0xe0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d105      	bne.n	80017c6 <enable_timer_clock+0xb6>
		RCC->APB2ENR |= 1u << 18;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <enable_timer_clock+0xc8>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <enable_timer_clock+0xc8>)
 80017c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c4:	6453      	str	r3, [r2, #68]	; 0x44
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40010000 	.word	0x40010000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40000400 	.word	0x40000400
 80017e0:	40000800 	.word	0x40000800
 80017e4:	40000c00 	.word	0x40000c00
 80017e8:	40014000 	.word	0x40014000
 80017ec:	40014400 	.word	0x40014400
 80017f0:	40014800 	.word	0x40014800

080017f4 <get_timer_base_clock>:

static uint32_t get_timer_base_clock(TIM_TypeDef *timer) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	uint32_t clk_speed;
	uint8_t prescaler;

	if (timer == TIM2 || timer == TIM3 || timer == TIM4 || timer == TIM5) {
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001802:	d00b      	beq.n	800181c <get_timer_base_clock+0x28>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <get_timer_base_clock+0x5c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d007      	beq.n	800181c <get_timer_base_clock+0x28>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a11      	ldr	r2, [pc, #68]	; (8001854 <get_timer_base_clock+0x60>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d003      	beq.n	800181c <get_timer_base_clock+0x28>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a10      	ldr	r2, [pc, #64]	; (8001858 <get_timer_base_clock+0x64>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d107      	bne.n	800182c <get_timer_base_clock+0x38>
		clk_speed = get_APB1_clock();
 800181c:	f7ff ff60 	bl	80016e0 <get_APB1_clock>
 8001820:	60f8      	str	r0, [r7, #12]
		prescaler = get_APB1_prescaler();
 8001822:	f7ff fea9 	bl	8001578 <get_APB1_prescaler>
 8001826:	4603      	mov	r3, r0
 8001828:	72fb      	strb	r3, [r7, #11]
 800182a:	e006      	b.n	800183a <get_timer_base_clock+0x46>
	} else {
		clk_speed = get_APB2_clock();
 800182c:	f7ff ff64 	bl	80016f8 <get_APB2_clock>
 8001830:	60f8      	str	r0, [r7, #12]
		prescaler = get_APB2_prescaler();
 8001832:	f7ff fed7 	bl	80015e4 <get_APB2_prescaler>
 8001836:	4603      	mov	r3, r0
 8001838:	72fb      	strb	r3, [r7, #11]
	}

	if (prescaler != 1) {
 800183a:	7afb      	ldrb	r3, [r7, #11]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d002      	beq.n	8001846 <get_timer_base_clock+0x52>
		clk_speed *= 2;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	60fb      	str	r3, [r7, #12]
	}

	return clk_speed;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40000400 	.word	0x40000400
 8001854:	40000800 	.word	0x40000800
 8001858:	40000c00 	.word	0x40000c00

0800185c <get_timer_clock>:

static uint32_t get_timer_clock(TIM_TypeDef *timer) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

	uint16_t prescaler = timer->PSC;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	81fb      	strh	r3, [r7, #14]

	return get_timer_base_clock(timer) / (prescaler + 1);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffc2 	bl	80017f4 <get_timer_base_clock>
 8001870:	4602      	mov	r2, r0
 8001872:	89fb      	ldrh	r3, [r7, #14]
 8001874:	3301      	adds	r3, #1
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <init_timer>:

void init_timer(TIM_TypeDef *timer, uint16_t prescaler) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
	enable_timer_clock(timer);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff3d 	bl	8001710 <enable_timer_clock>
	timer->PSC = prescaler - 1;
 8001896:	887b      	ldrh	r3, [r7, #2]
 8001898:	3b01      	subs	r3, #1
 800189a:	461a      	mov	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
	timer_clock = get_timer_clock(timer);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ffdb 	bl	800185c <get_timer_clock>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a02      	ldr	r2, [pc, #8]	; (80018b4 <init_timer+0x30>)
 80018aa:	6013      	str	r3, [r2, #0]

}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000090 	.word	0x20000090

080018b8 <delay>:

uint8_t delay(uint32_t ms, TIM_TypeDef *timer) {
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
	uint32_t max = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]

	if (timer == TIM2 || timer == TIM5) {
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018cc:	d003      	beq.n	80018d6 <delay+0x1e>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	4a22      	ldr	r2, [pc, #136]	; (800195c <delay+0xa4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d103      	bne.n	80018de <delay+0x26>
		max--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3b01      	subs	r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e002      	b.n	80018e4 <delay+0x2c>
	} else {
		max = 65535;
 80018de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e2:	60fb      	str	r3, [r7, #12]
	}

	uint8_t status = ms < (max / (timer_clock / 1000)) ? OK : OF_ERROR;
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <delay+0xa8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1e      	ldr	r2, [pc, #120]	; (8001964 <delay+0xac>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	099b      	lsrs	r3, r3, #6
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	bf2c      	ite	cs
 80018fc:	2301      	movcs	r3, #1
 80018fe:	2300      	movcc	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	72fb      	strb	r3, [r7, #11]

	if (status == OK) {
 8001904:	7afb      	ldrb	r3, [r7, #11]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d121      	bne.n	800194e <delay+0x96>
		timer->CNT = 0;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2200      	movs	r2, #0
 800190e:	625a      	str	r2, [r3, #36]	; 0x24
		timer->ARR = ms * (timer_clock / 1000) - 1;
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <delay+0xa8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a13      	ldr	r2, [pc, #76]	; (8001964 <delay+0xac>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	099b      	lsrs	r3, r3, #6
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	fb02 f303 	mul.w	r3, r2, r3
 8001922:	1e5a      	subs	r2, r3, #1
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
		timer->CR1 |= 1u;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	601a      	str	r2, [r3, #0]
		while (!(timer->SR & 1u))
 8001934:	bf00      	nop
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f9      	beq.n	8001936 <delay+0x7e>
			;
		timer->SR &= ~1u;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	f023 0201 	bic.w	r2, r3, #1
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	611a      	str	r2, [r3, #16]
	}

	return status;
 800194e:	7afb      	ldrb	r3, [r7, #11]

}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40000c00 	.word	0x40000c00
 8001960:	20000090 	.word	0x20000090
 8001964:	10624dd3 	.word	0x10624dd3

08001968 <read_bit>:
uint16_t temperature_tmp;
uint16_t humidity_tmp;

uint8_t bits_read;

static void read_bit(void) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
	pin_state value = read_pin(&dht22);
 800196e:	482b      	ldr	r0, [pc, #172]	; (8001a1c <read_bit+0xb4>)
 8001970:	f7fe fe85 	bl	800067e <read_pin>
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]

	if (bits_read == 32) {
 8001978:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <read_bit+0xb8>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b20      	cmp	r3, #32
 800197e:	d119      	bne.n	80019b4 <read_bit+0x4c>

		disable_EXTI_GPIO(10);
 8001980:	200a      	movs	r0, #10
 8001982:	f7fe fccb 	bl	800031c <disable_EXTI_GPIO>

		dht22_data.temperature = temperature_tmp;
 8001986:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <read_bit+0xbc>)
 8001988:	881a      	ldrh	r2, [r3, #0]
 800198a:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <read_bit+0xc0>)
 800198c:	801a      	strh	r2, [r3, #0]
		dht22_data.humidity = humidity_tmp;
 800198e:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <read_bit+0xc4>)
 8001990:	881a      	ldrh	r2, [r3, #0]
 8001992:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <read_bit+0xc0>)
 8001994:	805a      	strh	r2, [r3, #2]

		temperature_tmp = 0;
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <read_bit+0xbc>)
 8001998:	2200      	movs	r2, #0
 800199a:	801a      	strh	r2, [r3, #0]
		humidity_tmp = 0;
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <read_bit+0xc4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	801a      	strh	r2, [r3, #0]
		bits_read = -1;
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <read_bit+0xb8>)
 80019a4:	22ff      	movs	r2, #255	; 0xff
 80019a6:	701a      	strb	r2, [r3, #0]

		dht_status = SLEEPING;
 80019a8:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <read_bit+0xc8>)
 80019aa:	2203      	movs	r2, #3
 80019ac:	701a      	strb	r2, [r3, #0]
		dht22_application_callback();
 80019ae:	f000 fae3 	bl	8001f78 <dht22_application_callback>
 80019b2:	e028      	b.n	8001a06 <read_bit+0x9e>

	} else if (bits_read < 16) {
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <read_bit+0xb8>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d810      	bhi.n	80019de <read_bit+0x76>

		humidity_tmp |= (value << (15 - bits_read));
 80019bc:	79fa      	ldrb	r2, [r7, #7]
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <read_bit+0xb8>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	f1c3 030f 	rsb	r3, r3, #15
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <read_bit+0xc4>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <read_bit+0xc4>)
 80019da:	801a      	strh	r2, [r3, #0]
 80019dc:	e013      	b.n	8001a06 <read_bit+0x9e>

	} else if (bits_read < 32) {
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <read_bit+0xb8>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b1f      	cmp	r3, #31
 80019e4:	d80f      	bhi.n	8001a06 <read_bit+0x9e>

		temperature_tmp |= (value << (31 - bits_read));
 80019e6:	79fa      	ldrb	r2, [r7, #7]
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <read_bit+0xb8>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	f1c3 031f 	rsb	r3, r3, #31
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <read_bit+0xbc>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b21b      	sxth	r3, r3
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <read_bit+0xbc>)
 8001a04:	801a      	strh	r2, [r3, #0]

	}

	bits_read++;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <read_bit+0xb8>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <read_bit+0xb8>)
 8001a10:	701a      	strb	r2, [r3, #0]

}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200000a8 	.word	0x200000a8
 8001a20:	200000a1 	.word	0x200000a1
 8001a24:	200000a4 	.word	0x200000a4
 8001a28:	2000009c 	.word	0x2000009c
 8001a2c:	20000094 	.word	0x20000094
 8001a30:	200000a2 	.word	0x200000a2

08001a34 <dht22_handle_data_pin_IT>:

void dht22_handle_data_pin_IT() {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	IR_timer_micros(35);
 8001a38:	2023      	movs	r0, #35	; 0x23
 8001a3a:	f000 fc21 	bl	8002280 <IR_timer_micros>

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <dht22_handle_delay_IT>:


void dht22_handle_delay_IT(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0

	if (dht_status == INITIALIZING) {
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <dht22_handle_delay_IT+0x50>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d10c      	bne.n	8001a6a <dht22_handle_delay_IT+0x26>

		dht_status = INITIALIZING_2;
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <dht22_handle_delay_IT+0x50>)
 8001a52:	2202      	movs	r2, #2
 8001a54:	701a      	strb	r2, [r3, #0]

		dht22.mode = INPUT;
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <dht22_handle_delay_IT+0x54>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	715a      	strb	r2, [r3, #5]
		change_mode(&dht22);
 8001a5c:	480e      	ldr	r0, [pc, #56]	; (8001a98 <dht22_handle_delay_IT+0x54>)
 8001a5e:	f7fe fd81 	bl	8000564 <change_mode>

		IR_timer_micros(185);
 8001a62:	20b9      	movs	r0, #185	; 0xb9
 8001a64:	f000 fc0c 	bl	8002280 <IR_timer_micros>

	} else if (dht_status == SENDING_DATA) {
		read_bit();
	}

}
 8001a68:	e012      	b.n	8001a90 <dht22_handle_delay_IT+0x4c>
	} else if (dht_status == INITIALIZING_2) {
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <dht22_handle_delay_IT+0x50>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d108      	bne.n	8001a84 <dht22_handle_delay_IT+0x40>
		dht_status = SENDING_DATA;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <dht22_handle_delay_IT+0x50>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
		enable_EXTI_GPIO(10, EXTI_GPIOA, EXTI_RE);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	200a      	movs	r0, #10
 8001a7e:	f7fe fc1b 	bl	80002b8 <enable_EXTI_GPIO>
}
 8001a82:	e005      	b.n	8001a90 <dht22_handle_delay_IT+0x4c>
	} else if (dht_status == SENDING_DATA) {
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <dht22_handle_delay_IT+0x50>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <dht22_handle_delay_IT+0x4c>
		read_bit();
 8001a8c:	f7ff ff6c 	bl	8001968 <read_bit>
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200000a2 	.word	0x200000a2
 8001a98:	200000a8 	.word	0x200000a8

08001a9c <init_dht22>:

void init_dht22() {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0

	dht_status = SLEEPING;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <init_dht22+0x2c>)
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	701a      	strb	r2, [r3, #0]

	dht22.PP_OD = PP;
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <init_dht22+0x30>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	719a      	strb	r2, [r3, #6]
	dht22.mode = INPUT;
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <init_dht22+0x30>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	715a      	strb	r2, [r3, #5]
	dht22.push_pull = PULL_UP;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <init_dht22+0x30>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	71da      	strb	r2, [r3, #7]

	init_pin(&dht22);
 8001ab8:	4804      	ldr	r0, [pc, #16]	; (8001acc <init_dht22+0x30>)
 8001aba:	f7fe fd25 	bl	8000508 <init_pin>
	enable_IR(EXTI15_10_IRQn);
 8001abe:	2028      	movs	r0, #40	; 0x28
 8001ac0:	f7ff f92c 	bl	8000d1c <enable_IR>

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200000a2 	.word	0x200000a2
 8001acc:	200000a8 	.word	0x200000a8

08001ad0 <dht22_get_data>:


uint8_t dht22_get_data() {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	if (dht_status == SLEEPING) {
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <dht22_get_data+0x38>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d110      	bne.n	8001afe <dht22_get_data+0x2e>
		dht_status = INITIALIZING;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <dht22_get_data+0x38>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]

		dht22.mode = OUTPUT;
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <dht22_get_data+0x3c>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	715a      	strb	r2, [r3, #5]
		change_mode(&dht22);
 8001ae8:	4808      	ldr	r0, [pc, #32]	; (8001b0c <dht22_get_data+0x3c>)
 8001aea:	f7fe fd3b 	bl	8000564 <change_mode>
		write_pin(&dht22, LOW);
 8001aee:	2100      	movs	r1, #0
 8001af0:	4806      	ldr	r0, [pc, #24]	; (8001b0c <dht22_get_data+0x3c>)
 8001af2:	f7fe fd99 	bl	8000628 <write_pin>
		IR_timer_micros(1000);
 8001af6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001afa:	f000 fbc1 	bl	8002280 <IR_timer_micros>

	}

	return dht_status;
 8001afe:	4b02      	ldr	r3, [pc, #8]	; (8001b08 <dht22_get_data+0x38>)
 8001b00:	781b      	ldrb	r3, [r3, #0]

}
 8001b02:	4618      	mov	r0, r3
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200000a2 	.word	0x200000a2
 8001b0c:	200000a8 	.word	0x200000a8

08001b10 <dht22_get_data_and_wait>:

void dht22_get_data_and_wait() {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	dht22_get_data();
 8001b14:	f7ff ffdc 	bl	8001ad0 <dht22_get_data>
	while(dht_status != SLEEPING);
 8001b18:	bf00      	nop
 8001b1a:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <dht22_get_data_and_wait+0x18>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d1fb      	bne.n	8001b1a <dht22_get_data_and_wait+0xa>
}
 8001b22:	bf00      	nop
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200000a2 	.word	0x200000a2

08001b2c <SysTick_Handler>:
#include "UART_lib.h"
#include "stdio.h"
#include "lcd.h"
#include "RTC.h"

void SysTick_Handler() {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <SysTick_Handler+0x14>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
	dht22_handle_delay_IT();
 8001b36:	f7ff ff85 	bl	8001a44 <dht22_handle_delay_IT>

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler() {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0

	dht22_handle_data_pin_IT();
 8001b48:	f7ff ff74 	bl	8001a34 <dht22_handle_data_pin_IT>
	EXTI->PR |= 1u << 10;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <EXTI15_10_IRQHandler+0x18>)
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	4a02      	ldr	r2, [pc, #8]	; (8001b5c <EXTI15_10_IRQHandler+0x18>)
 8001b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b56:	6153      	str	r3, [r2, #20]

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40013c00 	.word	0x40013c00

08001b60 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler() {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	I2C_handle_EV(&I2C_handle);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <I2C1_EV_IRQHandler+0x10>)
 8001b66:	f7ff f823 	bl	8000bb0 <I2C_handle_EV>
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200000c0 	.word	0x200000c0

08001b74 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler() {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
	uint8_t error_code = I2C_handle_ER(&I2C_handle);
 8001b7a:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <I2C1_ER_IRQHandler+0x2c>)
 8001b7c:	f7ff f82f 	bl	8000bde <I2C_handle_ER>
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
	char number[2];
	sprintf(number, "%d", error_code);
 8001b84:	79fa      	ldrb	r2, [r7, #7]
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	4906      	ldr	r1, [pc, #24]	; (8001ba4 <I2C1_ER_IRQHandler+0x30>)
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fbe4 	bl	8002358 <siprintf>

	uart_transmit_data(USART2, (uint8_t*) number, 2);
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2202      	movs	r2, #2
 8001b94:	4619      	mov	r1, r3
 8001b96:	4804      	ldr	r0, [pc, #16]	; (8001ba8 <I2C1_ER_IRQHandler+0x34>)
 8001b98:	f7ff fbde 	bl	8001358 <uart_transmit_data>

	while(1);
 8001b9c:	e7fe      	b.n	8001b9c <I2C1_ER_IRQHandler+0x28>
 8001b9e:	bf00      	nop
 8001ba0:	200000c0 	.word	0x200000c0
 8001ba4:	08002c10 	.word	0x08002c10
 8001ba8:	40004400 	.word	0x40004400

08001bac <format_date_time>:
}


void format_date_time(char *buffer, date_time_type *date_time) {
 8001bac:	b5b0      	push	{r4, r5, r7, lr}
 8001bae:	b08e      	sub	sp, #56	; 0x38
 8001bb0:	af04      	add	r7, sp, #16
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
	char format[] = "%02d:%02d %02d/%02d/20%d";
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <format_date_time+0x58>)
 8001bb8:	f107 040c 	add.w	r4, r7, #12
 8001bbc:	461d      	mov	r5, r3
 8001bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bc6:	c403      	stmia	r4!, {r0, r1}
 8001bc8:	7022      	strb	r2, [r4, #0]
	sprintf(buffer, format, (int) date_time->hours, (int) date_time->minutes,
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	789b      	ldrb	r3, [r3, #2]
 8001bce:	461c      	mov	r4, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	461d      	mov	r5, r3
			(int) date_time->date,
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	78db      	ldrb	r3, [r3, #3]
	sprintf(buffer, format, (int) date_time->hours, (int) date_time->minutes,
 8001bda:	461a      	mov	r2, r3
			(int) date_time->month, (int) date_time->year);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	795b      	ldrb	r3, [r3, #5]
	sprintf(buffer, format, (int) date_time->hours, (int) date_time->minutes,
 8001be0:	4618      	mov	r0, r3
			(int) date_time->month, (int) date_time->year);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	799b      	ldrb	r3, [r3, #6]
	sprintf(buffer, format, (int) date_time->hours, (int) date_time->minutes,
 8001be6:	f107 010c 	add.w	r1, r7, #12
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	9001      	str	r0, [sp, #4]
 8001bee:	9200      	str	r2, [sp, #0]
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 fbaf 	bl	8002358 <siprintf>
}
 8001bfa:	bf00      	nop
 8001bfc:	3728      	adds	r7, #40	; 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bdb0      	pop	{r4, r5, r7, pc}
 8001c02:	bf00      	nop
 8001c04:	08002c14 	.word	0x08002c14

08001c08 <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler() {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af02      	add	r7, sp, #8

	date_time_type date_time = get_date_time();
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f9f0 	bl	8000ff8 <get_date_time>
	char date_time_str[16];
	format_date_time(date_time_str, &date_time);
 8001c18:	f107 0214 	add.w	r2, r7, #20
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ffc3 	bl	8001bac <format_date_time>
	LCD_write(&I2C_handle, date_time_str, 16, 0, 0);
 8001c26:	1d39      	adds	r1, r7, #4
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	2210      	movs	r2, #16
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <RTC_Alarm_IRQHandler+0x3c>)
 8001c32:	f000 f929 	bl	8001e88 <LCD_write>

	dht22_get_data_and_wait();
 8001c36:	f7ff ff6b 	bl	8001b10 <dht22_get_data_and_wait>

}
 8001c3a:	bf00      	nop
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200000c0 	.word	0x200000c0

08001c48 <send_data>:
//5th-8th bit - data pins



static void send_data(I2C_handle_type *I2C_handle, uint8_t data,
		LCD_data_type data_type) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	70fb      	strb	r3, [r7, #3]
 8001c54:	4613      	mov	r3, r2
 8001c56:	70bb      	strb	r3, [r7, #2]
	delay(2, TIM2);
 8001c58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f7ff fe2b 	bl	80018b8 <delay>
	uint8_t control_bits =
 8001c62:	78bb      	ldrb	r3, [r7, #2]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <send_data+0x24>
 8001c68:	230d      	movs	r3, #13
 8001c6a:	e000      	b.n	8001c6e <send_data+0x26>
 8001c6c:	230c      	movs	r3, #12
 8001c6e:	75fb      	strb	r3, [r7, #23]
			data_type ? LCD_CONTROL_DATA : LCD_CONTROL_INSTRUCTION;
	uint8_t dataH = (data & 0xF0u) | control_bits;
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	f023 030f 	bic.w	r3, r3, #15
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	75bb      	strb	r3, [r7, #22]
	uint8_t dataL = ((data & 0xFu) << 4) | control_bits;
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	757b      	strb	r3, [r7, #21]

	uint8_t I2C_dataH[2] = { dataH, dataH & ~(1u << 2) };
 8001c8a:	7dbb      	ldrb	r3, [r7, #22]
 8001c8c:	743b      	strb	r3, [r7, #16]
 8001c8e:	7dbb      	ldrb	r3, [r7, #22]
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	747b      	strb	r3, [r7, #17]

	I2C_handle->data = I2C_dataH;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f107 0210 	add.w	r2, r7, #16
 8001c9e:	609a      	str	r2, [r3, #8]
	I2C_handle->data_len = 2;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	60da      	str	r2, [r3, #12]
	I2C_transmit_data_polling(I2C_handle);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7fe fe76 	bl	8000998 <I2C_transmit_data_polling>

	uint8_t I2C_dataL[2] = { dataL, dataL & ~(1u << 2) };
 8001cac:	7d7b      	ldrb	r3, [r7, #21]
 8001cae:	733b      	strb	r3, [r7, #12]
 8001cb0:	7d7b      	ldrb	r3, [r7, #21]
 8001cb2:	f023 0304 	bic.w	r3, r3, #4
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	737b      	strb	r3, [r7, #13]
	I2C_handle->data = I2C_dataL;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f107 020c 	add.w	r2, r7, #12
 8001cc0:	609a      	str	r2, [r3, #8]
	I2C_handle->data_len = 2;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	60da      	str	r2, [r3, #12]
	I2C_transmit_data_polling(I2C_handle);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7fe fe65 	bl	8000998 <I2C_transmit_data_polling>
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <send_command>:

static void send_command(I2C_handle_type *I2C_handle, uint8_t command) {
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	70fb      	strb	r3, [r7, #3]
	send_data(I2C_handle, command, instruction);
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ffad 	bl	8001c48 <send_data>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <send_char>:

static void send_char(I2C_handle_type *I2C_handle, char character) {
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	70fb      	strb	r3, [r7, #3]
	send_data(I2C_handle, (uint8_t) character, data);
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	2201      	movs	r2, #1
 8001d06:	4619      	mov	r1, r3
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff9d 	bl	8001c48 <send_data>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <send_string>:

static void send_string(I2C_handle_type *I2C_handle, char *string, uint8_t len) {
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	4613      	mov	r3, r2
 8001d22:	71fb      	strb	r3, [r7, #7]

	for (uint32_t i = 0; i < len; i++) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	e00a      	b.n	8001d40 <send_string+0x2a>
		send_char(I2C_handle, *(string++));
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	60ba      	str	r2, [r7, #8]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	4619      	mov	r1, r3
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f7ff ffde 	bl	8001cf6 <send_char>
	for (uint32_t i = 0; i < len; i++) {
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d3f0      	bcc.n	8001d2a <send_string+0x14>
	}
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <send_init_command>:

static void send_init_command(I2C_handle_type *I2C_handle, uint8_t command) {
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	70fb      	strb	r3, [r7, #3]
	command <<= 4;
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	70fb      	strb	r3, [r7, #3]
	command |= LCD_CONTROL_INSTRUCTION;
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f043 030c 	orr.w	r3, r3, #12
 8001d6a:	70fb      	strb	r3, [r7, #3]

	uint8_t I2C_data[2] = { command, command & ~(1u << 2) };
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	733b      	strb	r3, [r7, #12]
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	f023 0304 	bic.w	r3, r3, #4
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	737b      	strb	r3, [r7, #13]
	I2C_handle->data = I2C_data;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f107 020c 	add.w	r2, r7, #12
 8001d80:	609a      	str	r2, [r3, #8]
	I2C_handle->data_len = 2;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2202      	movs	r2, #2
 8001d86:	60da      	str	r2, [r3, #12]
	I2C_transmit_data_polling(I2C_handle);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7fe fe05 	bl	8000998 <I2C_transmit_data_polling>
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <send_commands>:

static void send_commands(I2C_handle_type *I2C_handle, uint8_t *commands,
		uint8_t len) {
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	4613      	mov	r3, r2
 8001da2:	71fb      	strb	r3, [r7, #7]

	for (uint32_t i = 0; i < len; i++) {
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e00a      	b.n	8001dc0 <send_commands+0x2a>
		send_command(I2C_handle, *(commands++));
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	60ba      	str	r2, [r7, #8]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	4619      	mov	r1, r3
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f7ff ff8e 	bl	8001cd6 <send_command>
	for (uint32_t i = 0; i < len; i++) {
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d3f0      	bcc.n	8001daa <send_commands+0x14>
	}

}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <set_cursor>:

static void set_cursor(I2C_handle_type *I2C_handle, uint8_t row, uint8_t column) {
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	70fb      	strb	r3, [r7, #3]
 8001dde:	4613      	mov	r3, r2
 8001de0:	70bb      	strb	r3, [r7, #2]
	uint8_t row_change = row ? 64 : 0;
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <set_cursor+0x1a>
 8001de8:	2340      	movs	r3, #64	; 0x40
 8001dea:	e000      	b.n	8001dee <set_cursor+0x1c>
 8001dec:	2300      	movs	r3, #0
 8001dee:	73fb      	strb	r3, [r7, #15]

	send_command(I2C_handle, 0x80u + column + row_change);
 8001df0:	78ba      	ldrb	r2, [r7, #2]
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	4413      	add	r3, r2
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	3b80      	subs	r3, #128	; 0x80
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ff69 	bl	8001cd6 <send_command>

}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <LCD_init>:

void LCD_init(I2C_handle_type *I2C_handle) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

	delay(15, TIM2);
 8001e14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e18:	200f      	movs	r0, #15
 8001e1a:	f7ff fd4d 	bl	80018b8 <delay>

	send_init_command(I2C_handle, 3u);
 8001e1e:	2103      	movs	r1, #3
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff96 	bl	8001d52 <send_init_command>

	delay(5, TIM2);
 8001e26:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e2a:	2005      	movs	r0, #5
 8001e2c:	f7ff fd44 	bl	80018b8 <delay>

	send_init_command(I2C_handle, 3u);
 8001e30:	2103      	movs	r1, #3
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ff8d 	bl	8001d52 <send_init_command>

	delay(1, TIM2);
 8001e38:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f7ff fd3b 	bl	80018b8 <delay>

	send_init_command(I2C_handle, 3u);
 8001e42:	2103      	movs	r1, #3
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff84 	bl	8001d52 <send_init_command>

	delay(1, TIM2);
 8001e4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f7ff fd32 	bl	80018b8 <delay>

	send_init_command(I2C_handle, 2u);
 8001e54:	2102      	movs	r1, #2
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ff7b 	bl	8001d52 <send_init_command>

	uint8_t commands[5] = { 0x28u, 0x08u, 0x01u, 0x06u, 0x0Cu };
 8001e5c:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <LCD_init+0x78>)
 8001e5e:	f107 0308 	add.w	r3, r7, #8
 8001e62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e66:	6018      	str	r0, [r3, #0]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	7019      	strb	r1, [r3, #0]
	send_commands(I2C_handle, commands, 5);
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	2205      	movs	r2, #5
 8001e72:	4619      	mov	r1, r3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff8e 	bl	8001d96 <send_commands>

}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	08002c30 	.word	0x08002c30

08001e88 <LCD_write>:

void LCD_write(I2C_handle_type *I2C_handle, char *text, uint8_t len,
		uint8_t row, uint8_t column) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	4611      	mov	r1, r2
 8001e94:	461a      	mov	r2, r3
 8001e96:	460b      	mov	r3, r1
 8001e98:	71fb      	strb	r3, [r7, #7]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	71bb      	strb	r3, [r7, #6]

	set_cursor(I2C_handle, row, column);
 8001e9e:	7e3a      	ldrb	r2, [r7, #24]
 8001ea0:	79bb      	ldrb	r3, [r7, #6]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7ff ff94 	bl	8001dd2 <set_cursor>

	send_string(I2C_handle, text, len);
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	461a      	mov	r2, r3
 8001eae:	68b9      	ldr	r1, [r7, #8]
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f7ff ff30 	bl	8001d16 <send_string>

}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <int2string>:
#include "lcd.h"
#include "math.h"
#include <stdio.h>
#include "NVIC_lib.h"

void int2string(uint16_t num, char *buffer) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	80fb      	strh	r3, [r7, #6]

	sprintf(buffer, "%d", num);
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4903      	ldr	r1, [pc, #12]	; (8001ee0 <int2string+0x20>)
 8001ed2:	6838      	ldr	r0, [r7, #0]
 8001ed4:	f000 fa40 	bl	8002358 <siprintf>

}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	08002c38 	.word	0x08002c38

08001ee4 <format_dht22_values>:

void format_dht22_values(char *buffer, uint16_t value) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
	uint8_t decimal = value % 10;
 8001ef0:	887a      	ldrh	r2, [r7, #2]
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <format_dht22_values+0x90>)
 8001ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ef8:	08d9      	lsrs	r1, r3, #3
 8001efa:	460b      	mov	r3, r1
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	75fb      	strb	r3, [r7, #23]
	uint8_t integer = value / 10;
 8001f08:	887b      	ldrh	r3, [r7, #2]
 8001f0a:	4a1a      	ldr	r2, [pc, #104]	; (8001f74 <format_dht22_values+0x90>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	75bb      	strb	r3, [r7, #22]

	char integer_str[2];
	int2string(integer, integer_str);
 8001f16:	7dbb      	ldrb	r3, [r7, #22]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f107 0214 	add.w	r2, r7, #20
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ffcd 	bl	8001ec0 <int2string>

	char decimal_str[1];
	int2string(decimal, decimal_str);
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	f107 0210 	add.w	r2, r7, #16
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ffc5 	bl	8001ec0 <int2string>

	char comma[] = ",";
 8001f36:	232c      	movs	r3, #44	; 0x2c
 8001f38:	81bb      	strh	r3, [r7, #12]
	strncpy(buffer, strcat(strcat(integer_str, comma), decimal_str), 4);
 8001f3a:	f107 020c 	add.w	r2, r7, #12
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fa27 	bl	8002398 <strcat>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	4619      	mov	r1, r3
 8001f52:	4610      	mov	r0, r2
 8001f54:	f000 fa20 	bl	8002398 <strcat>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fa29 	bl	80023b6 <strncpy>
	buffer[4] = '\0';
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3304      	adds	r3, #4
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	cccccccd 	.word	0xcccccccd

08001f78 <dht22_application_callback>:

void dht22_application_callback() {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af02      	add	r7, sp, #8

	char temp[5];
	char humidity[5];
	format_dht22_values(temp, dht22_data.temperature);
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <dht22_application_callback+0x50>)
 8001f80:	881a      	ldrh	r2, [r3, #0]
 8001f82:	f107 0308 	add.w	r3, r7, #8
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ffab 	bl	8001ee4 <format_dht22_values>
	format_dht22_values(humidity, dht22_data.humidity);
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <dht22_application_callback+0x50>)
 8001f90:	885a      	ldrh	r2, [r3, #2]
 8001f92:	463b      	mov	r3, r7
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ffa4 	bl	8001ee4 <format_dht22_values>

	LCD_write(&I2C_handle, temp, 4, 1, 0);
 8001f9c:	f107 0108 	add.w	r1, r7, #8
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	4808      	ldr	r0, [pc, #32]	; (8001fcc <dht22_application_callback+0x54>)
 8001faa:	f7ff ff6d 	bl	8001e88 <LCD_write>
	LCD_write(&I2C_handle, humidity, 4, 1, 5);
 8001fae:	4639      	mov	r1, r7
 8001fb0:	2305      	movs	r3, #5
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	4804      	ldr	r0, [pc, #16]	; (8001fcc <dht22_application_callback+0x54>)
 8001fba:	f7ff ff65 	bl	8001e88 <LCD_write>

}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	2000009c 	.word	0x2000009c
 8001fcc:	200000c0 	.word	0x200000c0

08001fd0 <uart_pins_init>:

void uart_pins_init() {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
//pins PA2 and PA3
	pin_type uartTX, uartRX;
	uartTX.AF_num = 7;
 8001fd6:	2307      	movs	r3, #7
 8001fd8:	753b      	strb	r3, [r7, #20]
	uartTX.PP_OD = PP;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	74bb      	strb	r3, [r7, #18]
	uartTX.gpio = GPIOA;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <uart_pins_init+0x48>)
 8001fe0:	60fb      	str	r3, [r7, #12]
	uartTX.mode = ALTERNATE_FUNCTION;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	747b      	strb	r3, [r7, #17]
	uartTX.pin_num = 2;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	743b      	strb	r3, [r7, #16]
	uartTX.push_pull = NO_PULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	74fb      	strb	r3, [r7, #19]

	uartRX = uartTX;
 8001fee:	463b      	mov	r3, r7
 8001ff0:	f107 020c 	add.w	r2, r7, #12
 8001ff4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ff6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uartRX.pin_num = 3;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	713b      	strb	r3, [r7, #4]

	init_pin(&uartTX);
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fa80 	bl	8000508 <init_pin>
	init_pin(&uartRX);
 8002008:	463b      	mov	r3, r7
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa7c 	bl	8000508 <init_pin>

}
 8002010:	bf00      	nop
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40020000 	.word	0x40020000

0800201c <I2C_pins_init>:

void I2C_pins_init() {
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
	pin_type SCL, SDA;
	SCL.AF_num = 4;
 8002022:	2304      	movs	r3, #4
 8002024:	753b      	strb	r3, [r7, #20]
	SCL.PP_OD = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	74bb      	strb	r3, [r7, #18]
	SCL.push_pull = PULL_UP;
 800202a:	2301      	movs	r3, #1
 800202c:	74fb      	strb	r3, [r7, #19]
	SCL.gpio = GPIOB;
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <I2C_pins_init+0x48>)
 8002030:	60fb      	str	r3, [r7, #12]
	SCL.mode = ALTERNATE_FUNCTION;
 8002032:	2302      	movs	r3, #2
 8002034:	747b      	strb	r3, [r7, #17]
	SCL.pin_num = 6;
 8002036:	2306      	movs	r3, #6
 8002038:	743b      	strb	r3, [r7, #16]

	SDA = SCL;
 800203a:	463b      	mov	r3, r7
 800203c:	f107 020c 	add.w	r2, r7, #12
 8002040:	ca07      	ldmia	r2, {r0, r1, r2}
 8002042:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	SDA.pin_num = 7;
 8002046:	2307      	movs	r3, #7
 8002048:	713b      	strb	r3, [r7, #4]

	init_pin(&SCL);
 800204a:	f107 030c 	add.w	r3, r7, #12
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fa5a 	bl	8000508 <init_pin>
	init_pin(&SDA);
 8002054:	463b      	mov	r3, r7
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fa56 	bl	8000508 <init_pin>

}
 800205c:	bf00      	nop
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40020400 	.word	0x40020400

08002068 <init_time>:


void init_time() {
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0

	memset(&date_time, 0, sizeof(date_time));
 800206e:	2209      	movs	r2, #9
 8002070:	2100      	movs	r1, #0
 8002072:	481a      	ldr	r0, [pc, #104]	; (80020dc <init_time+0x74>)
 8002074:	f000 f968 	bl	8002348 <memset>
	date_time.date = 11;
 8002078:	4b18      	ldr	r3, [pc, #96]	; (80020dc <init_time+0x74>)
 800207a:	220b      	movs	r2, #11
 800207c:	70da      	strb	r2, [r3, #3]
	date_time.day = tuesday;
 800207e:	4b17      	ldr	r3, [pc, #92]	; (80020dc <init_time+0x74>)
 8002080:	2202      	movs	r2, #2
 8002082:	711a      	strb	r2, [r3, #4]
	date_time.hours = 17;
 8002084:	4b15      	ldr	r3, [pc, #84]	; (80020dc <init_time+0x74>)
 8002086:	2211      	movs	r2, #17
 8002088:	709a      	strb	r2, [r3, #2]
	date_time.minutes = 23;
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <init_time+0x74>)
 800208c:	2217      	movs	r2, #23
 800208e:	705a      	strb	r2, [r3, #1]
	date_time.month = 1;
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <init_time+0x74>)
 8002092:	2201      	movs	r2, #1
 8002094:	715a      	strb	r2, [r3, #5]
	date_time.seconds = 0;
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <init_time+0x74>)
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
	date_time.time_format = format_24;
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <init_time+0x74>)
 800209e:	2200      	movs	r2, #0
 80020a0:	71da      	strb	r2, [r3, #7]
	date_time.year = 22;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <init_time+0x74>)
 80020a4:	2216      	movs	r2, #22
 80020a6:	719a      	strb	r2, [r3, #6]

	RTC_init(&date_time);
 80020a8:	480c      	ldr	r0, [pc, #48]	; (80020dc <init_time+0x74>)
 80020aa:	f7fe fef5 	bl	8000e98 <RTC_init>
	set_priority(RTC_Alarm_IRQn, 3);
 80020ae:	2103      	movs	r1, #3
 80020b0:	2029      	movs	r0, #41	; 0x29
 80020b2:	f7fe fe09 	bl	8000cc8 <set_priority>

	date_time.seconds = 0;
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <init_time+0x74>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
	alarm_mask_type mask;
	memset(&mask, 0, sizeof(mask));
 80020bc:	463b      	mov	r3, r7
 80020be:	2205      	movs	r2, #5
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f940 	bl	8002348 <memset>


	set_alarm(&date_time, &mask, alarm_A);
 80020c8:	463b      	mov	r3, r7
 80020ca:	2200      	movs	r2, #0
 80020cc:	4619      	mov	r1, r3
 80020ce:	4803      	ldr	r0, [pc, #12]	; (80020dc <init_time+0x74>)
 80020d0:	f7ff f802 	bl	80010d8 <set_alarm>
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200000b4 	.word	0x200000b4

080020e0 <main>:



int main(void) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	uart_init(USART2, UART_8BIT, UART_1_STOP_BITS, 115200);
 80020e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80020e8:	2200      	movs	r2, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	4817      	ldr	r0, [pc, #92]	; (800214c <main+0x6c>)
 80020ee:	f7ff f903 	bl	80012f8 <uart_init>

	init_systick();
 80020f2:	f000 f8a3 	bl	800223c <init_systick>

	dht22.gpio = GPIOA;
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <main+0x70>)
 80020f8:	4a16      	ldr	r2, [pc, #88]	; (8002154 <main+0x74>)
 80020fa:	601a      	str	r2, [r3, #0]
	dht22.pin_num = 10;
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <main+0x70>)
 80020fe:	220a      	movs	r2, #10
 8002100:	711a      	strb	r2, [r3, #4]
	init_dht22();
 8002102:	f7ff fccb 	bl	8001a9c <init_dht22>
	set_priority(SysTick_IRQn, 2);
 8002106:	2102      	movs	r1, #2
 8002108:	20ff      	movs	r0, #255	; 0xff
 800210a:	f7fe fddd 	bl	8000cc8 <set_priority>

	I2C_handle.peripheral = I2C1;
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <main+0x78>)
 8002110:	4a12      	ldr	r2, [pc, #72]	; (800215c <main+0x7c>)
 8002112:	601a      	str	r2, [r3, #0]
	I2C_handle.addressing_mode = I2C_7_BIT_ADDRESSING;
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <main+0x78>)
 8002116:	2200      	movs	r2, #0
 8002118:	711a      	strb	r2, [r3, #4]
	I2C_handle.slave_address = 0x27;
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <main+0x78>)
 800211c:	2227      	movs	r2, #39	; 0x27
 800211e:	80da      	strh	r2, [r3, #6]
	I2C_init(&I2C_handle);
 8002120:	480d      	ldr	r0, [pc, #52]	; (8002158 <main+0x78>)
 8002122:	f7fe fb2d 	bl	8000780 <I2C_init>
	set_priority(I2C1_EV_IRQn, 1);
 8002126:	2101      	movs	r1, #1
 8002128:	201f      	movs	r0, #31
 800212a:	f7fe fdcd 	bl	8000cc8 <set_priority>
	set_priority(I2C1_ER_IRQn, 0);
 800212e:	2100      	movs	r1, #0
 8002130:	2020      	movs	r0, #32
 8002132:	f7fe fdc9 	bl	8000cc8 <set_priority>

	init_timer(TIM2, 2);
 8002136:	2102      	movs	r1, #2
 8002138:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800213c:	f7ff fba2 	bl	8001884 <init_timer>

	LCD_init(&I2C_handle);
 8002140:	4805      	ldr	r0, [pc, #20]	; (8002158 <main+0x78>)
 8002142:	f7ff fe63 	bl	8001e0c <LCD_init>

	init_time();
 8002146:	f7ff ff8f 	bl	8002068 <init_time>

	while (1) {
 800214a:	e7fe      	b.n	800214a <main+0x6a>
 800214c:	40004400 	.word	0x40004400
 8002150:	200000a8 	.word	0x200000a8
 8002154:	40020000 	.word	0x40020000
 8002158:	200000c0 	.word	0x200000c0
 800215c:	40005400 	.word	0x40005400

08002160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <_sbrk+0x5c>)
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <_sbrk+0x60>)
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <_sbrk+0x64>)
 800217e:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <_sbrk+0x68>)
 8002180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	429a      	cmp	r2, r3
 800218e:	d207      	bcs.n	80021a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002190:	f000 f8b0 	bl	80022f4 <__errno>
 8002194:	4603      	mov	r3, r0
 8002196:	220c      	movs	r2, #12
 8002198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	e009      	b.n	80021b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <_sbrk+0x64>)
 80021b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20018000 	.word	0x20018000
 80021c0:	00000400 	.word	0x00000400
 80021c4:	20000084 	.word	0x20000084
 80021c8:	200000f0 	.word	0x200000f0

080021cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <timer>:
#include <systick_IR_timer_lib.h>
#include "clocks_lib.h"
#include "stm32f4xx.h"

static void timer(uint32_t s, uint32_t unit) {
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]

	SysTick->CTRL = 0;
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <timer+0x48>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8002200:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <timer+0x48>)
 8002202:	2200      	movs	r2, #0
 8002204:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <timer+0x48>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]

	SysTick->LOAD |= s * unit - 1;
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <timer+0x48>)
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6839      	ldr	r1, [r7, #0]
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	4907      	ldr	r1, [pc, #28]	; (8002238 <timer+0x48>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
	SysTick->CTRL |= 7u;
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <timer+0x48>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a04      	ldr	r2, [pc, #16]	; (8002238 <timer+0x48>)
 8002226:	f043 0307 	orr.w	r3, r3, #7
 800222a:	6013      	str	r3, [r2, #0]

}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000e010 	.word	0xe000e010

0800223c <init_systick>:

void init_systick() {
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0

	uint32_t processor_clock = get_AHB_clock();
 8002242:	f7ff fa41 	bl	80016c8 <get_AHB_clock>
 8002246:	6078      	str	r0, [r7, #4]
	MILLIS = processor_clock / 1000;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a09      	ldr	r2, [pc, #36]	; (8002270 <init_systick+0x34>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	099b      	lsrs	r3, r3, #6
 8002252:	4a08      	ldr	r2, [pc, #32]	; (8002274 <init_systick+0x38>)
 8002254:	6013      	str	r3, [r2, #0]
	MICROS = processor_clock / 1000000;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a07      	ldr	r2, [pc, #28]	; (8002278 <init_systick+0x3c>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <init_systick+0x40>)
 8002264:	701a      	strb	r2, [r3, #0]
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	10624dd3 	.word	0x10624dd3
 8002274:	20000098 	.word	0x20000098
 8002278:	431bde83 	.word	0x431bde83
 800227c:	200000a0 	.word	0x200000a0

08002280 <IR_timer_micros>:

	timer(ms, MILLIS);

}

void IR_timer_micros(uint32_t micros) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

	timer(micros, MICROS);
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <IR_timer_micros+0x1c>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffae 	bl	80021f0 <timer>

}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	200000a0 	.word	0x200000a0

080022a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a4:	480d      	ldr	r0, [pc, #52]	; (80022dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022a6:	490e      	ldr	r1, [pc, #56]	; (80022e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022a8:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ac:	e002      	b.n	80022b4 <LoopCopyDataInit>

080022ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b2:	3304      	adds	r3, #4

080022b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b8:	d3f9      	bcc.n	80022ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ba:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022bc:	4c0b      	ldr	r4, [pc, #44]	; (80022ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c0:	e001      	b.n	80022c6 <LoopFillZerobss>

080022c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c4:	3204      	adds	r2, #4

080022c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c8:	d3fb      	bcc.n	80022c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022ca:	f7ff ff7f 	bl	80021cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ce:	f000 f817 	bl	8002300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022d2:	f7ff ff05 	bl	80020e0 <main>
  bx  lr    
 80022d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80022e4:	08002cd8 	.word	0x08002cd8
  ldr r2, =_sbss
 80022e8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80022ec:	200000f0 	.word	0x200000f0

080022f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f0:	e7fe      	b.n	80022f0 <ADC_IRQHandler>
	...

080022f4 <__errno>:
 80022f4:	4b01      	ldr	r3, [pc, #4]	; (80022fc <__errno+0x8>)
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000000 	.word	0x20000000

08002300 <__libc_init_array>:
 8002300:	b570      	push	{r4, r5, r6, lr}
 8002302:	4d0d      	ldr	r5, [pc, #52]	; (8002338 <__libc_init_array+0x38>)
 8002304:	4c0d      	ldr	r4, [pc, #52]	; (800233c <__libc_init_array+0x3c>)
 8002306:	1b64      	subs	r4, r4, r5
 8002308:	10a4      	asrs	r4, r4, #2
 800230a:	2600      	movs	r6, #0
 800230c:	42a6      	cmp	r6, r4
 800230e:	d109      	bne.n	8002324 <__libc_init_array+0x24>
 8002310:	4d0b      	ldr	r5, [pc, #44]	; (8002340 <__libc_init_array+0x40>)
 8002312:	4c0c      	ldr	r4, [pc, #48]	; (8002344 <__libc_init_array+0x44>)
 8002314:	f000 fc70 	bl	8002bf8 <_init>
 8002318:	1b64      	subs	r4, r4, r5
 800231a:	10a4      	asrs	r4, r4, #2
 800231c:	2600      	movs	r6, #0
 800231e:	42a6      	cmp	r6, r4
 8002320:	d105      	bne.n	800232e <__libc_init_array+0x2e>
 8002322:	bd70      	pop	{r4, r5, r6, pc}
 8002324:	f855 3b04 	ldr.w	r3, [r5], #4
 8002328:	4798      	blx	r3
 800232a:	3601      	adds	r6, #1
 800232c:	e7ee      	b.n	800230c <__libc_init_array+0xc>
 800232e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002332:	4798      	blx	r3
 8002334:	3601      	adds	r6, #1
 8002336:	e7f2      	b.n	800231e <__libc_init_array+0x1e>
 8002338:	08002cd0 	.word	0x08002cd0
 800233c:	08002cd0 	.word	0x08002cd0
 8002340:	08002cd0 	.word	0x08002cd0
 8002344:	08002cd4 	.word	0x08002cd4

08002348 <memset>:
 8002348:	4402      	add	r2, r0
 800234a:	4603      	mov	r3, r0
 800234c:	4293      	cmp	r3, r2
 800234e:	d100      	bne.n	8002352 <memset+0xa>
 8002350:	4770      	bx	lr
 8002352:	f803 1b01 	strb.w	r1, [r3], #1
 8002356:	e7f9      	b.n	800234c <memset+0x4>

08002358 <siprintf>:
 8002358:	b40e      	push	{r1, r2, r3}
 800235a:	b500      	push	{lr}
 800235c:	b09c      	sub	sp, #112	; 0x70
 800235e:	ab1d      	add	r3, sp, #116	; 0x74
 8002360:	9002      	str	r0, [sp, #8]
 8002362:	9006      	str	r0, [sp, #24]
 8002364:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002368:	4809      	ldr	r0, [pc, #36]	; (8002390 <siprintf+0x38>)
 800236a:	9107      	str	r1, [sp, #28]
 800236c:	9104      	str	r1, [sp, #16]
 800236e:	4909      	ldr	r1, [pc, #36]	; (8002394 <siprintf+0x3c>)
 8002370:	f853 2b04 	ldr.w	r2, [r3], #4
 8002374:	9105      	str	r1, [sp, #20]
 8002376:	6800      	ldr	r0, [r0, #0]
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	a902      	add	r1, sp, #8
 800237c:	f000 f88a 	bl	8002494 <_svfiprintf_r>
 8002380:	9b02      	ldr	r3, [sp, #8]
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	b01c      	add	sp, #112	; 0x70
 8002388:	f85d eb04 	ldr.w	lr, [sp], #4
 800238c:	b003      	add	sp, #12
 800238e:	4770      	bx	lr
 8002390:	20000000 	.word	0x20000000
 8002394:	ffff0208 	.word	0xffff0208

08002398 <strcat>:
 8002398:	b510      	push	{r4, lr}
 800239a:	4602      	mov	r2, r0
 800239c:	7814      	ldrb	r4, [r2, #0]
 800239e:	4613      	mov	r3, r2
 80023a0:	3201      	adds	r2, #1
 80023a2:	2c00      	cmp	r4, #0
 80023a4:	d1fa      	bne.n	800239c <strcat+0x4>
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80023ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80023b0:	2a00      	cmp	r2, #0
 80023b2:	d1f9      	bne.n	80023a8 <strcat+0x10>
 80023b4:	bd10      	pop	{r4, pc}

080023b6 <strncpy>:
 80023b6:	b510      	push	{r4, lr}
 80023b8:	3901      	subs	r1, #1
 80023ba:	4603      	mov	r3, r0
 80023bc:	b132      	cbz	r2, 80023cc <strncpy+0x16>
 80023be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80023c2:	f803 4b01 	strb.w	r4, [r3], #1
 80023c6:	3a01      	subs	r2, #1
 80023c8:	2c00      	cmp	r4, #0
 80023ca:	d1f7      	bne.n	80023bc <strncpy+0x6>
 80023cc:	441a      	add	r2, r3
 80023ce:	2100      	movs	r1, #0
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d100      	bne.n	80023d6 <strncpy+0x20>
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	f803 1b01 	strb.w	r1, [r3], #1
 80023da:	e7f9      	b.n	80023d0 <strncpy+0x1a>

080023dc <__ssputs_r>:
 80023dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023e0:	688e      	ldr	r6, [r1, #8]
 80023e2:	429e      	cmp	r6, r3
 80023e4:	4682      	mov	sl, r0
 80023e6:	460c      	mov	r4, r1
 80023e8:	4690      	mov	r8, r2
 80023ea:	461f      	mov	r7, r3
 80023ec:	d838      	bhi.n	8002460 <__ssputs_r+0x84>
 80023ee:	898a      	ldrh	r2, [r1, #12]
 80023f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80023f4:	d032      	beq.n	800245c <__ssputs_r+0x80>
 80023f6:	6825      	ldr	r5, [r4, #0]
 80023f8:	6909      	ldr	r1, [r1, #16]
 80023fa:	eba5 0901 	sub.w	r9, r5, r1
 80023fe:	6965      	ldr	r5, [r4, #20]
 8002400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002404:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002408:	3301      	adds	r3, #1
 800240a:	444b      	add	r3, r9
 800240c:	106d      	asrs	r5, r5, #1
 800240e:	429d      	cmp	r5, r3
 8002410:	bf38      	it	cc
 8002412:	461d      	movcc	r5, r3
 8002414:	0553      	lsls	r3, r2, #21
 8002416:	d531      	bpl.n	800247c <__ssputs_r+0xa0>
 8002418:	4629      	mov	r1, r5
 800241a:	f000 fb47 	bl	8002aac <_malloc_r>
 800241e:	4606      	mov	r6, r0
 8002420:	b950      	cbnz	r0, 8002438 <__ssputs_r+0x5c>
 8002422:	230c      	movs	r3, #12
 8002424:	f8ca 3000 	str.w	r3, [sl]
 8002428:	89a3      	ldrh	r3, [r4, #12]
 800242a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800242e:	81a3      	strh	r3, [r4, #12]
 8002430:	f04f 30ff 	mov.w	r0, #4294967295
 8002434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002438:	6921      	ldr	r1, [r4, #16]
 800243a:	464a      	mov	r2, r9
 800243c:	f000 fabe 	bl	80029bc <memcpy>
 8002440:	89a3      	ldrh	r3, [r4, #12]
 8002442:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800244a:	81a3      	strh	r3, [r4, #12]
 800244c:	6126      	str	r6, [r4, #16]
 800244e:	6165      	str	r5, [r4, #20]
 8002450:	444e      	add	r6, r9
 8002452:	eba5 0509 	sub.w	r5, r5, r9
 8002456:	6026      	str	r6, [r4, #0]
 8002458:	60a5      	str	r5, [r4, #8]
 800245a:	463e      	mov	r6, r7
 800245c:	42be      	cmp	r6, r7
 800245e:	d900      	bls.n	8002462 <__ssputs_r+0x86>
 8002460:	463e      	mov	r6, r7
 8002462:	4632      	mov	r2, r6
 8002464:	6820      	ldr	r0, [r4, #0]
 8002466:	4641      	mov	r1, r8
 8002468:	f000 fab6 	bl	80029d8 <memmove>
 800246c:	68a3      	ldr	r3, [r4, #8]
 800246e:	6822      	ldr	r2, [r4, #0]
 8002470:	1b9b      	subs	r3, r3, r6
 8002472:	4432      	add	r2, r6
 8002474:	60a3      	str	r3, [r4, #8]
 8002476:	6022      	str	r2, [r4, #0]
 8002478:	2000      	movs	r0, #0
 800247a:	e7db      	b.n	8002434 <__ssputs_r+0x58>
 800247c:	462a      	mov	r2, r5
 800247e:	f000 fb6f 	bl	8002b60 <_realloc_r>
 8002482:	4606      	mov	r6, r0
 8002484:	2800      	cmp	r0, #0
 8002486:	d1e1      	bne.n	800244c <__ssputs_r+0x70>
 8002488:	6921      	ldr	r1, [r4, #16]
 800248a:	4650      	mov	r0, sl
 800248c:	f000 fabe 	bl	8002a0c <_free_r>
 8002490:	e7c7      	b.n	8002422 <__ssputs_r+0x46>
	...

08002494 <_svfiprintf_r>:
 8002494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002498:	4698      	mov	r8, r3
 800249a:	898b      	ldrh	r3, [r1, #12]
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	b09d      	sub	sp, #116	; 0x74
 80024a0:	4607      	mov	r7, r0
 80024a2:	460d      	mov	r5, r1
 80024a4:	4614      	mov	r4, r2
 80024a6:	d50e      	bpl.n	80024c6 <_svfiprintf_r+0x32>
 80024a8:	690b      	ldr	r3, [r1, #16]
 80024aa:	b963      	cbnz	r3, 80024c6 <_svfiprintf_r+0x32>
 80024ac:	2140      	movs	r1, #64	; 0x40
 80024ae:	f000 fafd 	bl	8002aac <_malloc_r>
 80024b2:	6028      	str	r0, [r5, #0]
 80024b4:	6128      	str	r0, [r5, #16]
 80024b6:	b920      	cbnz	r0, 80024c2 <_svfiprintf_r+0x2e>
 80024b8:	230c      	movs	r3, #12
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	e0d1      	b.n	8002666 <_svfiprintf_r+0x1d2>
 80024c2:	2340      	movs	r3, #64	; 0x40
 80024c4:	616b      	str	r3, [r5, #20]
 80024c6:	2300      	movs	r3, #0
 80024c8:	9309      	str	r3, [sp, #36]	; 0x24
 80024ca:	2320      	movs	r3, #32
 80024cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80024d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80024d4:	2330      	movs	r3, #48	; 0x30
 80024d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002680 <_svfiprintf_r+0x1ec>
 80024da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80024de:	f04f 0901 	mov.w	r9, #1
 80024e2:	4623      	mov	r3, r4
 80024e4:	469a      	mov	sl, r3
 80024e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024ea:	b10a      	cbz	r2, 80024f0 <_svfiprintf_r+0x5c>
 80024ec:	2a25      	cmp	r2, #37	; 0x25
 80024ee:	d1f9      	bne.n	80024e4 <_svfiprintf_r+0x50>
 80024f0:	ebba 0b04 	subs.w	fp, sl, r4
 80024f4:	d00b      	beq.n	800250e <_svfiprintf_r+0x7a>
 80024f6:	465b      	mov	r3, fp
 80024f8:	4622      	mov	r2, r4
 80024fa:	4629      	mov	r1, r5
 80024fc:	4638      	mov	r0, r7
 80024fe:	f7ff ff6d 	bl	80023dc <__ssputs_r>
 8002502:	3001      	adds	r0, #1
 8002504:	f000 80aa 	beq.w	800265c <_svfiprintf_r+0x1c8>
 8002508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800250a:	445a      	add	r2, fp
 800250c:	9209      	str	r2, [sp, #36]	; 0x24
 800250e:	f89a 3000 	ldrb.w	r3, [sl]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80a2 	beq.w	800265c <_svfiprintf_r+0x1c8>
 8002518:	2300      	movs	r3, #0
 800251a:	f04f 32ff 	mov.w	r2, #4294967295
 800251e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002522:	f10a 0a01 	add.w	sl, sl, #1
 8002526:	9304      	str	r3, [sp, #16]
 8002528:	9307      	str	r3, [sp, #28]
 800252a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800252e:	931a      	str	r3, [sp, #104]	; 0x68
 8002530:	4654      	mov	r4, sl
 8002532:	2205      	movs	r2, #5
 8002534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002538:	4851      	ldr	r0, [pc, #324]	; (8002680 <_svfiprintf_r+0x1ec>)
 800253a:	f7fd fe51 	bl	80001e0 <memchr>
 800253e:	9a04      	ldr	r2, [sp, #16]
 8002540:	b9d8      	cbnz	r0, 800257a <_svfiprintf_r+0xe6>
 8002542:	06d0      	lsls	r0, r2, #27
 8002544:	bf44      	itt	mi
 8002546:	2320      	movmi	r3, #32
 8002548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800254c:	0711      	lsls	r1, r2, #28
 800254e:	bf44      	itt	mi
 8002550:	232b      	movmi	r3, #43	; 0x2b
 8002552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002556:	f89a 3000 	ldrb.w	r3, [sl]
 800255a:	2b2a      	cmp	r3, #42	; 0x2a
 800255c:	d015      	beq.n	800258a <_svfiprintf_r+0xf6>
 800255e:	9a07      	ldr	r2, [sp, #28]
 8002560:	4654      	mov	r4, sl
 8002562:	2000      	movs	r0, #0
 8002564:	f04f 0c0a 	mov.w	ip, #10
 8002568:	4621      	mov	r1, r4
 800256a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800256e:	3b30      	subs	r3, #48	; 0x30
 8002570:	2b09      	cmp	r3, #9
 8002572:	d94e      	bls.n	8002612 <_svfiprintf_r+0x17e>
 8002574:	b1b0      	cbz	r0, 80025a4 <_svfiprintf_r+0x110>
 8002576:	9207      	str	r2, [sp, #28]
 8002578:	e014      	b.n	80025a4 <_svfiprintf_r+0x110>
 800257a:	eba0 0308 	sub.w	r3, r0, r8
 800257e:	fa09 f303 	lsl.w	r3, r9, r3
 8002582:	4313      	orrs	r3, r2
 8002584:	9304      	str	r3, [sp, #16]
 8002586:	46a2      	mov	sl, r4
 8002588:	e7d2      	b.n	8002530 <_svfiprintf_r+0x9c>
 800258a:	9b03      	ldr	r3, [sp, #12]
 800258c:	1d19      	adds	r1, r3, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	9103      	str	r1, [sp, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	bfbb      	ittet	lt
 8002596:	425b      	neglt	r3, r3
 8002598:	f042 0202 	orrlt.w	r2, r2, #2
 800259c:	9307      	strge	r3, [sp, #28]
 800259e:	9307      	strlt	r3, [sp, #28]
 80025a0:	bfb8      	it	lt
 80025a2:	9204      	strlt	r2, [sp, #16]
 80025a4:	7823      	ldrb	r3, [r4, #0]
 80025a6:	2b2e      	cmp	r3, #46	; 0x2e
 80025a8:	d10c      	bne.n	80025c4 <_svfiprintf_r+0x130>
 80025aa:	7863      	ldrb	r3, [r4, #1]
 80025ac:	2b2a      	cmp	r3, #42	; 0x2a
 80025ae:	d135      	bne.n	800261c <_svfiprintf_r+0x188>
 80025b0:	9b03      	ldr	r3, [sp, #12]
 80025b2:	1d1a      	adds	r2, r3, #4
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	9203      	str	r2, [sp, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bfb8      	it	lt
 80025bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80025c0:	3402      	adds	r4, #2
 80025c2:	9305      	str	r3, [sp, #20]
 80025c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002690 <_svfiprintf_r+0x1fc>
 80025c8:	7821      	ldrb	r1, [r4, #0]
 80025ca:	2203      	movs	r2, #3
 80025cc:	4650      	mov	r0, sl
 80025ce:	f7fd fe07 	bl	80001e0 <memchr>
 80025d2:	b140      	cbz	r0, 80025e6 <_svfiprintf_r+0x152>
 80025d4:	2340      	movs	r3, #64	; 0x40
 80025d6:	eba0 000a 	sub.w	r0, r0, sl
 80025da:	fa03 f000 	lsl.w	r0, r3, r0
 80025de:	9b04      	ldr	r3, [sp, #16]
 80025e0:	4303      	orrs	r3, r0
 80025e2:	3401      	adds	r4, #1
 80025e4:	9304      	str	r3, [sp, #16]
 80025e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025ea:	4826      	ldr	r0, [pc, #152]	; (8002684 <_svfiprintf_r+0x1f0>)
 80025ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025f0:	2206      	movs	r2, #6
 80025f2:	f7fd fdf5 	bl	80001e0 <memchr>
 80025f6:	2800      	cmp	r0, #0
 80025f8:	d038      	beq.n	800266c <_svfiprintf_r+0x1d8>
 80025fa:	4b23      	ldr	r3, [pc, #140]	; (8002688 <_svfiprintf_r+0x1f4>)
 80025fc:	bb1b      	cbnz	r3, 8002646 <_svfiprintf_r+0x1b2>
 80025fe:	9b03      	ldr	r3, [sp, #12]
 8002600:	3307      	adds	r3, #7
 8002602:	f023 0307 	bic.w	r3, r3, #7
 8002606:	3308      	adds	r3, #8
 8002608:	9303      	str	r3, [sp, #12]
 800260a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800260c:	4433      	add	r3, r6
 800260e:	9309      	str	r3, [sp, #36]	; 0x24
 8002610:	e767      	b.n	80024e2 <_svfiprintf_r+0x4e>
 8002612:	fb0c 3202 	mla	r2, ip, r2, r3
 8002616:	460c      	mov	r4, r1
 8002618:	2001      	movs	r0, #1
 800261a:	e7a5      	b.n	8002568 <_svfiprintf_r+0xd4>
 800261c:	2300      	movs	r3, #0
 800261e:	3401      	adds	r4, #1
 8002620:	9305      	str	r3, [sp, #20]
 8002622:	4619      	mov	r1, r3
 8002624:	f04f 0c0a 	mov.w	ip, #10
 8002628:	4620      	mov	r0, r4
 800262a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800262e:	3a30      	subs	r2, #48	; 0x30
 8002630:	2a09      	cmp	r2, #9
 8002632:	d903      	bls.n	800263c <_svfiprintf_r+0x1a8>
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0c5      	beq.n	80025c4 <_svfiprintf_r+0x130>
 8002638:	9105      	str	r1, [sp, #20]
 800263a:	e7c3      	b.n	80025c4 <_svfiprintf_r+0x130>
 800263c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002640:	4604      	mov	r4, r0
 8002642:	2301      	movs	r3, #1
 8002644:	e7f0      	b.n	8002628 <_svfiprintf_r+0x194>
 8002646:	ab03      	add	r3, sp, #12
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	462a      	mov	r2, r5
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <_svfiprintf_r+0x1f8>)
 800264e:	a904      	add	r1, sp, #16
 8002650:	4638      	mov	r0, r7
 8002652:	f3af 8000 	nop.w
 8002656:	1c42      	adds	r2, r0, #1
 8002658:	4606      	mov	r6, r0
 800265a:	d1d6      	bne.n	800260a <_svfiprintf_r+0x176>
 800265c:	89ab      	ldrh	r3, [r5, #12]
 800265e:	065b      	lsls	r3, r3, #25
 8002660:	f53f af2c 	bmi.w	80024bc <_svfiprintf_r+0x28>
 8002664:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002666:	b01d      	add	sp, #116	; 0x74
 8002668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800266c:	ab03      	add	r3, sp, #12
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	462a      	mov	r2, r5
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <_svfiprintf_r+0x1f8>)
 8002674:	a904      	add	r1, sp, #16
 8002676:	4638      	mov	r0, r7
 8002678:	f000 f87a 	bl	8002770 <_printf_i>
 800267c:	e7eb      	b.n	8002656 <_svfiprintf_r+0x1c2>
 800267e:	bf00      	nop
 8002680:	08002c3b 	.word	0x08002c3b
 8002684:	08002c45 	.word	0x08002c45
 8002688:	00000000 	.word	0x00000000
 800268c:	080023dd 	.word	0x080023dd
 8002690:	08002c41 	.word	0x08002c41

08002694 <_printf_common>:
 8002694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002698:	4616      	mov	r6, r2
 800269a:	4699      	mov	r9, r3
 800269c:	688a      	ldr	r2, [r1, #8]
 800269e:	690b      	ldr	r3, [r1, #16]
 80026a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026a4:	4293      	cmp	r3, r2
 80026a6:	bfb8      	it	lt
 80026a8:	4613      	movlt	r3, r2
 80026aa:	6033      	str	r3, [r6, #0]
 80026ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026b0:	4607      	mov	r7, r0
 80026b2:	460c      	mov	r4, r1
 80026b4:	b10a      	cbz	r2, 80026ba <_printf_common+0x26>
 80026b6:	3301      	adds	r3, #1
 80026b8:	6033      	str	r3, [r6, #0]
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	0699      	lsls	r1, r3, #26
 80026be:	bf42      	ittt	mi
 80026c0:	6833      	ldrmi	r3, [r6, #0]
 80026c2:	3302      	addmi	r3, #2
 80026c4:	6033      	strmi	r3, [r6, #0]
 80026c6:	6825      	ldr	r5, [r4, #0]
 80026c8:	f015 0506 	ands.w	r5, r5, #6
 80026cc:	d106      	bne.n	80026dc <_printf_common+0x48>
 80026ce:	f104 0a19 	add.w	sl, r4, #25
 80026d2:	68e3      	ldr	r3, [r4, #12]
 80026d4:	6832      	ldr	r2, [r6, #0]
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	42ab      	cmp	r3, r5
 80026da:	dc26      	bgt.n	800272a <_printf_common+0x96>
 80026dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80026e0:	1e13      	subs	r3, r2, #0
 80026e2:	6822      	ldr	r2, [r4, #0]
 80026e4:	bf18      	it	ne
 80026e6:	2301      	movne	r3, #1
 80026e8:	0692      	lsls	r2, r2, #26
 80026ea:	d42b      	bmi.n	8002744 <_printf_common+0xb0>
 80026ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026f0:	4649      	mov	r1, r9
 80026f2:	4638      	mov	r0, r7
 80026f4:	47c0      	blx	r8
 80026f6:	3001      	adds	r0, #1
 80026f8:	d01e      	beq.n	8002738 <_printf_common+0xa4>
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	68e5      	ldr	r5, [r4, #12]
 80026fe:	6832      	ldr	r2, [r6, #0]
 8002700:	f003 0306 	and.w	r3, r3, #6
 8002704:	2b04      	cmp	r3, #4
 8002706:	bf08      	it	eq
 8002708:	1aad      	subeq	r5, r5, r2
 800270a:	68a3      	ldr	r3, [r4, #8]
 800270c:	6922      	ldr	r2, [r4, #16]
 800270e:	bf0c      	ite	eq
 8002710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002714:	2500      	movne	r5, #0
 8002716:	4293      	cmp	r3, r2
 8002718:	bfc4      	itt	gt
 800271a:	1a9b      	subgt	r3, r3, r2
 800271c:	18ed      	addgt	r5, r5, r3
 800271e:	2600      	movs	r6, #0
 8002720:	341a      	adds	r4, #26
 8002722:	42b5      	cmp	r5, r6
 8002724:	d11a      	bne.n	800275c <_printf_common+0xc8>
 8002726:	2000      	movs	r0, #0
 8002728:	e008      	b.n	800273c <_printf_common+0xa8>
 800272a:	2301      	movs	r3, #1
 800272c:	4652      	mov	r2, sl
 800272e:	4649      	mov	r1, r9
 8002730:	4638      	mov	r0, r7
 8002732:	47c0      	blx	r8
 8002734:	3001      	adds	r0, #1
 8002736:	d103      	bne.n	8002740 <_printf_common+0xac>
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002740:	3501      	adds	r5, #1
 8002742:	e7c6      	b.n	80026d2 <_printf_common+0x3e>
 8002744:	18e1      	adds	r1, r4, r3
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	2030      	movs	r0, #48	; 0x30
 800274a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800274e:	4422      	add	r2, r4
 8002750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002758:	3302      	adds	r3, #2
 800275a:	e7c7      	b.n	80026ec <_printf_common+0x58>
 800275c:	2301      	movs	r3, #1
 800275e:	4622      	mov	r2, r4
 8002760:	4649      	mov	r1, r9
 8002762:	4638      	mov	r0, r7
 8002764:	47c0      	blx	r8
 8002766:	3001      	adds	r0, #1
 8002768:	d0e6      	beq.n	8002738 <_printf_common+0xa4>
 800276a:	3601      	adds	r6, #1
 800276c:	e7d9      	b.n	8002722 <_printf_common+0x8e>
	...

08002770 <_printf_i>:
 8002770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002774:	460c      	mov	r4, r1
 8002776:	4691      	mov	r9, r2
 8002778:	7e27      	ldrb	r7, [r4, #24]
 800277a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800277c:	2f78      	cmp	r7, #120	; 0x78
 800277e:	4680      	mov	r8, r0
 8002780:	469a      	mov	sl, r3
 8002782:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002786:	d807      	bhi.n	8002798 <_printf_i+0x28>
 8002788:	2f62      	cmp	r7, #98	; 0x62
 800278a:	d80a      	bhi.n	80027a2 <_printf_i+0x32>
 800278c:	2f00      	cmp	r7, #0
 800278e:	f000 80d8 	beq.w	8002942 <_printf_i+0x1d2>
 8002792:	2f58      	cmp	r7, #88	; 0x58
 8002794:	f000 80a3 	beq.w	80028de <_printf_i+0x16e>
 8002798:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800279c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80027a0:	e03a      	b.n	8002818 <_printf_i+0xa8>
 80027a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80027a6:	2b15      	cmp	r3, #21
 80027a8:	d8f6      	bhi.n	8002798 <_printf_i+0x28>
 80027aa:	a001      	add	r0, pc, #4	; (adr r0, 80027b0 <_printf_i+0x40>)
 80027ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80027b0:	08002809 	.word	0x08002809
 80027b4:	0800281d 	.word	0x0800281d
 80027b8:	08002799 	.word	0x08002799
 80027bc:	08002799 	.word	0x08002799
 80027c0:	08002799 	.word	0x08002799
 80027c4:	08002799 	.word	0x08002799
 80027c8:	0800281d 	.word	0x0800281d
 80027cc:	08002799 	.word	0x08002799
 80027d0:	08002799 	.word	0x08002799
 80027d4:	08002799 	.word	0x08002799
 80027d8:	08002799 	.word	0x08002799
 80027dc:	08002929 	.word	0x08002929
 80027e0:	0800284d 	.word	0x0800284d
 80027e4:	0800290b 	.word	0x0800290b
 80027e8:	08002799 	.word	0x08002799
 80027ec:	08002799 	.word	0x08002799
 80027f0:	0800294b 	.word	0x0800294b
 80027f4:	08002799 	.word	0x08002799
 80027f8:	0800284d 	.word	0x0800284d
 80027fc:	08002799 	.word	0x08002799
 8002800:	08002799 	.word	0x08002799
 8002804:	08002913 	.word	0x08002913
 8002808:	680b      	ldr	r3, [r1, #0]
 800280a:	1d1a      	adds	r2, r3, #4
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	600a      	str	r2, [r1, #0]
 8002810:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002818:	2301      	movs	r3, #1
 800281a:	e0a3      	b.n	8002964 <_printf_i+0x1f4>
 800281c:	6825      	ldr	r5, [r4, #0]
 800281e:	6808      	ldr	r0, [r1, #0]
 8002820:	062e      	lsls	r6, r5, #24
 8002822:	f100 0304 	add.w	r3, r0, #4
 8002826:	d50a      	bpl.n	800283e <_printf_i+0xce>
 8002828:	6805      	ldr	r5, [r0, #0]
 800282a:	600b      	str	r3, [r1, #0]
 800282c:	2d00      	cmp	r5, #0
 800282e:	da03      	bge.n	8002838 <_printf_i+0xc8>
 8002830:	232d      	movs	r3, #45	; 0x2d
 8002832:	426d      	negs	r5, r5
 8002834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002838:	485e      	ldr	r0, [pc, #376]	; (80029b4 <_printf_i+0x244>)
 800283a:	230a      	movs	r3, #10
 800283c:	e019      	b.n	8002872 <_printf_i+0x102>
 800283e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002842:	6805      	ldr	r5, [r0, #0]
 8002844:	600b      	str	r3, [r1, #0]
 8002846:	bf18      	it	ne
 8002848:	b22d      	sxthne	r5, r5
 800284a:	e7ef      	b.n	800282c <_printf_i+0xbc>
 800284c:	680b      	ldr	r3, [r1, #0]
 800284e:	6825      	ldr	r5, [r4, #0]
 8002850:	1d18      	adds	r0, r3, #4
 8002852:	6008      	str	r0, [r1, #0]
 8002854:	0628      	lsls	r0, r5, #24
 8002856:	d501      	bpl.n	800285c <_printf_i+0xec>
 8002858:	681d      	ldr	r5, [r3, #0]
 800285a:	e002      	b.n	8002862 <_printf_i+0xf2>
 800285c:	0669      	lsls	r1, r5, #25
 800285e:	d5fb      	bpl.n	8002858 <_printf_i+0xe8>
 8002860:	881d      	ldrh	r5, [r3, #0]
 8002862:	4854      	ldr	r0, [pc, #336]	; (80029b4 <_printf_i+0x244>)
 8002864:	2f6f      	cmp	r7, #111	; 0x6f
 8002866:	bf0c      	ite	eq
 8002868:	2308      	moveq	r3, #8
 800286a:	230a      	movne	r3, #10
 800286c:	2100      	movs	r1, #0
 800286e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002872:	6866      	ldr	r6, [r4, #4]
 8002874:	60a6      	str	r6, [r4, #8]
 8002876:	2e00      	cmp	r6, #0
 8002878:	bfa2      	ittt	ge
 800287a:	6821      	ldrge	r1, [r4, #0]
 800287c:	f021 0104 	bicge.w	r1, r1, #4
 8002880:	6021      	strge	r1, [r4, #0]
 8002882:	b90d      	cbnz	r5, 8002888 <_printf_i+0x118>
 8002884:	2e00      	cmp	r6, #0
 8002886:	d04d      	beq.n	8002924 <_printf_i+0x1b4>
 8002888:	4616      	mov	r6, r2
 800288a:	fbb5 f1f3 	udiv	r1, r5, r3
 800288e:	fb03 5711 	mls	r7, r3, r1, r5
 8002892:	5dc7      	ldrb	r7, [r0, r7]
 8002894:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002898:	462f      	mov	r7, r5
 800289a:	42bb      	cmp	r3, r7
 800289c:	460d      	mov	r5, r1
 800289e:	d9f4      	bls.n	800288a <_printf_i+0x11a>
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d10b      	bne.n	80028bc <_printf_i+0x14c>
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	07df      	lsls	r7, r3, #31
 80028a8:	d508      	bpl.n	80028bc <_printf_i+0x14c>
 80028aa:	6923      	ldr	r3, [r4, #16]
 80028ac:	6861      	ldr	r1, [r4, #4]
 80028ae:	4299      	cmp	r1, r3
 80028b0:	bfde      	ittt	le
 80028b2:	2330      	movle	r3, #48	; 0x30
 80028b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80028b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80028bc:	1b92      	subs	r2, r2, r6
 80028be:	6122      	str	r2, [r4, #16]
 80028c0:	f8cd a000 	str.w	sl, [sp]
 80028c4:	464b      	mov	r3, r9
 80028c6:	aa03      	add	r2, sp, #12
 80028c8:	4621      	mov	r1, r4
 80028ca:	4640      	mov	r0, r8
 80028cc:	f7ff fee2 	bl	8002694 <_printf_common>
 80028d0:	3001      	adds	r0, #1
 80028d2:	d14c      	bne.n	800296e <_printf_i+0x1fe>
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	b004      	add	sp, #16
 80028da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028de:	4835      	ldr	r0, [pc, #212]	; (80029b4 <_printf_i+0x244>)
 80028e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	680e      	ldr	r6, [r1, #0]
 80028e8:	061f      	lsls	r7, r3, #24
 80028ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80028ee:	600e      	str	r6, [r1, #0]
 80028f0:	d514      	bpl.n	800291c <_printf_i+0x1ac>
 80028f2:	07d9      	lsls	r1, r3, #31
 80028f4:	bf44      	itt	mi
 80028f6:	f043 0320 	orrmi.w	r3, r3, #32
 80028fa:	6023      	strmi	r3, [r4, #0]
 80028fc:	b91d      	cbnz	r5, 8002906 <_printf_i+0x196>
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	f023 0320 	bic.w	r3, r3, #32
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	2310      	movs	r3, #16
 8002908:	e7b0      	b.n	800286c <_printf_i+0xfc>
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	f043 0320 	orr.w	r3, r3, #32
 8002910:	6023      	str	r3, [r4, #0]
 8002912:	2378      	movs	r3, #120	; 0x78
 8002914:	4828      	ldr	r0, [pc, #160]	; (80029b8 <_printf_i+0x248>)
 8002916:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800291a:	e7e3      	b.n	80028e4 <_printf_i+0x174>
 800291c:	065e      	lsls	r6, r3, #25
 800291e:	bf48      	it	mi
 8002920:	b2ad      	uxthmi	r5, r5
 8002922:	e7e6      	b.n	80028f2 <_printf_i+0x182>
 8002924:	4616      	mov	r6, r2
 8002926:	e7bb      	b.n	80028a0 <_printf_i+0x130>
 8002928:	680b      	ldr	r3, [r1, #0]
 800292a:	6826      	ldr	r6, [r4, #0]
 800292c:	6960      	ldr	r0, [r4, #20]
 800292e:	1d1d      	adds	r5, r3, #4
 8002930:	600d      	str	r5, [r1, #0]
 8002932:	0635      	lsls	r5, r6, #24
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	d501      	bpl.n	800293c <_printf_i+0x1cc>
 8002938:	6018      	str	r0, [r3, #0]
 800293a:	e002      	b.n	8002942 <_printf_i+0x1d2>
 800293c:	0671      	lsls	r1, r6, #25
 800293e:	d5fb      	bpl.n	8002938 <_printf_i+0x1c8>
 8002940:	8018      	strh	r0, [r3, #0]
 8002942:	2300      	movs	r3, #0
 8002944:	6123      	str	r3, [r4, #16]
 8002946:	4616      	mov	r6, r2
 8002948:	e7ba      	b.n	80028c0 <_printf_i+0x150>
 800294a:	680b      	ldr	r3, [r1, #0]
 800294c:	1d1a      	adds	r2, r3, #4
 800294e:	600a      	str	r2, [r1, #0]
 8002950:	681e      	ldr	r6, [r3, #0]
 8002952:	6862      	ldr	r2, [r4, #4]
 8002954:	2100      	movs	r1, #0
 8002956:	4630      	mov	r0, r6
 8002958:	f7fd fc42 	bl	80001e0 <memchr>
 800295c:	b108      	cbz	r0, 8002962 <_printf_i+0x1f2>
 800295e:	1b80      	subs	r0, r0, r6
 8002960:	6060      	str	r0, [r4, #4]
 8002962:	6863      	ldr	r3, [r4, #4]
 8002964:	6123      	str	r3, [r4, #16]
 8002966:	2300      	movs	r3, #0
 8002968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800296c:	e7a8      	b.n	80028c0 <_printf_i+0x150>
 800296e:	6923      	ldr	r3, [r4, #16]
 8002970:	4632      	mov	r2, r6
 8002972:	4649      	mov	r1, r9
 8002974:	4640      	mov	r0, r8
 8002976:	47d0      	blx	sl
 8002978:	3001      	adds	r0, #1
 800297a:	d0ab      	beq.n	80028d4 <_printf_i+0x164>
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	079b      	lsls	r3, r3, #30
 8002980:	d413      	bmi.n	80029aa <_printf_i+0x23a>
 8002982:	68e0      	ldr	r0, [r4, #12]
 8002984:	9b03      	ldr	r3, [sp, #12]
 8002986:	4298      	cmp	r0, r3
 8002988:	bfb8      	it	lt
 800298a:	4618      	movlt	r0, r3
 800298c:	e7a4      	b.n	80028d8 <_printf_i+0x168>
 800298e:	2301      	movs	r3, #1
 8002990:	4632      	mov	r2, r6
 8002992:	4649      	mov	r1, r9
 8002994:	4640      	mov	r0, r8
 8002996:	47d0      	blx	sl
 8002998:	3001      	adds	r0, #1
 800299a:	d09b      	beq.n	80028d4 <_printf_i+0x164>
 800299c:	3501      	adds	r5, #1
 800299e:	68e3      	ldr	r3, [r4, #12]
 80029a0:	9903      	ldr	r1, [sp, #12]
 80029a2:	1a5b      	subs	r3, r3, r1
 80029a4:	42ab      	cmp	r3, r5
 80029a6:	dcf2      	bgt.n	800298e <_printf_i+0x21e>
 80029a8:	e7eb      	b.n	8002982 <_printf_i+0x212>
 80029aa:	2500      	movs	r5, #0
 80029ac:	f104 0619 	add.w	r6, r4, #25
 80029b0:	e7f5      	b.n	800299e <_printf_i+0x22e>
 80029b2:	bf00      	nop
 80029b4:	08002c4c 	.word	0x08002c4c
 80029b8:	08002c5d 	.word	0x08002c5d

080029bc <memcpy>:
 80029bc:	440a      	add	r2, r1
 80029be:	4291      	cmp	r1, r2
 80029c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80029c4:	d100      	bne.n	80029c8 <memcpy+0xc>
 80029c6:	4770      	bx	lr
 80029c8:	b510      	push	{r4, lr}
 80029ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029d2:	4291      	cmp	r1, r2
 80029d4:	d1f9      	bne.n	80029ca <memcpy+0xe>
 80029d6:	bd10      	pop	{r4, pc}

080029d8 <memmove>:
 80029d8:	4288      	cmp	r0, r1
 80029da:	b510      	push	{r4, lr}
 80029dc:	eb01 0402 	add.w	r4, r1, r2
 80029e0:	d902      	bls.n	80029e8 <memmove+0x10>
 80029e2:	4284      	cmp	r4, r0
 80029e4:	4623      	mov	r3, r4
 80029e6:	d807      	bhi.n	80029f8 <memmove+0x20>
 80029e8:	1e43      	subs	r3, r0, #1
 80029ea:	42a1      	cmp	r1, r4
 80029ec:	d008      	beq.n	8002a00 <memmove+0x28>
 80029ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029f6:	e7f8      	b.n	80029ea <memmove+0x12>
 80029f8:	4402      	add	r2, r0
 80029fa:	4601      	mov	r1, r0
 80029fc:	428a      	cmp	r2, r1
 80029fe:	d100      	bne.n	8002a02 <memmove+0x2a>
 8002a00:	bd10      	pop	{r4, pc}
 8002a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a0a:	e7f7      	b.n	80029fc <memmove+0x24>

08002a0c <_free_r>:
 8002a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a0e:	2900      	cmp	r1, #0
 8002a10:	d048      	beq.n	8002aa4 <_free_r+0x98>
 8002a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a16:	9001      	str	r0, [sp, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f1a1 0404 	sub.w	r4, r1, #4
 8002a1e:	bfb8      	it	lt
 8002a20:	18e4      	addlt	r4, r4, r3
 8002a22:	f000 f8d3 	bl	8002bcc <__malloc_lock>
 8002a26:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <_free_r+0x9c>)
 8002a28:	9801      	ldr	r0, [sp, #4]
 8002a2a:	6813      	ldr	r3, [r2, #0]
 8002a2c:	4615      	mov	r5, r2
 8002a2e:	b933      	cbnz	r3, 8002a3e <_free_r+0x32>
 8002a30:	6063      	str	r3, [r4, #4]
 8002a32:	6014      	str	r4, [r2, #0]
 8002a34:	b003      	add	sp, #12
 8002a36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a3a:	f000 b8cd 	b.w	8002bd8 <__malloc_unlock>
 8002a3e:	42a3      	cmp	r3, r4
 8002a40:	d90b      	bls.n	8002a5a <_free_r+0x4e>
 8002a42:	6821      	ldr	r1, [r4, #0]
 8002a44:	1862      	adds	r2, r4, r1
 8002a46:	4293      	cmp	r3, r2
 8002a48:	bf04      	itt	eq
 8002a4a:	681a      	ldreq	r2, [r3, #0]
 8002a4c:	685b      	ldreq	r3, [r3, #4]
 8002a4e:	6063      	str	r3, [r4, #4]
 8002a50:	bf04      	itt	eq
 8002a52:	1852      	addeq	r2, r2, r1
 8002a54:	6022      	streq	r2, [r4, #0]
 8002a56:	602c      	str	r4, [r5, #0]
 8002a58:	e7ec      	b.n	8002a34 <_free_r+0x28>
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	b10b      	cbz	r3, 8002a64 <_free_r+0x58>
 8002a60:	42a3      	cmp	r3, r4
 8002a62:	d9fa      	bls.n	8002a5a <_free_r+0x4e>
 8002a64:	6811      	ldr	r1, [r2, #0]
 8002a66:	1855      	adds	r5, r2, r1
 8002a68:	42a5      	cmp	r5, r4
 8002a6a:	d10b      	bne.n	8002a84 <_free_r+0x78>
 8002a6c:	6824      	ldr	r4, [r4, #0]
 8002a6e:	4421      	add	r1, r4
 8002a70:	1854      	adds	r4, r2, r1
 8002a72:	42a3      	cmp	r3, r4
 8002a74:	6011      	str	r1, [r2, #0]
 8002a76:	d1dd      	bne.n	8002a34 <_free_r+0x28>
 8002a78:	681c      	ldr	r4, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	6053      	str	r3, [r2, #4]
 8002a7e:	4421      	add	r1, r4
 8002a80:	6011      	str	r1, [r2, #0]
 8002a82:	e7d7      	b.n	8002a34 <_free_r+0x28>
 8002a84:	d902      	bls.n	8002a8c <_free_r+0x80>
 8002a86:	230c      	movs	r3, #12
 8002a88:	6003      	str	r3, [r0, #0]
 8002a8a:	e7d3      	b.n	8002a34 <_free_r+0x28>
 8002a8c:	6825      	ldr	r5, [r4, #0]
 8002a8e:	1961      	adds	r1, r4, r5
 8002a90:	428b      	cmp	r3, r1
 8002a92:	bf04      	itt	eq
 8002a94:	6819      	ldreq	r1, [r3, #0]
 8002a96:	685b      	ldreq	r3, [r3, #4]
 8002a98:	6063      	str	r3, [r4, #4]
 8002a9a:	bf04      	itt	eq
 8002a9c:	1949      	addeq	r1, r1, r5
 8002a9e:	6021      	streq	r1, [r4, #0]
 8002aa0:	6054      	str	r4, [r2, #4]
 8002aa2:	e7c7      	b.n	8002a34 <_free_r+0x28>
 8002aa4:	b003      	add	sp, #12
 8002aa6:	bd30      	pop	{r4, r5, pc}
 8002aa8:	20000088 	.word	0x20000088

08002aac <_malloc_r>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	1ccd      	adds	r5, r1, #3
 8002ab0:	f025 0503 	bic.w	r5, r5, #3
 8002ab4:	3508      	adds	r5, #8
 8002ab6:	2d0c      	cmp	r5, #12
 8002ab8:	bf38      	it	cc
 8002aba:	250c      	movcc	r5, #12
 8002abc:	2d00      	cmp	r5, #0
 8002abe:	4606      	mov	r6, r0
 8002ac0:	db01      	blt.n	8002ac6 <_malloc_r+0x1a>
 8002ac2:	42a9      	cmp	r1, r5
 8002ac4:	d903      	bls.n	8002ace <_malloc_r+0x22>
 8002ac6:	230c      	movs	r3, #12
 8002ac8:	6033      	str	r3, [r6, #0]
 8002aca:	2000      	movs	r0, #0
 8002acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ace:	f000 f87d 	bl	8002bcc <__malloc_lock>
 8002ad2:	4921      	ldr	r1, [pc, #132]	; (8002b58 <_malloc_r+0xac>)
 8002ad4:	680a      	ldr	r2, [r1, #0]
 8002ad6:	4614      	mov	r4, r2
 8002ad8:	b99c      	cbnz	r4, 8002b02 <_malloc_r+0x56>
 8002ada:	4f20      	ldr	r7, [pc, #128]	; (8002b5c <_malloc_r+0xb0>)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	b923      	cbnz	r3, 8002aea <_malloc_r+0x3e>
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	f000 f862 	bl	8002bac <_sbrk_r>
 8002ae8:	6038      	str	r0, [r7, #0]
 8002aea:	4629      	mov	r1, r5
 8002aec:	4630      	mov	r0, r6
 8002aee:	f000 f85d 	bl	8002bac <_sbrk_r>
 8002af2:	1c43      	adds	r3, r0, #1
 8002af4:	d123      	bne.n	8002b3e <_malloc_r+0x92>
 8002af6:	230c      	movs	r3, #12
 8002af8:	6033      	str	r3, [r6, #0]
 8002afa:	4630      	mov	r0, r6
 8002afc:	f000 f86c 	bl	8002bd8 <__malloc_unlock>
 8002b00:	e7e3      	b.n	8002aca <_malloc_r+0x1e>
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	1b5b      	subs	r3, r3, r5
 8002b06:	d417      	bmi.n	8002b38 <_malloc_r+0x8c>
 8002b08:	2b0b      	cmp	r3, #11
 8002b0a:	d903      	bls.n	8002b14 <_malloc_r+0x68>
 8002b0c:	6023      	str	r3, [r4, #0]
 8002b0e:	441c      	add	r4, r3
 8002b10:	6025      	str	r5, [r4, #0]
 8002b12:	e004      	b.n	8002b1e <_malloc_r+0x72>
 8002b14:	6863      	ldr	r3, [r4, #4]
 8002b16:	42a2      	cmp	r2, r4
 8002b18:	bf0c      	ite	eq
 8002b1a:	600b      	streq	r3, [r1, #0]
 8002b1c:	6053      	strne	r3, [r2, #4]
 8002b1e:	4630      	mov	r0, r6
 8002b20:	f000 f85a 	bl	8002bd8 <__malloc_unlock>
 8002b24:	f104 000b 	add.w	r0, r4, #11
 8002b28:	1d23      	adds	r3, r4, #4
 8002b2a:	f020 0007 	bic.w	r0, r0, #7
 8002b2e:	1ac2      	subs	r2, r0, r3
 8002b30:	d0cc      	beq.n	8002acc <_malloc_r+0x20>
 8002b32:	1a1b      	subs	r3, r3, r0
 8002b34:	50a3      	str	r3, [r4, r2]
 8002b36:	e7c9      	b.n	8002acc <_malloc_r+0x20>
 8002b38:	4622      	mov	r2, r4
 8002b3a:	6864      	ldr	r4, [r4, #4]
 8002b3c:	e7cc      	b.n	8002ad8 <_malloc_r+0x2c>
 8002b3e:	1cc4      	adds	r4, r0, #3
 8002b40:	f024 0403 	bic.w	r4, r4, #3
 8002b44:	42a0      	cmp	r0, r4
 8002b46:	d0e3      	beq.n	8002b10 <_malloc_r+0x64>
 8002b48:	1a21      	subs	r1, r4, r0
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	f000 f82e 	bl	8002bac <_sbrk_r>
 8002b50:	3001      	adds	r0, #1
 8002b52:	d1dd      	bne.n	8002b10 <_malloc_r+0x64>
 8002b54:	e7cf      	b.n	8002af6 <_malloc_r+0x4a>
 8002b56:	bf00      	nop
 8002b58:	20000088 	.word	0x20000088
 8002b5c:	2000008c 	.word	0x2000008c

08002b60 <_realloc_r>:
 8002b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b62:	4607      	mov	r7, r0
 8002b64:	4614      	mov	r4, r2
 8002b66:	460e      	mov	r6, r1
 8002b68:	b921      	cbnz	r1, 8002b74 <_realloc_r+0x14>
 8002b6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b6e:	4611      	mov	r1, r2
 8002b70:	f7ff bf9c 	b.w	8002aac <_malloc_r>
 8002b74:	b922      	cbnz	r2, 8002b80 <_realloc_r+0x20>
 8002b76:	f7ff ff49 	bl	8002a0c <_free_r>
 8002b7a:	4625      	mov	r5, r4
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b80:	f000 f830 	bl	8002be4 <_malloc_usable_size_r>
 8002b84:	42a0      	cmp	r0, r4
 8002b86:	d20f      	bcs.n	8002ba8 <_realloc_r+0x48>
 8002b88:	4621      	mov	r1, r4
 8002b8a:	4638      	mov	r0, r7
 8002b8c:	f7ff ff8e 	bl	8002aac <_malloc_r>
 8002b90:	4605      	mov	r5, r0
 8002b92:	2800      	cmp	r0, #0
 8002b94:	d0f2      	beq.n	8002b7c <_realloc_r+0x1c>
 8002b96:	4631      	mov	r1, r6
 8002b98:	4622      	mov	r2, r4
 8002b9a:	f7ff ff0f 	bl	80029bc <memcpy>
 8002b9e:	4631      	mov	r1, r6
 8002ba0:	4638      	mov	r0, r7
 8002ba2:	f7ff ff33 	bl	8002a0c <_free_r>
 8002ba6:	e7e9      	b.n	8002b7c <_realloc_r+0x1c>
 8002ba8:	4635      	mov	r5, r6
 8002baa:	e7e7      	b.n	8002b7c <_realloc_r+0x1c>

08002bac <_sbrk_r>:
 8002bac:	b538      	push	{r3, r4, r5, lr}
 8002bae:	4d06      	ldr	r5, [pc, #24]	; (8002bc8 <_sbrk_r+0x1c>)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	4604      	mov	r4, r0
 8002bb4:	4608      	mov	r0, r1
 8002bb6:	602b      	str	r3, [r5, #0]
 8002bb8:	f7ff fad2 	bl	8002160 <_sbrk>
 8002bbc:	1c43      	adds	r3, r0, #1
 8002bbe:	d102      	bne.n	8002bc6 <_sbrk_r+0x1a>
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	b103      	cbz	r3, 8002bc6 <_sbrk_r+0x1a>
 8002bc4:	6023      	str	r3, [r4, #0]
 8002bc6:	bd38      	pop	{r3, r4, r5, pc}
 8002bc8:	200000e0 	.word	0x200000e0

08002bcc <__malloc_lock>:
 8002bcc:	4801      	ldr	r0, [pc, #4]	; (8002bd4 <__malloc_lock+0x8>)
 8002bce:	f000 b811 	b.w	8002bf4 <__retarget_lock_acquire_recursive>
 8002bd2:	bf00      	nop
 8002bd4:	200000e8 	.word	0x200000e8

08002bd8 <__malloc_unlock>:
 8002bd8:	4801      	ldr	r0, [pc, #4]	; (8002be0 <__malloc_unlock+0x8>)
 8002bda:	f000 b80c 	b.w	8002bf6 <__retarget_lock_release_recursive>
 8002bde:	bf00      	nop
 8002be0:	200000e8 	.word	0x200000e8

08002be4 <_malloc_usable_size_r>:
 8002be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002be8:	1f18      	subs	r0, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	bfbc      	itt	lt
 8002bee:	580b      	ldrlt	r3, [r1, r0]
 8002bf0:	18c0      	addlt	r0, r0, r3
 8002bf2:	4770      	bx	lr

08002bf4 <__retarget_lock_acquire_recursive>:
 8002bf4:	4770      	bx	lr

08002bf6 <__retarget_lock_release_recursive>:
 8002bf6:	4770      	bx	lr

08002bf8 <_init>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr

08002c04 <_fini>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	bf00      	nop
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr
