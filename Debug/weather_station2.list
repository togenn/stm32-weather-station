
weather_station2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002e14  08002e14  00012e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ed8  08002ed8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002ed8  08002ed8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ed8  08002ed8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ed8  08002ed8  00012ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002edc  08002edc  00012edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000064  08002f44  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08002f44  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001883  00000000  00000000  000270bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e0  00000000  00000000  00028940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002f8  00000000  00000000  00028d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010012  00000000  00000000  00029018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005794  00000000  00000000  0003902a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000550e7  00000000  00000000  0003e7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000938a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000191c  00000000  00000000  000938f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002dfc 	.word	0x08002dfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08002dfc 	.word	0x08002dfc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <calculate_SYSCFG_values>:
 *  Created on: Nov 29, 2021
 *      Author: toni
 */
#include "EXTI_lib.h"

static void calculate_SYSCFG_values(uint8_t pin_num, uint8_t *buf) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]

	uint8_t SYSCFG_num = pin_num / 4;
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	089b      	lsrs	r3, r3, #2
 8000290:	73fb      	strb	r3, [r7, #15]
	uint8_t SYSCFG_pos = pin_num % 4 * 4;
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 0303 	and.w	r3, r3, #3
 8000298:	b2db      	uxtb	r3, r3
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	73bb      	strb	r3, [r7, #14]

	buf[0] = SYSCFG_num;
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	7bfa      	ldrb	r2, [r7, #15]
 80002a2:	701a      	strb	r2, [r3, #0]
	buf[1] = SYSCFG_pos;
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	3301      	adds	r3, #1
 80002a8:	7bba      	ldrb	r2, [r7, #14]
 80002aa:	701a      	strb	r2, [r3, #0]

}
 80002ac:	bf00      	nop
 80002ae:	3714      	adds	r7, #20
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <enable_EXTI>:

void enable_EXTI(uint8_t pin_num, uint8_t gpio, uint8_t edge) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
 80002c2:	460b      	mov	r3, r1
 80002c4:	71bb      	strb	r3, [r7, #6]
 80002c6:	4613      	mov	r3, r2
 80002c8:	717b      	strb	r3, [r7, #5]

	RCC->APB2ENR |= 1u << 14;
 80002ca:	4b2c      	ldr	r3, [pc, #176]	; (800037c <enable_EXTI+0xc4>)
 80002cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ce:	4a2b      	ldr	r2, [pc, #172]	; (800037c <enable_EXTI+0xc4>)
 80002d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002d4:	6453      	str	r3, [r2, #68]	; 0x44

	//enable correct port from SYSCFG register for EXTI
	uint8_t SYSCFG_values[2];
	calculate_SYSCFG_values(pin_num, SYSCFG_values);
 80002d6:	f107 020c 	add.w	r2, r7, #12
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	4611      	mov	r1, r2
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ffce 	bl	8000280 <calculate_SYSCFG_values>

	SYSCFG->EXTICR[SYSCFG_values[0]] |= (gpio << SYSCFG_values[1]);
 80002e4:	4a26      	ldr	r2, [pc, #152]	; (8000380 <enable_EXTI+0xc8>)
 80002e6:	7b3b      	ldrb	r3, [r7, #12]
 80002e8:	3302      	adds	r3, #2
 80002ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ee:	79ba      	ldrb	r2, [r7, #6]
 80002f0:	7b79      	ldrb	r1, [r7, #13]
 80002f2:	408a      	lsls	r2, r1
 80002f4:	4922      	ldr	r1, [pc, #136]	; (8000380 <enable_EXTI+0xc8>)
 80002f6:	7b38      	ldrb	r0, [r7, #12]
 80002f8:	431a      	orrs	r2, r3
 80002fa:	1c83      	adds	r3, r0, #2
 80002fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	switch (edge) {
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	2b02      	cmp	r3, #2
 8000304:	d006      	beq.n	8000314 <enable_EXTI+0x5c>
 8000306:	2b02      	cmp	r3, #2
 8000308:	dc2b      	bgt.n	8000362 <enable_EXTI+0xaa>
 800030a:	2b00      	cmp	r3, #0
 800030c:	d015      	beq.n	800033a <enable_EXTI+0x82>
 800030e:	2b01      	cmp	r3, #1
 8000310:	d01d      	beq.n	800034e <enable_EXTI+0x96>
 8000312:	e026      	b.n	8000362 <enable_EXTI+0xaa>
	case EXTI_REFE:
		EXTI->FTSR |= 1u << pin_num;
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <enable_EXTI+0xcc>)
 8000316:	68da      	ldr	r2, [r3, #12]
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	2101      	movs	r1, #1
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	4918      	ldr	r1, [pc, #96]	; (8000384 <enable_EXTI+0xcc>)
 8000322:	4313      	orrs	r3, r2
 8000324:	60cb      	str	r3, [r1, #12]
		EXTI->RTSR |= 1u << pin_num;
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <enable_EXTI+0xcc>)
 8000328:	689a      	ldr	r2, [r3, #8]
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	2101      	movs	r1, #1
 800032e:	fa01 f303 	lsl.w	r3, r1, r3
 8000332:	4914      	ldr	r1, [pc, #80]	; (8000384 <enable_EXTI+0xcc>)
 8000334:	4313      	orrs	r3, r2
 8000336:	608b      	str	r3, [r1, #8]
		break;
 8000338:	e013      	b.n	8000362 <enable_EXTI+0xaa>

	case EXTI_RE:
		EXTI->RTSR |= 1u << pin_num;
 800033a:	4b12      	ldr	r3, [pc, #72]	; (8000384 <enable_EXTI+0xcc>)
 800033c:	689a      	ldr	r2, [r3, #8]
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2101      	movs	r1, #1
 8000342:	fa01 f303 	lsl.w	r3, r1, r3
 8000346:	490f      	ldr	r1, [pc, #60]	; (8000384 <enable_EXTI+0xcc>)
 8000348:	4313      	orrs	r3, r2
 800034a:	608b      	str	r3, [r1, #8]
		break;
 800034c:	e009      	b.n	8000362 <enable_EXTI+0xaa>

	case EXTI_FE:
		EXTI->FTSR |= 1u << pin_num;
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <enable_EXTI+0xcc>)
 8000350:	68da      	ldr	r2, [r3, #12]
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2101      	movs	r1, #1
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	490a      	ldr	r1, [pc, #40]	; (8000384 <enable_EXTI+0xcc>)
 800035c:	4313      	orrs	r3, r2
 800035e:	60cb      	str	r3, [r1, #12]
		break;
 8000360:	bf00      	nop
	}

	EXTI->IMR |= 1u << pin_num;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <enable_EXTI+0xcc>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	2101      	movs	r1, #1
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	4905      	ldr	r1, [pc, #20]	; (8000384 <enable_EXTI+0xcc>)
 8000370:	4313      	orrs	r3, r2
 8000372:	600b      	str	r3, [r1, #0]

}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40023800 	.word	0x40023800
 8000380:	40013800 	.word	0x40013800
 8000384:	40013c00 	.word	0x40013c00

08000388 <disable_EXTI>:

void disable_EXTI(uint8_t pin_num) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	uint8_t SYSCFG_values[2];
	calculate_SYSCFG_values(pin_num, SYSCFG_values);
 8000392:	f107 020c 	add.w	r2, r7, #12
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	4611      	mov	r1, r2
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ff70 	bl	8000280 <calculate_SYSCFG_values>

	SYSCFG->EXTICR[SYSCFG_values[0]] &= ~(0xFu << SYSCFG_values[1]);
 80003a0:	4a18      	ldr	r2, [pc, #96]	; (8000404 <disable_EXTI+0x7c>)
 80003a2:	7b3b      	ldrb	r3, [r7, #12]
 80003a4:	3302      	adds	r3, #2
 80003a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003aa:	7b7b      	ldrb	r3, [r7, #13]
 80003ac:	4619      	mov	r1, r3
 80003ae:	230f      	movs	r3, #15
 80003b0:	408b      	lsls	r3, r1
 80003b2:	43db      	mvns	r3, r3
 80003b4:	4913      	ldr	r1, [pc, #76]	; (8000404 <disable_EXTI+0x7c>)
 80003b6:	7b38      	ldrb	r0, [r7, #12]
 80003b8:	401a      	ands	r2, r3
 80003ba:	1c83      	adds	r3, r0, #2
 80003bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	EXTI->FTSR &= ~(1u << pin_num);
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <disable_EXTI+0x80>)
 80003c2:	68da      	ldr	r2, [r3, #12]
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	2101      	movs	r1, #1
 80003c8:	fa01 f303 	lsl.w	r3, r1, r3
 80003cc:	43db      	mvns	r3, r3
 80003ce:	490e      	ldr	r1, [pc, #56]	; (8000408 <disable_EXTI+0x80>)
 80003d0:	4013      	ands	r3, r2
 80003d2:	60cb      	str	r3, [r1, #12]
	EXTI->RTSR &= ~(1u << pin_num);
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <disable_EXTI+0x80>)
 80003d6:	689a      	ldr	r2, [r3, #8]
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	2101      	movs	r1, #1
 80003dc:	fa01 f303 	lsl.w	r3, r1, r3
 80003e0:	43db      	mvns	r3, r3
 80003e2:	4909      	ldr	r1, [pc, #36]	; (8000408 <disable_EXTI+0x80>)
 80003e4:	4013      	ands	r3, r2
 80003e6:	608b      	str	r3, [r1, #8]

	EXTI->IMR &= ~(1u << pin_num);
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <disable_EXTI+0x80>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	2101      	movs	r1, #1
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	43db      	mvns	r3, r3
 80003f6:	4904      	ldr	r1, [pc, #16]	; (8000408 <disable_EXTI+0x80>)
 80003f8:	4013      	ands	r3, r2
 80003fa:	600b      	str	r3, [r1, #0]



}
 80003fc:	bf00      	nop
 80003fe:	3710      	adds	r7, #16
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40013800 	.word	0x40013800
 8000408:	40013c00 	.word	0x40013c00

0800040c <enable_GPIOx_clock>:
#include "GPIO_Lib.h"

static void enable_GPIOx_clock(GPIO_TypeDef *gpio) {
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]

	if (gpio == GPIOA) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a23      	ldr	r2, [pc, #140]	; (80004a4 <enable_GPIOx_clock+0x98>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <enable_GPIOx_clock+0x1e>

		RCC->AHB1ENR |= GPIOA_CLOCK_EN;
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	6313      	str	r3, [r2, #48]	; 0x30

	} else if (gpio == GPIOH) {

		RCC->AHB1ENR |= GPIOH_CLOCK_EN;
	}
}
 8000428:	e035      	b.n	8000496 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOB) {
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a1f      	ldr	r2, [pc, #124]	; (80004ac <enable_GPIOx_clock+0xa0>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <enable_GPIOx_clock+0x34>
		RCC->AHB1ENR |= GPIOB_CLOCK_EN;
 8000432:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a1c      	ldr	r2, [pc, #112]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000438:	f043 0302 	orr.w	r3, r3, #2
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043e:	e02a      	b.n	8000496 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOC) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a1b      	ldr	r2, [pc, #108]	; (80004b0 <enable_GPIOx_clock+0xa4>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <enable_GPIOx_clock+0x4a>
		RCC->AHB1ENR |= GPIOC_CLOCK_EN;
 8000448:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a16      	ldr	r2, [pc, #88]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 800044e:	f043 0304 	orr.w	r3, r3, #4
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000454:	e01f      	b.n	8000496 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOD) {
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a16      	ldr	r2, [pc, #88]	; (80004b4 <enable_GPIOx_clock+0xa8>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <enable_GPIOx_clock+0x60>
		RCC->AHB1ENR |= GPIOD_CLOCK_EN;
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a11      	ldr	r2, [pc, #68]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000464:	f043 0308 	orr.w	r3, r3, #8
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046a:	e014      	b.n	8000496 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOE) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <enable_GPIOx_clock+0xac>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <enable_GPIOx_clock+0x76>
		RCC->AHB1ENR |= GPIOE_CLOCK_EN;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a0b      	ldr	r2, [pc, #44]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 800047a:	f043 0310 	orr.w	r3, r3, #16
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000480:	e009      	b.n	8000496 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOH) {
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <enable_GPIOx_clock+0xb0>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d105      	bne.n	8000496 <enable_GPIOx_clock+0x8a>
		RCC->AHB1ENR |= GPIOH_CLOCK_EN;
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048e:	4a06      	ldr	r2, [pc, #24]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000494:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40020000 	.word	0x40020000
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40020400 	.word	0x40020400
 80004b0:	40020800 	.word	0x40020800
 80004b4:	40020c00 	.word	0x40020c00
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40021c00 	.word	0x40021c00

080004c0 <init_pin>:

void init_pin(pin_type *pin) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]

	enable_GPIOx_clock(pin->gpio);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff9d 	bl	800040c <enable_GPIOx_clock>

	change_mode(pin);
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f000 f822 	bl	800051c <change_mode>

	uint8_t reg_H_L = pin->pin_num < 8 ? 0 : 1;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	791b      	ldrb	r3, [r3, #4]
 80004dc:	2b07      	cmp	r3, #7
 80004de:	bf8c      	ite	hi
 80004e0:	2301      	movhi	r3, #1
 80004e2:	2300      	movls	r3, #0
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	73fb      	strb	r3, [r7, #15]
	pin->gpio->AFR[reg_H_L] |= pin->AF_num << (pin->pin_num * 4);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	7bfa      	ldrb	r2, [r7, #15]
 80004ee:	3208      	adds	r2, #8
 80004f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	7a1b      	ldrb	r3, [r3, #8]
 80004f8:	461a      	mov	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	4618      	mov	r0, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	7bfa      	ldrb	r2, [r7, #15]
 800050c:	4301      	orrs	r1, r0
 800050e:	3208      	adds	r2, #8
 8000510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000514:	bf00      	nop
 8000516:	3710      	adds	r7, #16
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <change_mode>:

void change_mode(pin_type *pin) {
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	pin->gpio->MODER &= ~(3u << ((pin->pin_num * 2)));
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	6819      	ldr	r1, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	791b      	ldrb	r3, [r3, #4]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	2203      	movs	r2, #3
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	43da      	mvns	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	400a      	ands	r2, r1
 800053e:	601a      	str	r2, [r3, #0]
	pin->gpio->PUPDR &= ~(3u << ((pin->pin_num * 2)));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	68d9      	ldr	r1, [r3, #12]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	791b      	ldrb	r3, [r3, #4]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	2203      	movs	r2, #3
 800054e:	fa02 f303 	lsl.w	r3, r2, r3
 8000552:	43da      	mvns	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	400a      	ands	r2, r1
 800055a:	60da      	str	r2, [r3, #12]
	pin->gpio->OTYPER &= ~(1u << pin->pin_num);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	6859      	ldr	r1, [r3, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	461a      	mov	r2, r3
 8000568:	2301      	movs	r3, #1
 800056a:	4093      	lsls	r3, r2
 800056c:	43da      	mvns	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	400a      	ands	r2, r1
 8000574:	605a      	str	r2, [r3, #4]

	pin->gpio->MODER |= pin->mode << (pin->pin_num * 2);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	795b      	ldrb	r3, [r3, #5]
 8000580:	4619      	mov	r1, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	4619      	mov	r1, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	430a      	orrs	r2, r1
 8000594:	601a      	str	r2, [r3, #0]
	pin->gpio->OTYPER |= pin->PP_OD << pin->pin_num;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	685a      	ldr	r2, [r3, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	799b      	ldrb	r3, [r3, #6]
 80005a0:	4619      	mov	r1, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	430a      	orrs	r2, r1
 80005b2:	605a      	str	r2, [r3, #4]
	pin->gpio->PUPDR |= pin->push_pull << (pin->pin_num * 2);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	68da      	ldr	r2, [r3, #12]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	79db      	ldrb	r3, [r3, #7]
 80005be:	4619      	mov	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	430a      	orrs	r2, r1
 80005d2:	60da      	str	r2, [r3, #12]

}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <read_pin>:
	}

	return state;
}

pin_state read_pin(pin_type *pin) {
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	uint32_t state = (pin->gpio->IDR >> pin->pin_num) & 1u;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	691b      	ldr	r3, [r3, #16]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	7912      	ldrb	r2, [r2, #4]
 80005f2:	40d3      	lsrs	r3, r2
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	60fb      	str	r3, [r7, #12]

	if (state == 1) {
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d101      	bne.n	8000604 <read_pin+0x24>
		return HIGH;
 8000600:	2301      	movs	r3, #1
 8000602:	e000      	b.n	8000606 <read_pin+0x26>
	}

	return LOW;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <I2C_enable_clock>:
 */
#include "I2C_lib.h"
#include "clocks_lib.h"
#include "NVIC_lib.h"

static void I2C_enable_clock(I2C_handle_type *handle) {
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

	if (handle->peripheral == I2C1) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a13      	ldr	r2, [pc, #76]	; (8000670 <I2C_enable_clock+0x5c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <I2C_enable_clock+0x20>
		RCC->APB1ENR |= 1u << 21;
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <I2C_enable_clock+0x60>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <I2C_enable_clock+0x60>)
 800062c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000630:	6413      	str	r3, [r2, #64]	; 0x40
	} else if (handle->peripheral == I2C2) {
		RCC->APB1ENR |= 1u << 22;
	} else if (handle->peripheral == I2C3) {
		RCC->APB1ENR |= 1u << 23;
	}
}
 8000632:	e016      	b.n	8000662 <I2C_enable_clock+0x4e>
	} else if (handle->peripheral == I2C2) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <I2C_enable_clock+0x64>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d106      	bne.n	800064c <I2C_enable_clock+0x38>
		RCC->APB1ENR |= 1u << 22;
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <I2C_enable_clock+0x60>)
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <I2C_enable_clock+0x60>)
 8000644:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000648:	6413      	str	r3, [r2, #64]	; 0x40
}
 800064a:	e00a      	b.n	8000662 <I2C_enable_clock+0x4e>
	} else if (handle->peripheral == I2C3) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a0a      	ldr	r2, [pc, #40]	; (800067c <I2C_enable_clock+0x68>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d105      	bne.n	8000662 <I2C_enable_clock+0x4e>
		RCC->APB1ENR |= 1u << 23;
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <I2C_enable_clock+0x60>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a06      	ldr	r2, [pc, #24]	; (8000674 <I2C_enable_clock+0x60>)
 800065c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40005400 	.word	0x40005400
 8000674:	40023800 	.word	0x40023800
 8000678:	40005800 	.word	0x40005800
 800067c:	40005c00 	.word	0x40005c00

08000680 <I2C_enable_IR>:

static void I2C_enable_IR(I2C_handle_type *handle) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

	if (handle->peripheral == I2C1) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <I2C_enable_IR+0x58>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d106      	bne.n	80006a0 <I2C_enable_IR+0x20>
		enable_IR(I2C1_EV_IRQn);
 8000692:	201f      	movs	r0, #31
 8000694:	f000 fa80 	bl	8000b98 <enable_IR>
		enable_IR(I2C1_ER_IRQn);
 8000698:	2020      	movs	r0, #32
 800069a:	f000 fa7d 	bl	8000b98 <enable_IR>
		enable_IR(I2C2_ER_IRQn);
	} else if (handle->peripheral == I2C3) {
		enable_IR(I2C3_EV_IRQn);
		enable_IR(I2C3_ER_IRQn);
	}
}
 800069e:	e016      	b.n	80006ce <I2C_enable_IR+0x4e>
	} else if (handle->peripheral == I2C2) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <I2C_enable_IR+0x5c>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <I2C_enable_IR+0x38>
		enable_IR(I2C2_EV_IRQn);
 80006aa:	2021      	movs	r0, #33	; 0x21
 80006ac:	f000 fa74 	bl	8000b98 <enable_IR>
		enable_IR(I2C2_ER_IRQn);
 80006b0:	2022      	movs	r0, #34	; 0x22
 80006b2:	f000 fa71 	bl	8000b98 <enable_IR>
}
 80006b6:	e00a      	b.n	80006ce <I2C_enable_IR+0x4e>
	} else if (handle->peripheral == I2C3) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <I2C_enable_IR+0x60>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d105      	bne.n	80006ce <I2C_enable_IR+0x4e>
		enable_IR(I2C3_EV_IRQn);
 80006c2:	2048      	movs	r0, #72	; 0x48
 80006c4:	f000 fa68 	bl	8000b98 <enable_IR>
		enable_IR(I2C3_ER_IRQn);
 80006c8:	2049      	movs	r0, #73	; 0x49
 80006ca:	f000 fa65 	bl	8000b98 <enable_IR>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40005400 	.word	0x40005400
 80006dc:	40005800 	.word	0x40005800
 80006e0:	40005c00 	.word	0x40005c00

080006e4 <I2C_disable_IR>:

static void I2C_disable_IR(I2C_handle_type *handle) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if (handle->peripheral == I2C1) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <I2C_disable_IR+0x58>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d106      	bne.n	8000704 <I2C_disable_IR+0x20>
		disable_IR(I2C1_EV_IRQn);
 80006f6:	201f      	movs	r0, #31
 80006f8:	f000 fa6e 	bl	8000bd8 <disable_IR>
		disable_IR(I2C1_ER_IRQn);
 80006fc:	2020      	movs	r0, #32
 80006fe:	f000 fa6b 	bl	8000bd8 <disable_IR>
		disable_IR(I2C2_ER_IRQn);
	} else if (handle->peripheral == I2C3) {
		disable_IR(I2C3_EV_IRQn);
		disable_IR(I2C3_ER_IRQn);
	}
}
 8000702:	e016      	b.n	8000732 <I2C_disable_IR+0x4e>
	} else if (handle->peripheral == I2C2) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <I2C_disable_IR+0x5c>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d106      	bne.n	800071c <I2C_disable_IR+0x38>
		disable_IR(I2C2_EV_IRQn);
 800070e:	2021      	movs	r0, #33	; 0x21
 8000710:	f000 fa62 	bl	8000bd8 <disable_IR>
		disable_IR(I2C2_ER_IRQn);
 8000714:	2022      	movs	r0, #34	; 0x22
 8000716:	f000 fa5f 	bl	8000bd8 <disable_IR>
}
 800071a:	e00a      	b.n	8000732 <I2C_disable_IR+0x4e>
	} else if (handle->peripheral == I2C3) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a08      	ldr	r2, [pc, #32]	; (8000744 <I2C_disable_IR+0x60>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d105      	bne.n	8000732 <I2C_disable_IR+0x4e>
		disable_IR(I2C3_EV_IRQn);
 8000726:	2048      	movs	r0, #72	; 0x48
 8000728:	f000 fa56 	bl	8000bd8 <disable_IR>
		disable_IR(I2C3_ER_IRQn);
 800072c:	2049      	movs	r0, #73	; 0x49
 800072e:	f000 fa53 	bl	8000bd8 <disable_IR>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40005400 	.word	0x40005400
 8000740:	40005800 	.word	0x40005800
 8000744:	40005c00 	.word	0x40005c00

08000748 <I2C_init>:

void I2C_init(I2C_handle_type *handle) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

	I2C_pins_init();
 8000750:	f000 ff54 	bl	80015fc <I2C_pins_init>
	I2C_enable_clock(handle);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff5d 	bl	8000614 <I2C_enable_clock>

	//Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
	uint32_t APB1_clk = get_APB1_clock();
 800075a:	f000 fd85 	bl	8001268 <get_APB1_clock>
 800075e:	60f8      	str	r0, [r7, #12]
	uint8_t APB1_clk_MHz = APB1_clk / 1000000;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	4a15      	ldr	r2, [pc, #84]	; (80007b8 <I2C_init+0x70>)
 8000764:	fba2 2303 	umull	r2, r3, r2, r3
 8000768:	0c9b      	lsrs	r3, r3, #18
 800076a:	72fb      	strb	r3, [r7, #11]
	handle->peripheral->CR2 |= 0x1Fu & APB1_clk_MHz;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	6859      	ldr	r1, [r3, #4]
 8000772:	7afb      	ldrb	r3, [r7, #11]
 8000774:	f003 021f 	and.w	r2, r3, #31
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	430a      	orrs	r2, r1
 800077e:	605a      	str	r2, [r3, #4]

	//Configure the clock control registers
	uint16_t ccr = APB1_clk / 200000;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	099b      	lsrs	r3, r3, #6
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <I2C_init+0x74>)
 8000786:	fba2 2303 	umull	r2, r3, r2, r3
 800078a:	099b      	lsrs	r3, r3, #6
 800078c:	813b      	strh	r3, [r7, #8]
	handle->peripheral->CCR = ccr;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	893a      	ldrh	r2, [r7, #8]
 8000794:	61da      	str	r2, [r3, #28]

	//Configure the rise time register
	handle->peripheral->TRISE = ccr + 1;
 8000796:	893b      	ldrh	r3, [r7, #8]
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	621a      	str	r2, [r3, #32]

	//enable interrupts
	handle->peripheral->CR2 |= 7u << 8;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	685a      	ldr	r2, [r3, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80007ae:	605a      	str	r2, [r3, #4]
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	431bde83 	.word	0x431bde83
 80007bc:	053e2d63 	.word	0x053e2d63

080007c0 <start_communication>:

static uint8_t start_communication(I2C_handle_type *handle) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	if (handle->status != I2C_STATUS_IDLE) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7c1b      	ldrb	r3, [r3, #16]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <start_communication+0x14>
		return 1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	e013      	b.n	80007fc <start_communication+0x3c>
	}

	I2C_enable_IR(handle);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff53 	bl	8000680 <I2C_enable_IR>

	//enable the peripheral
	handle->peripheral->CR1 |= 1u;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f042 0201 	orr.w	r2, r2, #1
 80007e8:	601a      	str	r2, [r3, #0]

	//generate a Start condition
	handle->peripheral->CR1 |= 1u << 8;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007f8:	601a      	str	r2, [r3, #0]

	return 0;
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <I2C_transmit_data>:

uint8_t I2C_transmit_data(I2C_handle_type *handle) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

	if (start_communication(handle)) {
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ffd7 	bl	80007c0 <start_communication>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <I2C_transmit_data+0x18>
		return 1;
 8000818:	2301      	movs	r3, #1
 800081a:	e003      	b.n	8000824 <I2C_transmit_data+0x20>
	}

	handle->status = I2C_STATUS_TRANSMITTING;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2201      	movs	r2, #1
 8000820:	741a      	strb	r2, [r3, #16]

	return 0;
 8000822:	2300      	movs	r3, #0
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <I2C_transmit_data_and_wait>:

uint8_t I2C_transmit_data_and_wait(I2C_handle_type *handle) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

	if (I2C_transmit_data(handle)) {
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ffe5 	bl	8000804 <I2C_transmit_data>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <I2C_transmit_data_and_wait+0x18>
		return 1;
 8000840:	2301      	movs	r3, #1
 8000842:	e005      	b.n	8000850 <I2C_transmit_data_and_wait+0x24>
	}

	while (handle->status != I2C_STATUS_IDLE)
 8000844:	bf00      	nop
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7c1b      	ldrb	r3, [r3, #16]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1fb      	bne.n	8000846 <I2C_transmit_data_and_wait+0x1a>
		;

	return 0;
 800084e:	2300      	movs	r3, #0

}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <handle_start_condition>:
		;

	return 0;
}

static void handle_start_condition(I2C_handle_type *handle) {
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

	if (handle->addressing_mode == I2C_7_BIT_ADDRESSING) {
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	791b      	ldrb	r3, [r3, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d106      	bne.n	8000876 <handle_start_condition+0x1e>

		handle->peripheral->DR = handle->slave_address << 1;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	88db      	ldrh	r3, [r3, #6]
 800086c:	005a      	lsls	r2, r3, #1
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	611a      	str	r2, [r3, #16]

		header |= (0b11 << 1) & bits_9_8;

		handle->peripheral->DR = header;
	}
}
 8000874:	e011      	b.n	800089a <handle_start_condition+0x42>
		uint8_t header = 0xF0;
 8000876:	23f0      	movs	r3, #240	; 0xf0
 8000878:	73fb      	strb	r3, [r7, #15]
		uint8_t bits_9_8 = handle->slave_address >> 8;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	88db      	ldrh	r3, [r3, #6]
 800087e:	0a1b      	lsrs	r3, r3, #8
 8000880:	b29b      	uxth	r3, r3
 8000882:	73bb      	strb	r3, [r7, #14]
		header |= (0b11 << 1) & bits_9_8;
 8000884:	7bbb      	ldrb	r3, [r7, #14]
 8000886:	f003 0306 	and.w	r3, r3, #6
 800088a:	b2da      	uxtb	r2, r3
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	4313      	orrs	r3, r2
 8000890:	73fb      	strb	r3, [r7, #15]
		handle->peripheral->DR = header;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	7bfa      	ldrb	r2, [r7, #15]
 8000898:	611a      	str	r2, [r3, #16]
}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <handle_transmitting>:

static void handle_transmitting(I2C_handle_type *handle) {
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]

	if (handle->peripheral->SR1 & 1u) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d003      	beq.n	80008c4 <handle_transmitting+0x1e>
		//start condition
		handle_start_condition(handle);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ffcb 	bl	8000858 <handle_start_condition>
 80008c2:	e046      	b.n	8000952 <handle_transmitting+0xac>

	} else if (handle->peripheral->SR1 & (1u << 3)) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d006      	beq.n	80008e0 <handle_transmitting+0x3a>
		//header sent, send rest of the address

		handle->peripheral->DR = handle->slave_address << 1;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	88db      	ldrh	r3, [r3, #6]
 80008d6:	005a      	lsls	r2, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	611a      	str	r2, [r3, #16]
 80008de:	e038      	b.n	8000952 <handle_transmitting+0xac>

	} else if (handle->peripheral->SR1 & 2u) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <handle_transmitting+0x50>
		//address sent
		(void) handle->peripheral->SR2;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	e02d      	b.n	8000952 <handle_transmitting+0xac>

	} else if (handle->peripheral->SR1 & (1u << 7)) {
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000900:	2b00      	cmp	r3, #0
 8000902:	d026      	beq.n	8000952 <handle_transmitting+0xac>
		//data register empty, write next frame to DR

		if (handle->data_len-- == 0) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	1e59      	subs	r1, r3, #1
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	60d1      	str	r1, [r2, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d116      	bne.n	8000940 <handle_transmitting+0x9a>
			//generate stop condition
			handle->peripheral->CR1 |= 1u << 9;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000920:	601a      	str	r2, [r3, #0]

			handle->peripheral->CR1 &= ~1u;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f022 0201 	bic.w	r2, r2, #1
 8000930:	601a      	str	r2, [r3, #0]
			I2C_disable_IR(handle);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fed6 	bl	80006e4 <I2C_disable_IR>
			handle->status = I2C_STATUS_IDLE;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	741a      	strb	r2, [r3, #16]

			return;
 800093e:	e008      	b.n	8000952 <handle_transmitting+0xac>

		}

		handle->peripheral->DR = *(handle->data++);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	1c59      	adds	r1, r3, #1
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	6091      	str	r1, [r2, #8]
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	611a      	str	r2, [r3, #16]


	}
}
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <handle_receiving>:

static void handle_receiving(I2C_handle_type *handle) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

	static uint8_t repeated_start = 0;

	if (handle->peripheral->SR1 & 1u) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	2b00      	cmp	r3, #0
 800096c:	d01d      	beq.n	80009aa <handle_receiving+0x52>
		//start condition
		if (!repeated_start) {
 800096e:	4b52      	ldr	r3, [pc, #328]	; (8000ab8 <handle_receiving+0x160>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d103      	bne.n	800097e <handle_receiving+0x26>
			handle_start_condition(handle);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff ff6e 	bl	8000858 <handle_start_condition>
			handle->status = I2C_STATUS_IDLE;
			I2C_disable_IR(handle);

		}
	}
}
 800097c:	e097      	b.n	8000aae <handle_receiving+0x156>
			uint8_t header = 0xF0;
 800097e:	23f0      	movs	r3, #240	; 0xf0
 8000980:	73fb      	strb	r3, [r7, #15]
			uint8_t bits_9_8 = handle->slave_address >> 8;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	88db      	ldrh	r3, [r3, #6]
 8000986:	0a1b      	lsrs	r3, r3, #8
 8000988:	b29b      	uxth	r3, r3
 800098a:	73bb      	strb	r3, [r7, #14]
			header |= ((0b11 << 1) & bits_9_8) | 1u;
 800098c:	7bbb      	ldrb	r3, [r7, #14]
 800098e:	f003 0306 	and.w	r3, r3, #6
 8000992:	b2da      	uxtb	r2, r3
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	4313      	orrs	r3, r2
 8000998:	b2db      	uxtb	r3, r3
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	73fb      	strb	r3, [r7, #15]
			handle->peripheral->DR = header;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	7bfa      	ldrb	r2, [r7, #15]
 80009a6:	611a      	str	r2, [r3, #16]
}
 80009a8:	e081      	b.n	8000aae <handle_receiving+0x156>
	} else if (handle->peripheral->SR1 & (1u << 3)) {
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d006      	beq.n	80009c6 <handle_receiving+0x6e>
		handle->peripheral->DR = handle->slave_address << 1;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	88db      	ldrh	r3, [r3, #6]
 80009bc:	005a      	lsls	r2, r3, #1
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	611a      	str	r2, [r3, #16]
}
 80009c4:	e073      	b.n	8000aae <handle_receiving+0x156>
	} else if (handle->peripheral->SR1 & 2u) {
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	f003 0302 	and.w	r3, r3, #2
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d039      	beq.n	8000a48 <handle_receiving+0xf0>
		if (!repeated_start
 80009d4:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <handle_receiving+0x160>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d10f      	bne.n	80009fc <handle_receiving+0xa4>
				&& (handle->addressing_mode == I2C_10_BIT_ADDRESSING)) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	791b      	ldrb	r3, [r3, #4]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d10b      	bne.n	80009fc <handle_receiving+0xa4>
			handle->peripheral->CR1 |= 1u << 8;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009f2:	601a      	str	r2, [r3, #0]
			repeated_start = 1;
 80009f4:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <handle_receiving+0x160>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
 80009fa:	e021      	b.n	8000a40 <handle_receiving+0xe8>
		} else if (handle->data_len == 1) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d11d      	bne.n	8000a40 <handle_receiving+0xe8>
			handle->peripheral->CR1 &= ~(1u << 10);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a12:	601a      	str	r2, [r3, #0]
			handle->peripheral->CR1 |= 1u << 9;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a22:	601a      	str	r2, [r3, #0]
			repeated_start = 0;
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <handle_receiving+0x160>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
			handle->status = I2C_STATUS_IDLE;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	741a      	strb	r2, [r3, #16]
			handle->peripheral->CR1 &= ~1u;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f022 0201 	bic.w	r2, r2, #1
 8000a3e:	601a      	str	r2, [r3, #0]
		(void) handle->peripheral->SR2;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	699b      	ldr	r3, [r3, #24]
}
 8000a46:	e032      	b.n	8000aae <handle_receiving+0x156>
	} else if (handle->peripheral->SR1 & (1u << 6)) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d02b      	beq.n	8000aae <handle_receiving+0x156>
		*(handle->data++) = handle->peripheral->DR;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6918      	ldr	r0, [r3, #16]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	1c59      	adds	r1, r3, #1
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	6091      	str	r1, [r2, #8]
 8000a66:	b2c2      	uxtb	r2, r0
 8000a68:	701a      	strb	r2, [r3, #0]
		if (--handle->data_len == 1) {
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d118      	bne.n	8000aae <handle_receiving+0x156>
			handle->peripheral->CR1 &= ~(1u << 10);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a8a:	601a      	str	r2, [r3, #0]
			handle->peripheral->CR1 |= 1u << 9;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a9a:	601a      	str	r2, [r3, #0]
			repeated_start = 0;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <handle_receiving+0x160>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
			handle->status = I2C_STATUS_IDLE;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	741a      	strb	r2, [r3, #16]
			I2C_disable_IR(handle);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff fe1b 	bl	80006e4 <I2C_disable_IR>
}
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000080 	.word	0x20000080

08000abc <I2C_handle_EV>:

void I2C_handle_EV(I2C_handle_type *handle) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

	if (handle->status == I2C_STATUS_TRANSMITTING) {
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7c1b      	ldrb	r3, [r3, #16]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d103      	bne.n	8000ad4 <I2C_handle_EV+0x18>
		handle_transmitting(handle);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff feea 	bl	80008a6 <handle_transmitting>

	} else if (handle->status == I2C_STATUS_RECEIVING) {
		handle_receiving(handle);
	}

}
 8000ad2:	e006      	b.n	8000ae2 <I2C_handle_EV+0x26>
	} else if (handle->status == I2C_STATUS_RECEIVING) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	7c1b      	ldrb	r3, [r3, #16]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d102      	bne.n	8000ae2 <I2C_handle_EV+0x26>
		handle_receiving(handle);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff3b 	bl	8000958 <handle_receiving>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <I2C_handle_ER>:

uint8_t I2C_handle_ER(I2C_handle_type *handle) {
 8000aea:	b480      	push	{r7}
 8000aec:	b085      	sub	sp, #20
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
	uint8_t error_code;

	if (handle->peripheral->SR1 & (1u << 8)) {
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d002      	beq.n	8000b06 <I2C_handle_ER+0x1c>
		error_code = 8;
 8000b00:	2308      	movs	r3, #8
 8000b02:	73fb      	strb	r3, [r7, #15]
 8000b04:	e01c      	b.n	8000b40 <I2C_handle_ER+0x56>
	} else if (handle->peripheral->SR1 & (1u << 10)) {
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d002      	beq.n	8000b1a <I2C_handle_ER+0x30>
		error_code = 10;
 8000b14:	230a      	movs	r3, #10
 8000b16:	73fb      	strb	r3, [r7, #15]
 8000b18:	e012      	b.n	8000b40 <I2C_handle_ER+0x56>
	} else if (handle->peripheral->SR1 & (1u << 11)) {
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d002      	beq.n	8000b2e <I2C_handle_ER+0x44>
		error_code = 11;
 8000b28:	230b      	movs	r3, #11
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e008      	b.n	8000b40 <I2C_handle_ER+0x56>
	} else if (handle->peripheral->SR1 & (1u << 14)) {
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <I2C_handle_ER+0x56>
		error_code = 14;
 8000b3c:	230e      	movs	r3, #14
 8000b3e:	73fb      	strb	r3, [r7, #15]
	}

	handle->peripheral->CR1 &= ~1u;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f022 0201 	bic.w	r2, r2, #1
 8000b4e:	601a      	str	r2, [r3, #0]
	handle->status = I2C_STATUS_IDLE;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	741a      	strb	r2, [r3, #16]

	return error_code;
 8000b56:	7bfb      	ldrb	r3, [r7, #15]

}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <calculate_ISER_values>:
#include "NVIC_lib.h"
#include "stm32f4xx.h"

static void calculate_ISER_values(uint8_t IRQn, uint8_t *buf) {
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]

	uint8_t ISER_num = IRQn / 32;
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	095b      	lsrs	r3, r3, #5
 8000b74:	73fb      	strb	r3, [r7, #15]
	uint8_t ISER_pos = IRQn % 32;
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 031f 	and.w	r3, r3, #31
 8000b7c:	73bb      	strb	r3, [r7, #14]

	buf[0] = ISER_num;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	7bfa      	ldrb	r2, [r7, #15]
 8000b82:	701a      	strb	r2, [r3, #0]
	buf[1] = ISER_pos;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	3301      	adds	r3, #1
 8000b88:	7bba      	ldrb	r2, [r7, #14]
 8000b8a:	701a      	strb	r2, [r3, #0]

}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <enable_IR>:

void enable_IR(uint8_t IRQn) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]

	uint8_t ISER_values[2];
	calculate_ISER_values(IRQn, ISER_values);
 8000ba2:	f107 020c 	add.w	r2, r7, #12
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ffda 	bl	8000b64 <calculate_ISER_values>

	NVIC->ISER[ISER_values[0]] |= 1u << ISER_values[1];
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <enable_IR+0x3c>)
 8000bb2:	7b3a      	ldrb	r2, [r7, #12]
 8000bb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bb8:	7b7b      	ldrb	r3, [r7, #13]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	408b      	lsls	r3, r1
 8000bc0:	4904      	ldr	r1, [pc, #16]	; (8000bd4 <enable_IR+0x3c>)
 8000bc2:	7b38      	ldrb	r0, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <disable_IR>:

void disable_IR(uint8_t IRQn) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
	uint8_t ISER_values[2];
	calculate_ISER_values(IRQn, ISER_values);
 8000be2:	f107 020c 	add.w	r2, r7, #12
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ffba 	bl	8000b64 <calculate_ISER_values>

	NVIC->ISER[ISER_values[0]] &= ~(1u << ISER_values[1]);
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <disable_IR+0x3c>)
 8000bf2:	7b3a      	ldrb	r2, [r7, #12]
 8000bf4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bf8:	7b7b      	ldrb	r3, [r7, #13]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	408b      	lsls	r3, r1
 8000c00:	43db      	mvns	r3, r3
 8000c02:	4904      	ldr	r1, [pc, #16]	; (8000c14 <disable_IR+0x3c>)
 8000c04:	7b38      	ldrb	r0, [r7, #12]
 8000c06:	4013      	ands	r3, r2
 8000c08:	f841 3020 	str.w	r3, [r1, r0, lsl #2]

}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <bin2bcd>:
 */

#include "RTC.h"
#include "stm32f4xx.h"

static uint16_t bin2bcd(uint8_t bin) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	uint8_t digit;
	uint8_t shift = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	73fb      	strb	r3, [r7, #15]
	uint16_t bcd = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	81bb      	strh	r3, [r7, #12]

	while (bin) {
 8000c2a:	e01d      	b.n	8000c68 <bin2bcd+0x50>
		digit = bin % 10;
 8000c2c:	79fa      	ldrb	r2, [r7, #7]
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <bin2bcd+0x64>)
 8000c30:	fba3 1302 	umull	r1, r3, r3, r2
 8000c34:	08d9      	lsrs	r1, r3, #3
 8000c36:	460b      	mov	r3, r1
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	72fb      	strb	r3, [r7, #11]
		bin /= 10;
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <bin2bcd+0x64>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	08db      	lsrs	r3, r3, #3
 8000c4c:	71fb      	strb	r3, [r7, #7]
		bcd |= (0xFu & digit) << (4 * shift++);
 8000c4e:	7afb      	ldrb	r3, [r7, #11]
 8000c50:	f003 020f 	and.w	r2, r3, #15
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	1c59      	adds	r1, r3, #1
 8000c58:	73f9      	strb	r1, [r7, #15]
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	89bb      	ldrh	r3, [r7, #12]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	81bb      	strh	r3, [r7, #12]
	while (bin) {
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1de      	bne.n	8000c2c <bin2bcd+0x14>
	}

	return bcd;
 8000c6e:	89bb      	ldrh	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	cccccccd 	.word	0xcccccccd

08000c80 <RTC_init>:
	}

	return bin;
}

void RTC_init(date_time_type *time) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= 1u << 28;
 8000c88:	4b53      	ldr	r3, [pc, #332]	; (8000dd8 <RTC_init+0x158>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a52      	ldr	r2, [pc, #328]	; (8000dd8 <RTC_init+0x158>)
 8000c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= 1u << 8;
 8000c94:	4b51      	ldr	r3, [pc, #324]	; (8000ddc <RTC_init+0x15c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a50      	ldr	r2, [pc, #320]	; (8000ddc <RTC_init+0x15c>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9e:	6013      	str	r3, [r2, #0]
	RCC->BDCR |= 1u << 15;
 8000ca0:	4b4d      	ldr	r3, [pc, #308]	; (8000dd8 <RTC_init+0x158>)
 8000ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ca4:	4a4c      	ldr	r2, [pc, #304]	; (8000dd8 <RTC_init+0x158>)
 8000ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000caa:	6713      	str	r3, [r2, #112]	; 0x70

	//unlock the write protection
	RTC->WPR = 0xCAu;
 8000cac:	4b4c      	ldr	r3, [pc, #304]	; (8000de0 <RTC_init+0x160>)
 8000cae:	22ca      	movs	r2, #202	; 0xca
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53u;
 8000cb2:	4b4b      	ldr	r3, [pc, #300]	; (8000de0 <RTC_init+0x160>)
 8000cb4:	2253      	movs	r2, #83	; 0x53
 8000cb6:	625a      	str	r2, [r3, #36]	; 0x24

	//configure LSE clock for RTC
	RCC->BDCR |= 1u;
 8000cb8:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <RTC_init+0x158>)
 8000cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cbc:	4a46      	ldr	r2, [pc, #280]	; (8000dd8 <RTC_init+0x158>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6713      	str	r3, [r2, #112]	; 0x70
	while (!(RCC->BDCR & 2u));
 8000cc4:	bf00      	nop
 8000cc6:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <RTC_init+0x158>)
 8000cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d0f9      	beq.n	8000cc6 <RTC_init+0x46>

	RCC->BDCR |= 1u << 8;
 8000cd2:	4b41      	ldr	r3, [pc, #260]	; (8000dd8 <RTC_init+0x158>)
 8000cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cd6:	4a40      	ldr	r2, [pc, #256]	; (8000dd8 <RTC_init+0x158>)
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cdc:	6713      	str	r3, [r2, #112]	; 0x70

	//Set INIT bit to 1 in the RTC_ISR register to enter initialization mode
	RTC->ISR |= 1u << 7;
 8000cde:	4b40      	ldr	r3, [pc, #256]	; (8000de0 <RTC_init+0x160>)
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	4a3f      	ldr	r2, [pc, #252]	; (8000de0 <RTC_init+0x160>)
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce8:	60d3      	str	r3, [r2, #12]

	//Poll INITF bit of in the RTC_ISR register. The initialization phase mode is entered when
	//INITF is set to 1
	while (!(RTC->ISR & (1u << 6)))
 8000cea:	bf00      	nop
 8000cec:	4b3c      	ldr	r3, [pc, #240]	; (8000de0 <RTC_init+0x160>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0f9      	beq.n	8000cec <RTC_init+0x6c>
		;

	//configure date and time
	uint32_t time_tmp = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
	uint32_t date_tmp = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]

	time_tmp |= 0x7Fu & bin2bcd(time->seconds);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff87 	bl	8000c18 <bin2bcd>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
	time_tmp |= (0x7Fu & bin2bcd(time->minutes)) << 8;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	785b      	ldrb	r3, [r3, #1]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff7c 	bl	8000c18 <bin2bcd>
 8000d20:	4603      	mov	r3, r0
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
	time_tmp |= (0x3Fu & bin2bcd(time->hours)) << 16;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	789b      	ldrb	r3, [r3, #2]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff70 	bl	8000c18 <bin2bcd>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	041b      	lsls	r3, r3, #16
 8000d3c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]

	if (time->time_format == format_12) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	79db      	ldrb	r3, [r3, #7]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d10a      	bne.n	8000d64 <RTC_init+0xe4>
		time_tmp |= 1u << 6;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d54:	60fb      	str	r3, [r7, #12]
		time_tmp |= time->am_pm << 22;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	7a1b      	ldrb	r3, [r3, #8]
 8000d5a:	059b      	lsls	r3, r3, #22
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
	}

	date_tmp |= 0x3Fu & bin2bcd(time->date);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	78db      	ldrb	r3, [r3, #3]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff55 	bl	8000c18 <bin2bcd>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	60bb      	str	r3, [r7, #8]
	date_tmp |= (0x1Fu & bin2bcd(time->month)) << 8;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	795b      	ldrb	r3, [r3, #5]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff4a 	bl	8000c18 <bin2bcd>
 8000d84:	4603      	mov	r3, r0
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	60bb      	str	r3, [r7, #8]
	date_tmp |= (0x7u & time->day) << 13;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	791b      	ldrb	r3, [r3, #4]
 8000d96:	035b      	lsls	r3, r3, #13
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
	date_tmp |= (0xFFu & bin2bcd(time->year)) << 16;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	799b      	ldrb	r3, [r3, #6]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff37 	bl	8000c18 <bin2bcd>
 8000daa:	4603      	mov	r3, r0
 8000dac:	041b      	lsls	r3, r3, #16
 8000dae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]

	RTC->TR = time_tmp;
 8000db8:	4a09      	ldr	r2, [pc, #36]	; (8000de0 <RTC_init+0x160>)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6013      	str	r3, [r2, #0]
	RTC->DR = date_tmp;
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <RTC_init+0x160>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	6053      	str	r3, [r2, #4]

	//exit the initialization mode
	RTC->ISR &= ~(1u << 7);
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <RTC_init+0x160>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <RTC_init+0x160>)
 8000dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dce:	60d3      	str	r3, [r2, #12]

}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40007000 	.word	0x40007000
 8000de0:	40002800 	.word	0x40002800

08000de4 <enable_uart_clock>:
 *      Author: toni
 */
#include "UART_lib.h"
#include "clocks_lib.h"

static void enable_uart_clock(USART_TypeDef* uart) {
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

	if (uart == USART2) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <enable_uart_clock+0x54>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d106      	bne.n	8000e02 <enable_uart_clock+0x1e>
		RCC->APB1ENR |= 1u << 17;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <enable_uart_clock+0x58>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <enable_uart_clock+0x58>)
 8000dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfe:	6413      	str	r3, [r2, #64]	; 0x40
		RCC->APB2ENR |= 1u << 4;
	} else if (uart == USART6) {
		RCC->APB2ENR |= 1u << 5;
	}

}
 8000e00:	e014      	b.n	8000e2c <enable_uart_clock+0x48>
	} else if (uart == USART1) {
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <enable_uart_clock+0x5c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d106      	bne.n	8000e18 <enable_uart_clock+0x34>
		RCC->APB2ENR |= 1u << 4;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <enable_uart_clock+0x58>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <enable_uart_clock+0x58>)
 8000e10:	f043 0310 	orr.w	r3, r3, #16
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000e16:	e009      	b.n	8000e2c <enable_uart_clock+0x48>
	} else if (uart == USART6) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <enable_uart_clock+0x60>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d105      	bne.n	8000e2c <enable_uart_clock+0x48>
		RCC->APB2ENR |= 1u << 5;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <enable_uart_clock+0x58>)
 8000e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e24:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <enable_uart_clock+0x58>)
 8000e26:	f043 0320 	orr.w	r3, r3, #32
 8000e2a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	40004400 	.word	0x40004400
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40011000 	.word	0x40011000
 8000e44:	40011400 	.word	0x40011400

08000e48 <set_BRR>:

static void set_BRR(uint32_t baudrate, USART_TypeDef* uart) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
	uint32_t clk_speed;
	if (uart == USART2) {
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <set_BRR+0x34>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d103      	bne.n	8000e62 <set_BRR+0x1a>
		clk_speed = get_APB1_clock();
 8000e5a:	f000 fa05 	bl	8001268 <get_APB1_clock>
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	e002      	b.n	8000e68 <set_BRR+0x20>
	} else {
		clk_speed = get_APB2_clock();
 8000e62:	f000 fa0d 	bl	8001280 <get_APB2_clock>
 8000e66:	60f8      	str	r0, [r7, #12]
	}

	uart->BRR = clk_speed / baudrate;
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	609a      	str	r2, [r3, #8]
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40004400 	.word	0x40004400

08000e80 <uart_init>:


void uart_init(USART_TypeDef* uart, uint8_t word_length, uint8_t stop_bits, uint32_t baudrate) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	72fb      	strb	r3, [r7, #11]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	72bb      	strb	r3, [r7, #10]
	enable_uart_clock(uart);
 8000e92:	68f8      	ldr	r0, [r7, #12]
 8000e94:	f7ff ffa6 	bl	8000de4 <enable_uart_clock>

	uart_pins_init();
 8000e98:	f000 fb8a 	bl	80015b0 <uart_pins_init>

	//Enable the USART
	uart->CR1 |= 1u << 13;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	60da      	str	r2, [r3, #12]

	//Program the M bit in USART_CR1 to define the word length
	uart->CR1 |= word_length << 12;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	7afa      	ldrb	r2, [r7, #11]
 8000eae:	0312      	lsls	r2, r2, #12
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	60da      	str	r2, [r3, #12]

	//Program the number of stop bits in USART_CR2.
	uart->CR2 |= stop_bits << 12;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	7aba      	ldrb	r2, [r7, #10]
 8000ebc:	0312      	lsls	r2, r2, #12
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	611a      	str	r2, [r3, #16]

	//Select the desired baud rate using the baud rate register USART_BRR
	set_BRR(baudrate, uart);
 8000ec4:	68f9      	ldr	r1, [r7, #12]
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffbe 	bl	8000e48 <set_BRR>

	//Set the RE bit USART_CR1. This enables the receiver which begins searching for a start bit.
	uart->CR1 |= 1u << 2;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	f043 0204 	orr.w	r2, r3, #4
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	60da      	str	r2, [r3, #12]

}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <uart_transmit_data>:

void uart_transmit_data(USART_TypeDef* uart, uint8_t* data_buffer, uint32_t len) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]

	//Set the TE bit in USART_CR1 to send an idle frame as first transmission.
	uart->CR1 |= 1u << 3;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	f043 0208 	orr.w	r2, r3, #8
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	60da      	str	r2, [r3, #12]

	//Write the data to send in the USART_DR register (this clears the TXE bit). Repeat this
	//for each data to be transmitted in case of single buffer.
	for (int i = 0; i < len; i++) {
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	e010      	b.n	8000f20 <uart_transmit_data+0x40>
		uart->DR = data_buffer[i];
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	605a      	str	r2, [r3, #4]

		while (!(uart->SR & (1u << 7)));
 8000f0c:	bf00      	nop
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f9      	beq.n	8000f0e <uart_transmit_data+0x2e>
	for (int i = 0; i < len; i++) {
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d8ea      	bhi.n	8000efe <uart_transmit_data+0x1e>
	//After writing the last data into the USART_DR register, wait until TC=1. This indicates
	//that the transmission of the last frame is complete. This is required for instance when
	//the USART is disabled or enters the Halt mode to avoid corrupting the last
	//transmission.

	while(!(uart->SR & (1u << 6)));
 8000f28:	bf00      	nop
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f9      	beq.n	8000f2a <uart_transmit_data+0x4a>

	//disable transmission and clear TC bit
	uint32_t temp = uart->SR;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	613b      	str	r3, [r7, #16]
	uart->DR = 0;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	605a      	str	r2, [r3, #4]
	(void) temp;
	uart->CR1 &= ~(1u << 3);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	f023 0208 	bic.w	r2, r3, #8
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	60da      	str	r2, [r3, #12]


}
 8000f4e:	bf00      	nop
 8000f50:	371c      	adds	r7, #28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <get_AHB_prescaler>:

static void select_clk_source(uint8_t clk_source) {
	RCC->CFGR |= clk_source;
}

static uint16_t get_AHB_prescaler() {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
	uint8_t bits = (15u << 4) & RCC->CFGR;
 8000f62:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <get_AHB_prescaler+0x94>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f023 030f 	bic.w	r3, r3, #15
 8000f6c:	717b      	strb	r3, [r7, #5]
	uint16_t AHB_prescaler;

	if (!(bits & 8u)) {
 8000f6e:	797b      	ldrb	r3, [r7, #5]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <get_AHB_prescaler+0x20>
		return 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e032      	b.n	8000fe2 <get_AHB_prescaler+0x86>
	}

	switch (bits) {
 8000f7c:	797b      	ldrb	r3, [r7, #5]
 8000f7e:	3b08      	subs	r3, #8
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	d82d      	bhi.n	8000fe0 <get_AHB_prescaler+0x84>
 8000f84:	a201      	add	r2, pc, #4	; (adr r2, 8000f8c <get_AHB_prescaler+0x30>)
 8000f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8a:	bf00      	nop
 8000f8c:	08000fad 	.word	0x08000fad
 8000f90:	08000fb3 	.word	0x08000fb3
 8000f94:	08000fb9 	.word	0x08000fb9
 8000f98:	08000fbf 	.word	0x08000fbf
 8000f9c:	08000fc5 	.word	0x08000fc5
 8000fa0:	08000fcb 	.word	0x08000fcb
 8000fa4:	08000fd1 	.word	0x08000fd1
 8000fa8:	08000fd9 	.word	0x08000fd9
	case AHB_PRESCALER_2:
		AHB_prescaler = 2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	80fb      	strh	r3, [r7, #6]
		break;
 8000fb0:	e016      	b.n	8000fe0 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_4:
		AHB_prescaler = 4;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	80fb      	strh	r3, [r7, #6]
		break;
 8000fb6:	e013      	b.n	8000fe0 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_8:
		AHB_prescaler = 8;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	80fb      	strh	r3, [r7, #6]
		break;
 8000fbc:	e010      	b.n	8000fe0 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_16:
		AHB_prescaler = 16;
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	80fb      	strh	r3, [r7, #6]
		break;
 8000fc2:	e00d      	b.n	8000fe0 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_64:
		AHB_prescaler = 64;
 8000fc4:	2340      	movs	r3, #64	; 0x40
 8000fc6:	80fb      	strh	r3, [r7, #6]
		break;
 8000fc8:	e00a      	b.n	8000fe0 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_128:
		AHB_prescaler = 128;
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	80fb      	strh	r3, [r7, #6]
		break;
 8000fce:	e007      	b.n	8000fe0 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_256:
		AHB_prescaler = 256;
 8000fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd4:	80fb      	strh	r3, [r7, #6]
		break;
 8000fd6:	e003      	b.n	8000fe0 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_512:
		AHB_prescaler = 512;
 8000fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fdc:	80fb      	strh	r3, [r7, #6]
		break;
 8000fde:	bf00      	nop
	}

	return AHB_prescaler;
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <get_PLLM>:



static uint8_t get_PLLM() {
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

	return RCC->PLLCFGR & 63u;
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <get_PLLM+0x1c>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001002:	b2db      	uxtb	r3, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800

08001014 <get_PLLN>:

static uint16_t get_PLLN() {
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

	return (RCC->PLLCFGR & (511u << 6)) >> 6;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <get_PLLN+0x1c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	099b      	lsrs	r3, r3, #6
 800101e:	b29b      	uxth	r3, r3
 8001020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001024:	b29b      	uxth	r3, r3
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	40023800 	.word	0x40023800

08001034 <get_PLLP>:

static uint8_t get_PLLP() {
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
	uint8_t PLLP;

	switch ((RCC->PLLCFGR & (3u << 16)) >> 16) {
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <get_PLLP+0x54>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	0c1b      	lsrs	r3, r3, #16
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b03      	cmp	r3, #3
 8001046:	d817      	bhi.n	8001078 <get_PLLP+0x44>
 8001048:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <get_PLLP+0x1c>)
 800104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104e:	bf00      	nop
 8001050:	08001061 	.word	0x08001061
 8001054:	08001067 	.word	0x08001067
 8001058:	0800106d 	.word	0x0800106d
 800105c:	08001073 	.word	0x08001073
	case PLLP_2:
		PLLP = 2;
 8001060:	2302      	movs	r3, #2
 8001062:	71fb      	strb	r3, [r7, #7]
		break;
 8001064:	e008      	b.n	8001078 <get_PLLP+0x44>
	case PLLP_4:
		PLLP = 4;
 8001066:	2304      	movs	r3, #4
 8001068:	71fb      	strb	r3, [r7, #7]
		break;
 800106a:	e005      	b.n	8001078 <get_PLLP+0x44>
	case PLLP_6:
		PLLP = 6;
 800106c:	2306      	movs	r3, #6
 800106e:	71fb      	strb	r3, [r7, #7]
		break;
 8001070:	e002      	b.n	8001078 <get_PLLP+0x44>
	case PLLP_8:
		PLLP = 8;
 8001072:	2308      	movs	r3, #8
 8001074:	71fb      	strb	r3, [r7, #7]
		break;
 8001076:	bf00      	nop
	}

	return PLLP;
 8001078:	79fb      	ldrb	r3, [r7, #7]
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <get_clk_value>:

static uint32_t get_clk_value(uint8_t clk_source) {
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	uint32_t clk_value;
	if (clk_source == HSI) {
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <get_clk_value+0x16>
		clk_value = 16000000;
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <get_clk_value+0x30>)
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	e004      	b.n	80010ac <get_clk_value+0x20>
	} else if (clk_source == HSE) {
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d101      	bne.n	80010ac <get_clk_value+0x20>
		clk_value = 8000000;
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <get_clk_value+0x34>)
 80010aa:	60fb      	str	r3, [r7, #12]
	}

	return clk_value;
 80010ac:	68fb      	ldr	r3, [r7, #12]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	00f42400 	.word	0x00f42400
 80010c0:	007a1200 	.word	0x007a1200

080010c4 <calculate_PLL_clk>:

static uint32_t calculate_PLL_clk(uint32_t clk_value, uint8_t PLLM,
		uint16_t PLLN, uint8_t PLLP) {
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	4608      	mov	r0, r1
 80010ce:	4611      	mov	r1, r2
 80010d0:	461a      	mov	r2, r3
 80010d2:	4603      	mov	r3, r0
 80010d4:	70fb      	strb	r3, [r7, #3]
 80010d6:	460b      	mov	r3, r1
 80010d8:	803b      	strh	r3, [r7, #0]
 80010da:	4613      	mov	r3, r2
 80010dc:	70bb      	strb	r3, [r7, #2]

	return clk_value / PLLM * PLLN / PLLP;
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	883a      	ldrh	r2, [r7, #0]
 80010e8:	fb02 f203 	mul.w	r2, r2, r3
 80010ec:	78bb      	ldrb	r3, [r7, #2]
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <get_APB1_prescaler>:
	RCC->CFGR |= AHB_prescaler << 4;
	RCC->CFGR |= APB1_prescaler << 10;
	RCC->CFGR |= APB2_prescaler << 13;
}

uint8_t get_APB1_prescaler() {
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
	uint8_t bits = ((7u << 10) & RCC->CFGR) >> 10;
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <get_APB1_prescaler+0x68>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	0a9b      	lsrs	r3, r3, #10
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	71bb      	strb	r3, [r7, #6]
	uint8_t APB1_prescaler;

	if (!(bits & 4u)) {
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <get_APB1_prescaler+0x22>
		return 1;
 800111e:	2301      	movs	r3, #1
 8001120:	e01b      	b.n	800115a <get_APB1_prescaler+0x5a>
	}

	switch (bits) {
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	3b04      	subs	r3, #4
 8001126:	2b03      	cmp	r3, #3
 8001128:	d816      	bhi.n	8001158 <get_APB1_prescaler+0x58>
 800112a:	a201      	add	r2, pc, #4	; (adr r2, 8001130 <get_APB1_prescaler+0x30>)
 800112c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001130:	08001141 	.word	0x08001141
 8001134:	08001147 	.word	0x08001147
 8001138:	0800114d 	.word	0x0800114d
 800113c:	08001153 	.word	0x08001153
	case APBx_PRESCALER_2:
		APB1_prescaler = 2;
 8001140:	2302      	movs	r3, #2
 8001142:	71fb      	strb	r3, [r7, #7]
		break;
 8001144:	e008      	b.n	8001158 <get_APB1_prescaler+0x58>
	case APBx_PRESCALER_4:
		APB1_prescaler = 4;
 8001146:	2304      	movs	r3, #4
 8001148:	71fb      	strb	r3, [r7, #7]
		break;
 800114a:	e005      	b.n	8001158 <get_APB1_prescaler+0x58>
	case APBx_PRESCALER_8:
		APB1_prescaler = 8;
 800114c:	2308      	movs	r3, #8
 800114e:	71fb      	strb	r3, [r7, #7]
		break;
 8001150:	e002      	b.n	8001158 <get_APB1_prescaler+0x58>
	case APBx_PRESCALER_16:
		APB1_prescaler = 16;
 8001152:	2310      	movs	r3, #16
 8001154:	71fb      	strb	r3, [r7, #7]
		break;
 8001156:	bf00      	nop
	}

	return APB1_prescaler;
 8001158:	79fb      	ldrb	r3, [r7, #7]
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <get_APB2_prescaler>:

uint8_t get_APB2_prescaler() {
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
	uint8_t bits = (7u << 13) & RCC->CFGR;
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <get_APB2_prescaler+0x64>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2300      	movs	r3, #0
 8001178:	717b      	strb	r3, [r7, #5]
	uint16_t APB2_prescaler;

	if (!(bits & 4u)) {
 800117a:	797b      	ldrb	r3, [r7, #5]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <get_APB2_prescaler+0x1c>
		return 1;
 8001184:	2301      	movs	r3, #1
 8001186:	e01d      	b.n	80011c4 <get_APB2_prescaler+0x58>
	}

	switch (bits) {
 8001188:	797b      	ldrb	r3, [r7, #5]
 800118a:	3b04      	subs	r3, #4
 800118c:	2b03      	cmp	r3, #3
 800118e:	d817      	bhi.n	80011c0 <get_APB2_prescaler+0x54>
 8001190:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <get_APB2_prescaler+0x2c>)
 8001192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001196:	bf00      	nop
 8001198:	080011a9 	.word	0x080011a9
 800119c:	080011af 	.word	0x080011af
 80011a0:	080011b5 	.word	0x080011b5
 80011a4:	080011bb 	.word	0x080011bb
	case APBx_PRESCALER_2:
		APB2_prescaler = 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	80fb      	strh	r3, [r7, #6]
		break;
 80011ac:	e008      	b.n	80011c0 <get_APB2_prescaler+0x54>
	case APBx_PRESCALER_4:
		APB2_prescaler = 4;
 80011ae:	2304      	movs	r3, #4
 80011b0:	80fb      	strh	r3, [r7, #6]
		break;
 80011b2:	e005      	b.n	80011c0 <get_APB2_prescaler+0x54>
	case APBx_PRESCALER_8:
		APB2_prescaler = 8;
 80011b4:	2308      	movs	r3, #8
 80011b6:	80fb      	strh	r3, [r7, #6]
		break;
 80011b8:	e002      	b.n	80011c0 <get_APB2_prescaler+0x54>
	case APBx_PRESCALER_16:
		APB2_prescaler = 16;
 80011ba:	2310      	movs	r3, #16
 80011bc:	80fb      	strh	r3, [r7, #6]
		break;
 80011be:	bf00      	nop
	}

	return APB2_prescaler;
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	b2db      	uxtb	r3, r3
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40023800 	.word	0x40023800

080011d4 <get_SYSCLK>:

uint32_t get_SYSCLK() {
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0

	uint8_t clk_source = 3u & RCC->CFGR;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <get_SYSCLK+0x70>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	70fb      	strb	r3, [r7, #3]
	uint32_t clk_speed;

	if (clk_source == HSI || clk_source == HSE) {
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <get_SYSCLK+0x1e>
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d107      	bne.n	8001202 <get_SYSCLK+0x2e>
		clk_speed = get_clk_value(clk_source);
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff49 	bl	800108c <get_clk_value>
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	bf00      	nop

		return calculate_PLL_clk(clk_speed, get_PLLM(), get_PLLN(), get_PLLP());

	}

	return clk_speed;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	e01b      	b.n	800123a <get_SYSCLK+0x66>
		if ((1u << 22) & RCC->PLLCFGR) {
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <get_SYSCLK+0x70>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <get_SYSCLK+0x40>
			clk_speed = 8000000;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <get_SYSCLK+0x74>)
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	e001      	b.n	8001218 <get_SYSCLK+0x44>
			clk_speed = 16000000;
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <get_SYSCLK+0x78>)
 8001216:	607b      	str	r3, [r7, #4]
		return calculate_PLL_clk(clk_speed, get_PLLM(), get_PLLN(), get_PLLP());
 8001218:	f7ff feec 	bl	8000ff4 <get_PLLM>
 800121c:	4603      	mov	r3, r0
 800121e:	461c      	mov	r4, r3
 8001220:	f7ff fef8 	bl	8001014 <get_PLLN>
 8001224:	4603      	mov	r3, r0
 8001226:	461d      	mov	r5, r3
 8001228:	f7ff ff04 	bl	8001034 <get_PLLP>
 800122c:	4603      	mov	r3, r0
 800122e:	462a      	mov	r2, r5
 8001230:	4621      	mov	r1, r4
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff46 	bl	80010c4 <calculate_PLL_clk>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bdb0      	pop	{r4, r5, r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	007a1200 	.word	0x007a1200
 800124c:	00f42400 	.word	0x00f42400

08001250 <get_AHB_clock>:

uint32_t get_AHB_clock() {
 8001250:	b598      	push	{r3, r4, r7, lr}
 8001252:	af00      	add	r7, sp, #0

	return get_SYSCLK() / get_AHB_prescaler();
 8001254:	f7ff ffbe 	bl	80011d4 <get_SYSCLK>
 8001258:	4604      	mov	r4, r0
 800125a:	f7ff fe7f 	bl	8000f5c <get_AHB_prescaler>
 800125e:	4603      	mov	r3, r0
 8001260:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001264:	4618      	mov	r0, r3
 8001266:	bd98      	pop	{r3, r4, r7, pc}

08001268 <get_APB1_clock>:

uint32_t get_APB1_clock() {
 8001268:	b598      	push	{r3, r4, r7, lr}
 800126a:	af00      	add	r7, sp, #0

	return get_AHB_clock() / get_APB1_prescaler();
 800126c:	f7ff fff0 	bl	8001250 <get_AHB_clock>
 8001270:	4604      	mov	r4, r0
 8001272:	f7ff ff45 	bl	8001100 <get_APB1_prescaler>
 8001276:	4603      	mov	r3, r0
 8001278:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	bd98      	pop	{r3, r4, r7, pc}

08001280 <get_APB2_clock>:

uint32_t get_APB2_clock() {
 8001280:	b598      	push	{r3, r4, r7, lr}
 8001282:	af00      	add	r7, sp, #0

	return get_AHB_clock() / get_APB2_prescaler();
 8001284:	f7ff ffe4 	bl	8001250 <get_AHB_clock>
 8001288:	4604      	mov	r4, r0
 800128a:	f7ff ff6f 	bl	800116c <get_APB2_prescaler>
 800128e:	4603      	mov	r3, r0
 8001290:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001294:	4618      	mov	r0, r3
 8001296:	bd98      	pop	{r3, r4, r7, pc}

08001298 <enable_timer_clock>:
 *      Author: toni
 */
#include "delay_timer_lib.h"
#include "clocks_lib.h"

static void enable_timer_clock(TIM_TypeDef *timer) {
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	if (timer == TIM1) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a2e      	ldr	r2, [pc, #184]	; (800135c <enable_timer_clock+0xc4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d106      	bne.n	80012b6 <enable_timer_clock+0x1e>
		RCC->APB2ENR |= 1u;
 80012a8:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <enable_timer_clock+0xc8>)
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	4a2c      	ldr	r2, [pc, #176]	; (8001360 <enable_timer_clock+0xc8>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6453      	str	r3, [r2, #68]	; 0x44
	} else if (timer == TIM10) {
		RCC->APB2ENR |= 1u << 17;
	} else if (timer == TIM11) {
		RCC->APB2ENR |= 1u << 18;
	}
}
 80012b4:	e04b      	b.n	800134e <enable_timer_clock+0xb6>
	} else if (timer == TIM2) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012bc:	d106      	bne.n	80012cc <enable_timer_clock+0x34>
		RCC->APB1ENR |= 1u;
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <enable_timer_clock+0xc8>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a27      	ldr	r2, [pc, #156]	; (8001360 <enable_timer_clock+0xc8>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012ca:	e040      	b.n	800134e <enable_timer_clock+0xb6>
	} else if (timer == TIM3) {
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a25      	ldr	r2, [pc, #148]	; (8001364 <enable_timer_clock+0xcc>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d106      	bne.n	80012e2 <enable_timer_clock+0x4a>
		RCC->APB1ENR |= 2u;
 80012d4:	4b22      	ldr	r3, [pc, #136]	; (8001360 <enable_timer_clock+0xc8>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	4a21      	ldr	r2, [pc, #132]	; (8001360 <enable_timer_clock+0xc8>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012e0:	e035      	b.n	800134e <enable_timer_clock+0xb6>
	} else if (timer == TIM4) {
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a20      	ldr	r2, [pc, #128]	; (8001368 <enable_timer_clock+0xd0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d106      	bne.n	80012f8 <enable_timer_clock+0x60>
		RCC->APB1ENR |= 4u;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <enable_timer_clock+0xc8>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <enable_timer_clock+0xc8>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012f6:	e02a      	b.n	800134e <enable_timer_clock+0xb6>
	} else if (timer == TIM5) {
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <enable_timer_clock+0xd4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d106      	bne.n	800130e <enable_timer_clock+0x76>
		RCC->APB1ENR |= 8u;
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <enable_timer_clock+0xc8>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	4a16      	ldr	r2, [pc, #88]	; (8001360 <enable_timer_clock+0xc8>)
 8001306:	f043 0308 	orr.w	r3, r3, #8
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800130c:	e01f      	b.n	800134e <enable_timer_clock+0xb6>
	} else if (timer == TIM9) {
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a17      	ldr	r2, [pc, #92]	; (8001370 <enable_timer_clock+0xd8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d106      	bne.n	8001324 <enable_timer_clock+0x8c>
		RCC->APB2ENR |= 1u << 16;
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <enable_timer_clock+0xc8>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a11      	ldr	r2, [pc, #68]	; (8001360 <enable_timer_clock+0xc8>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001322:	e014      	b.n	800134e <enable_timer_clock+0xb6>
	} else if (timer == TIM10) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a13      	ldr	r2, [pc, #76]	; (8001374 <enable_timer_clock+0xdc>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d106      	bne.n	800133a <enable_timer_clock+0xa2>
		RCC->APB2ENR |= 1u << 17;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <enable_timer_clock+0xc8>)
 800132e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <enable_timer_clock+0xc8>)
 8001332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001336:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001338:	e009      	b.n	800134e <enable_timer_clock+0xb6>
	} else if (timer == TIM11) {
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <enable_timer_clock+0xe0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d105      	bne.n	800134e <enable_timer_clock+0xb6>
		RCC->APB2ENR |= 1u << 18;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <enable_timer_clock+0xc8>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a06      	ldr	r2, [pc, #24]	; (8001360 <enable_timer_clock+0xc8>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40010000 	.word	0x40010000
 8001360:	40023800 	.word	0x40023800
 8001364:	40000400 	.word	0x40000400
 8001368:	40000800 	.word	0x40000800
 800136c:	40000c00 	.word	0x40000c00
 8001370:	40014000 	.word	0x40014000
 8001374:	40014400 	.word	0x40014400
 8001378:	40014800 	.word	0x40014800

0800137c <init_timer>:
	uint16_t prescaler = timer->PSC;

	return get_timer_base_clock(timer) / (prescaler + 1);
}

void init_timer(TIM_TypeDef *timer, uint16_t prescaler) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
	enable_timer_clock(timer);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff85 	bl	8001298 <enable_timer_clock>
	timer->PSC = prescaler - 1;
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	3b01      	subs	r3, #1
 8001392:	461a      	mov	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	629a      	str	r2, [r3, #40]	; 0x28

}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <read_bit>:
uint16_t temperature_tmp;
uint16_t humidity_tmp;

uint8_t bits_read;

static void read_bit(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	pin_state value = read_pin(&dht22);
 80013a6:	482b      	ldr	r0, [pc, #172]	; (8001454 <read_bit+0xb4>)
 80013a8:	f7ff f91a 	bl	80005e0 <read_pin>
 80013ac:	4603      	mov	r3, r0
 80013ae:	71fb      	strb	r3, [r7, #7]

	if (bits_read == 32) {
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <read_bit+0xb8>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b20      	cmp	r3, #32
 80013b6:	d119      	bne.n	80013ec <read_bit+0x4c>

		disable_EXTI(10);
 80013b8:	200a      	movs	r0, #10
 80013ba:	f7fe ffe5 	bl	8000388 <disable_EXTI>

		dht22_data.temperature = temperature_tmp;
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <read_bit+0xbc>)
 80013c0:	881a      	ldrh	r2, [r3, #0]
 80013c2:	4b27      	ldr	r3, [pc, #156]	; (8001460 <read_bit+0xc0>)
 80013c4:	801a      	strh	r2, [r3, #0]
		dht22_data.humidity = humidity_tmp;
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <read_bit+0xc4>)
 80013c8:	881a      	ldrh	r2, [r3, #0]
 80013ca:	4b25      	ldr	r3, [pc, #148]	; (8001460 <read_bit+0xc0>)
 80013cc:	805a      	strh	r2, [r3, #2]

		temperature_tmp = 0;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <read_bit+0xbc>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	801a      	strh	r2, [r3, #0]
		humidity_tmp = 0;
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <read_bit+0xc4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	801a      	strh	r2, [r3, #0]
		bits_read = -1;
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <read_bit+0xb8>)
 80013dc:	22ff      	movs	r2, #255	; 0xff
 80013de:	701a      	strb	r2, [r3, #0]

		dht_status = SLEEPING;
 80013e0:	4b21      	ldr	r3, [pc, #132]	; (8001468 <read_bit+0xc8>)
 80013e2:	2203      	movs	r2, #3
 80013e4:	701a      	strb	r2, [r3, #0]
		dht22_application_callback();
 80013e6:	f000 f8cf 	bl	8001588 <dht22_application_callback>
 80013ea:	e028      	b.n	800143e <read_bit+0x9e>

	} else if (bits_read < 16) {
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <read_bit+0xb8>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d810      	bhi.n	8001416 <read_bit+0x76>

		humidity_tmp |= (value << (15 - bits_read));
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <read_bit+0xb8>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	f1c3 030f 	rsb	r3, r3, #15
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	b21a      	sxth	r2, r3
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <read_bit+0xc4>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	b21b      	sxth	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b21b      	sxth	r3, r3
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <read_bit+0xc4>)
 8001412:	801a      	strh	r2, [r3, #0]
 8001414:	e013      	b.n	800143e <read_bit+0x9e>

	} else if (bits_read < 32) {
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <read_bit+0xb8>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b1f      	cmp	r3, #31
 800141c:	d80f      	bhi.n	800143e <read_bit+0x9e>

		temperature_tmp |= (value << (31 - bits_read));
 800141e:	79fa      	ldrb	r2, [r7, #7]
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <read_bit+0xb8>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	f1c3 031f 	rsb	r3, r3, #31
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	b21a      	sxth	r2, r3
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <read_bit+0xbc>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b21b      	sxth	r3, r3
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <read_bit+0xbc>)
 800143c:	801a      	strh	r2, [r3, #0]

	}

	bits_read++;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <read_bit+0xb8>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <read_bit+0xb8>)
 8001448:	701a      	strb	r2, [r3, #0]

}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000144 	.word	0x20000144
 8001458:	2000013d 	.word	0x2000013d
 800145c:	20000140 	.word	0x20000140
 8001460:	20000138 	.word	0x20000138
 8001464:	20000130 	.word	0x20000130
 8001468:	2000013e 	.word	0x2000013e

0800146c <dht22_handle_data_pin_IT>:

void dht22_handle_data_pin_IT() {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	IR_timer_micros(35);
 8001470:	2023      	movs	r0, #35	; 0x23
 8001472:	f000 f9d9 	bl	8001828 <IR_timer_micros>

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <dht22_handle_delay_IT>:


void dht22_handle_delay_IT(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0

	if (dht_status == INITIALIZING) {
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <dht22_handle_delay_IT+0x50>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d10c      	bne.n	80014a2 <dht22_handle_delay_IT+0x26>

		dht_status = INITIALIZING_2;
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <dht22_handle_delay_IT+0x50>)
 800148a:	2202      	movs	r2, #2
 800148c:	701a      	strb	r2, [r3, #0]

		dht22.mode = INPUT;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <dht22_handle_delay_IT+0x54>)
 8001490:	2200      	movs	r2, #0
 8001492:	715a      	strb	r2, [r3, #5]
		change_mode(&dht22);
 8001494:	480e      	ldr	r0, [pc, #56]	; (80014d0 <dht22_handle_delay_IT+0x54>)
 8001496:	f7ff f841 	bl	800051c <change_mode>

		IR_timer_micros(185);
 800149a:	20b9      	movs	r0, #185	; 0xb9
 800149c:	f000 f9c4 	bl	8001828 <IR_timer_micros>

	} else if (dht_status == SENDING_DATA) {
		read_bit();
	}

}
 80014a0:	e012      	b.n	80014c8 <dht22_handle_delay_IT+0x4c>
	} else if (dht_status == INITIALIZING_2) {
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <dht22_handle_delay_IT+0x50>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d108      	bne.n	80014bc <dht22_handle_delay_IT+0x40>
		dht_status = SENDING_DATA;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <dht22_handle_delay_IT+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
		enable_EXTI(10, EXTI_GPIOA, EXTI_RE);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	200a      	movs	r0, #10
 80014b6:	f7fe feff 	bl	80002b8 <enable_EXTI>
}
 80014ba:	e005      	b.n	80014c8 <dht22_handle_delay_IT+0x4c>
	} else if (dht_status == SENDING_DATA) {
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <dht22_handle_delay_IT+0x50>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <dht22_handle_delay_IT+0x4c>
		read_bit();
 80014c4:	f7ff ff6c 	bl	80013a0 <read_bit>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2000013e 	.word	0x2000013e
 80014d0:	20000144 	.word	0x20000144

080014d4 <init_dht22>:

void init_dht22() {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

	dht_status = SLEEPING;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <init_dht22+0x2c>)
 80014da:	2203      	movs	r2, #3
 80014dc:	701a      	strb	r2, [r3, #0]

	dht22.PP_OD = PP;
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <init_dht22+0x30>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	719a      	strb	r2, [r3, #6]
	dht22.mode = INPUT;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <init_dht22+0x30>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	715a      	strb	r2, [r3, #5]
	dht22.push_pull = PULL_UP;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <init_dht22+0x30>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	71da      	strb	r2, [r3, #7]

	init_pin(&dht22);
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <init_dht22+0x30>)
 80014f2:	f7fe ffe5 	bl	80004c0 <init_pin>
	enable_IR(EXTI15_10_IRQn);
 80014f6:	2028      	movs	r0, #40	; 0x28
 80014f8:	f7ff fb4e 	bl	8000b98 <enable_IR>

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000013e 	.word	0x2000013e
 8001504:	20000144 	.word	0x20000144

08001508 <SysTick_Handler>:
#include "dht22.h"
#include "main.h"
#include "UART_lib.h"
#include "stdio.h"

void SysTick_Handler() {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <SysTick_Handler+0x14>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
	dht22_handle_delay_IT();
 8001512:	f7ff ffb3 	bl	800147c <dht22_handle_delay_IT>

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	e000e010 	.word	0xe000e010

08001520 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler() {
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0

	dht22_handle_data_pin_IT();
 8001524:	f7ff ffa2 	bl	800146c <dht22_handle_data_pin_IT>
	EXTI->PR |= 1u << 10;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <EXTI15_10_IRQHandler+0x18>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a02      	ldr	r2, [pc, #8]	; (8001538 <EXTI15_10_IRQHandler+0x18>)
 800152e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001532:	6153      	str	r3, [r2, #20]

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40013c00 	.word	0x40013c00

0800153c <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler() {
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	I2C_handle_EV(&I2C_handle);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <I2C1_EV_IRQHandler+0x10>)
 8001542:	f7ff fabb 	bl	8000abc <I2C_handle_EV>
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000150 	.word	0x20000150

08001550 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler() {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
	uint8_t error_code = I2C_handle_ER(&I2C_handle);
 8001556:	4809      	ldr	r0, [pc, #36]	; (800157c <I2C1_ER_IRQHandler+0x2c>)
 8001558:	f7ff fac7 	bl	8000aea <I2C_handle_ER>
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
	char number[2];
	sprintf(number, "%d", error_code);
 8001560:	79fa      	ldrb	r2, [r7, #7]
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	4906      	ldr	r1, [pc, #24]	; (8001580 <I2C1_ER_IRQHandler+0x30>)
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f9e2 	bl	8001930 <siprintf>

	uart_transmit_data(USART2, (uint8_t*) number, 2);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2202      	movs	r2, #2
 8001570:	4619      	mov	r1, r3
 8001572:	4804      	ldr	r0, [pc, #16]	; (8001584 <I2C1_ER_IRQHandler+0x34>)
 8001574:	f7ff fcb4 	bl	8000ee0 <uart_transmit_data>

	while(1);
 8001578:	e7fe      	b.n	8001578 <I2C1_ER_IRQHandler+0x28>
 800157a:	bf00      	nop
 800157c:	20000150 	.word	0x20000150
 8001580:	08002e14 	.word	0x08002e14
 8001584:	40004400 	.word	0x40004400

08001588 <dht22_application_callback>:
#include "string.h"
#include "RTC.h"

pin_type test_pin;

void dht22_application_callback() {
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	printf("%d\n", (int) dht22_data.temperature);
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <dht22_application_callback+0x20>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <dht22_application_callback+0x24>)
 8001594:	f000 f9b4 	bl	8001900 <iprintf>
	printf("%d\n", (int) dht22_data.humidity);
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <dht22_application_callback+0x20>)
 800159a:	885b      	ldrh	r3, [r3, #2]
 800159c:	4619      	mov	r1, r3
 800159e:	4803      	ldr	r0, [pc, #12]	; (80015ac <dht22_application_callback+0x24>)
 80015a0:	f000 f9ae 	bl	8001900 <iprintf>

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000138 	.word	0x20000138
 80015ac:	08002e18 	.word	0x08002e18

080015b0 <uart_pins_init>:

void uart_pins_init() {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
	//pins PA2 and PA3
	pin_type uartTX, uartRX;
	uartTX.AF_num = 7;
 80015b6:	2307      	movs	r3, #7
 80015b8:	753b      	strb	r3, [r7, #20]
	uartTX.PP_OD = PP;
 80015ba:	2300      	movs	r3, #0
 80015bc:	74bb      	strb	r3, [r7, #18]
	uartTX.gpio = GPIOA;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <uart_pins_init+0x48>)
 80015c0:	60fb      	str	r3, [r7, #12]
	uartTX.mode = ALTERNATE_FUNCTION;
 80015c2:	2302      	movs	r3, #2
 80015c4:	747b      	strb	r3, [r7, #17]
	uartTX.pin_num = 2;
 80015c6:	2302      	movs	r3, #2
 80015c8:	743b      	strb	r3, [r7, #16]
	uartTX.push_pull = NO_PULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	74fb      	strb	r3, [r7, #19]

	uartRX = uartTX;
 80015ce:	463b      	mov	r3, r7
 80015d0:	f107 020c 	add.w	r2, r7, #12
 80015d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80015d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uartRX.pin_num = 3;
 80015da:	2303      	movs	r3, #3
 80015dc:	713b      	strb	r3, [r7, #4]

	init_pin(&uartTX);
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ff6c 	bl	80004c0 <init_pin>
	init_pin(&uartRX);
 80015e8:	463b      	mov	r3, r7
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ff68 	bl	80004c0 <init_pin>

}
 80015f0:	bf00      	nop
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40020000 	.word	0x40020000

080015fc <I2C_pins_init>:

void I2C_pins_init() {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
	pin_type SCL, SDA;
	SCL.AF_num = 4;
 8001602:	2304      	movs	r3, #4
 8001604:	753b      	strb	r3, [r7, #20]
	SCL.PP_OD = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	74bb      	strb	r3, [r7, #18]
	SCL.push_pull = PULL_UP;
 800160a:	2301      	movs	r3, #1
 800160c:	74fb      	strb	r3, [r7, #19]
	SCL.gpio = GPIOB;
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <I2C_pins_init+0x48>)
 8001610:	60fb      	str	r3, [r7, #12]
	SCL.mode = ALTERNATE_FUNCTION;
 8001612:	2302      	movs	r3, #2
 8001614:	747b      	strb	r3, [r7, #17]
	SCL.pin_num = 6;
 8001616:	2306      	movs	r3, #6
 8001618:	743b      	strb	r3, [r7, #16]

	SDA = SCL;
 800161a:	463b      	mov	r3, r7
 800161c:	f107 020c 	add.w	r2, r7, #12
 8001620:	ca07      	ldmia	r2, {r0, r1, r2}
 8001622:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	SDA.pin_num = 7;
 8001626:	2307      	movs	r3, #7
 8001628:	713b      	strb	r3, [r7, #4]

	init_pin(&SCL);
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff46 	bl	80004c0 <init_pin>
	init_pin(&SDA);
 8001634:	463b      	mov	r3, r7
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff42 	bl	80004c0 <init_pin>

}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40020400 	.word	0x40020400

08001648 <main>:
	sprintf(buffer, format, (int) date_time->hours, (int) date_time->minutes,
			(int) date_time->seconds, (int) date_time->date,
			(int) date_time->month, (int) date_time->year);
}

int main(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af00      	add	r7, sp, #0

	init_systick();
 800164e:	f000 f8c9 	bl	80017e4 <init_systick>
	init_timer(TIM2, 1);
 8001652:	2101      	movs	r1, #1
 8001654:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001658:	f7ff fe90 	bl	800137c <init_timer>
	init_dht22();
 800165c:	f7ff ff3a 	bl	80014d4 <init_dht22>


	uart_init(USART2, UART_8BIT, UART_1_STOP_BITS, 115200);
 8001660:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	4824      	ldr	r0, [pc, #144]	; (80016fc <main+0xb4>)
 800166a:	f7ff fc09 	bl	8000e80 <uart_init>
	uint8_t data[2] = {0x1, 0xFF};
 800166e:	f64f 7301 	movw	r3, #65281	; 0xff01
 8001672:	85bb      	strh	r3, [r7, #44]	; 0x2c


	memset(&I2C_handle, 0, sizeof(I2C_handle));
 8001674:	2214      	movs	r2, #20
 8001676:	2100      	movs	r1, #0
 8001678:	4821      	ldr	r0, [pc, #132]	; (8001700 <main+0xb8>)
 800167a:	f000 f939 	bl	80018f0 <memset>
	I2C_handle.addressing_mode = I2C_7_BIT_ADDRESSING;
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <main+0xb8>)
 8001680:	2200      	movs	r2, #0
 8001682:	711a      	strb	r2, [r3, #4]
	I2C_handle.peripheral = I2C1;
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <main+0xb8>)
 8001686:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <main+0xbc>)
 8001688:	601a      	str	r2, [r3, #0]
	I2C_handle.slave_address = 0x27;
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <main+0xb8>)
 800168c:	2227      	movs	r2, #39	; 0x27
 800168e:	80da      	strh	r2, [r3, #6]
	I2C_handle.data = data;
 8001690:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <main+0xb8>)
 8001692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001696:	6093      	str	r3, [r2, #8]
	I2C_handle.data_len = 2;
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <main+0xb8>)
 800169a:	2202      	movs	r2, #2
 800169c:	60da      	str	r2, [r3, #12]

	date_time_type date_time;
	date_time.date = 29;
 800169e:	231d      	movs	r3, #29
 80016a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_time.day = wednesday;
 80016a4:	2303      	movs	r3, #3
 80016a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	date_time.hours = 13;
 80016aa:	230d      	movs	r3, #13
 80016ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	date_time.minutes = 40;
 80016b0:	2328      	movs	r3, #40	; 0x28
 80016b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_time.month = 12;
 80016b6:	230c      	movs	r3, #12
 80016b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	date_time.seconds = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3020 	strb.w	r3, [r7, #32]
	date_time.time_format = format_24;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	date_time.year = 21;
 80016c8:	2315      	movs	r3, #21
 80016ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	RTC_init(&date_time);
 80016ce:	f107 0320 	add.w	r3, r7, #32
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fad4 	bl	8000c80 <RTC_init>

	I2C_init(&I2C_handle);
 80016d8:	4809      	ldr	r0, [pc, #36]	; (8001700 <main+0xb8>)
 80016da:	f7ff f835 	bl	8000748 <I2C_init>
	char time[22];

	I2C_transmit_data_and_wait(&I2C_handle);
 80016de:	4808      	ldr	r0, [pc, #32]	; (8001700 <main+0xb8>)
 80016e0:	f7ff f8a4 	bl	800082c <I2C_transmit_data_and_wait>

	uint8_t data2 = 0x1u;
 80016e4:	2301      	movs	r3, #1
 80016e6:	71fb      	strb	r3, [r7, #7]
	I2C_handle.data = &data2;
 80016e8:	4a05      	ldr	r2, [pc, #20]	; (8001700 <main+0xb8>)
 80016ea:	1dfb      	adds	r3, r7, #7
 80016ec:	6093      	str	r3, [r2, #8]
	I2C_handle.data_len = 1;
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <main+0xb8>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	60da      	str	r2, [r3, #12]

	I2C_transmit_data(&I2C_handle);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <main+0xb8>)
 80016f6:	f7ff f885 	bl	8000804 <I2C_transmit_data>

	while (1) {
 80016fa:	e7fe      	b.n	80016fa <main+0xb2>
 80016fc:	40004400 	.word	0x40004400
 8001700:	20000150 	.word	0x20000150
 8001704:	40005400 	.word	0x40005400

08001708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <_sbrk+0x5c>)
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <_sbrk+0x60>)
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <_sbrk+0x64>)
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <_sbrk+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	d207      	bcs.n	8001748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001738:	f000 f8b0 	bl	800189c <__errno>
 800173c:	4603      	mov	r3, r0
 800173e:	220c      	movs	r2, #12
 8001740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e009      	b.n	800175c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <_sbrk+0x64>)
 8001758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20018000 	.word	0x20018000
 8001768:	00000400 	.word	0x00000400
 800176c:	20000084 	.word	0x20000084
 8001770:	20000180 	.word	0x20000180

08001774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <SystemInit+0x20>)
 800177a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <SystemInit+0x20>)
 8001780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <timer>:
#include <systick_IR_timer_lib.h>
#include "clocks_lib.h"
#include "stm32f4xx.h"

static void timer(uint32_t s, uint32_t unit) {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]

	SysTick->CTRL = 0;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <timer+0x48>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <timer+0x48>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <timer+0x48>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]

	SysTick->LOAD |= s * unit - 1;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <timer+0x48>)
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6839      	ldr	r1, [r7, #0]
 80017bc:	fb01 f303 	mul.w	r3, r1, r3
 80017c0:	3b01      	subs	r3, #1
 80017c2:	4907      	ldr	r1, [pc, #28]	; (80017e0 <timer+0x48>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
	SysTick->CTRL |= 7u;
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <timer+0x48>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <timer+0x48>)
 80017ce:	f043 0307 	orr.w	r3, r3, #7
 80017d2:	6013      	str	r3, [r2, #0]

}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <init_systick>:

void init_systick() {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0

	uint32_t processor_clock = get_AHB_clock();
 80017ea:	f7ff fd31 	bl	8001250 <get_AHB_clock>
 80017ee:	6078      	str	r0, [r7, #4]
	MILLIS = processor_clock / 1000;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <init_systick+0x34>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	099b      	lsrs	r3, r3, #6
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <init_systick+0x38>)
 80017fc:	6013      	str	r3, [r2, #0]
	MICROS = processor_clock / 1000000;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a07      	ldr	r2, [pc, #28]	; (8001820 <init_systick+0x3c>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0c9b      	lsrs	r3, r3, #18
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <init_systick+0x40>)
 800180c:	701a      	strb	r2, [r3, #0]
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	10624dd3 	.word	0x10624dd3
 800181c:	20000134 	.word	0x20000134
 8001820:	431bde83 	.word	0x431bde83
 8001824:	2000013c 	.word	0x2000013c

08001828 <IR_timer_micros>:

	timer(ms, MILLIS);

}

void IR_timer_micros(uint32_t micros) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

	timer(micros, MICROS);
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <IR_timer_micros+0x1c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffae 	bl	8001798 <timer>

}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000013c 	.word	0x2000013c

08001848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001880 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800184c:	480d      	ldr	r0, [pc, #52]	; (8001884 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800184e:	490e      	ldr	r1, [pc, #56]	; (8001888 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001850:	4a0e      	ldr	r2, [pc, #56]	; (800188c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001854:	e002      	b.n	800185c <LoopCopyDataInit>

08001856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185a:	3304      	adds	r3, #4

0800185c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800185c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001860:	d3f9      	bcc.n	8001856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001862:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001864:	4c0b      	ldr	r4, [pc, #44]	; (8001894 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001868:	e001      	b.n	800186e <LoopFillZerobss>

0800186a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800186c:	3204      	adds	r2, #4

0800186e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001870:	d3fb      	bcc.n	800186a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001872:	f7ff ff7f 	bl	8001774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001876:	f000 f817 	bl	80018a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187a:	f7ff fee5 	bl	8001648 <main>
  bx  lr    
 800187e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001880:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800188c:	08002ee0 	.word	0x08002ee0
  ldr r2, =_sbss
 8001890:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001894:	20000180 	.word	0x20000180

08001898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC_IRQHandler>
	...

0800189c <__errno>:
 800189c:	4b01      	ldr	r3, [pc, #4]	; (80018a4 <__errno+0x8>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000000 	.word	0x20000000

080018a8 <__libc_init_array>:
 80018a8:	b570      	push	{r4, r5, r6, lr}
 80018aa:	4d0d      	ldr	r5, [pc, #52]	; (80018e0 <__libc_init_array+0x38>)
 80018ac:	4c0d      	ldr	r4, [pc, #52]	; (80018e4 <__libc_init_array+0x3c>)
 80018ae:	1b64      	subs	r4, r4, r5
 80018b0:	10a4      	asrs	r4, r4, #2
 80018b2:	2600      	movs	r6, #0
 80018b4:	42a6      	cmp	r6, r4
 80018b6:	d109      	bne.n	80018cc <__libc_init_array+0x24>
 80018b8:	4d0b      	ldr	r5, [pc, #44]	; (80018e8 <__libc_init_array+0x40>)
 80018ba:	4c0c      	ldr	r4, [pc, #48]	; (80018ec <__libc_init_array+0x44>)
 80018bc:	f001 fa9e 	bl	8002dfc <_init>
 80018c0:	1b64      	subs	r4, r4, r5
 80018c2:	10a4      	asrs	r4, r4, #2
 80018c4:	2600      	movs	r6, #0
 80018c6:	42a6      	cmp	r6, r4
 80018c8:	d105      	bne.n	80018d6 <__libc_init_array+0x2e>
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
 80018cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80018d0:	4798      	blx	r3
 80018d2:	3601      	adds	r6, #1
 80018d4:	e7ee      	b.n	80018b4 <__libc_init_array+0xc>
 80018d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80018da:	4798      	blx	r3
 80018dc:	3601      	adds	r6, #1
 80018de:	e7f2      	b.n	80018c6 <__libc_init_array+0x1e>
 80018e0:	08002ed8 	.word	0x08002ed8
 80018e4:	08002ed8 	.word	0x08002ed8
 80018e8:	08002ed8 	.word	0x08002ed8
 80018ec:	08002edc 	.word	0x08002edc

080018f0 <memset>:
 80018f0:	4402      	add	r2, r0
 80018f2:	4603      	mov	r3, r0
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d100      	bne.n	80018fa <memset+0xa>
 80018f8:	4770      	bx	lr
 80018fa:	f803 1b01 	strb.w	r1, [r3], #1
 80018fe:	e7f9      	b.n	80018f4 <memset+0x4>

08001900 <iprintf>:
 8001900:	b40f      	push	{r0, r1, r2, r3}
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <iprintf+0x2c>)
 8001904:	b513      	push	{r0, r1, r4, lr}
 8001906:	681c      	ldr	r4, [r3, #0]
 8001908:	b124      	cbz	r4, 8001914 <iprintf+0x14>
 800190a:	69a3      	ldr	r3, [r4, #24]
 800190c:	b913      	cbnz	r3, 8001914 <iprintf+0x14>
 800190e:	4620      	mov	r0, r4
 8001910:	f000 f886 	bl	8001a20 <__sinit>
 8001914:	ab05      	add	r3, sp, #20
 8001916:	9a04      	ldr	r2, [sp, #16]
 8001918:	68a1      	ldr	r1, [r4, #8]
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	4620      	mov	r0, r4
 800191e:	f000 faff 	bl	8001f20 <_vfiprintf_r>
 8001922:	b002      	add	sp, #8
 8001924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001928:	b004      	add	sp, #16
 800192a:	4770      	bx	lr
 800192c:	20000000 	.word	0x20000000

08001930 <siprintf>:
 8001930:	b40e      	push	{r1, r2, r3}
 8001932:	b500      	push	{lr}
 8001934:	b09c      	sub	sp, #112	; 0x70
 8001936:	ab1d      	add	r3, sp, #116	; 0x74
 8001938:	9002      	str	r0, [sp, #8]
 800193a:	9006      	str	r0, [sp, #24]
 800193c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001940:	4809      	ldr	r0, [pc, #36]	; (8001968 <siprintf+0x38>)
 8001942:	9107      	str	r1, [sp, #28]
 8001944:	9104      	str	r1, [sp, #16]
 8001946:	4909      	ldr	r1, [pc, #36]	; (800196c <siprintf+0x3c>)
 8001948:	f853 2b04 	ldr.w	r2, [r3], #4
 800194c:	9105      	str	r1, [sp, #20]
 800194e:	6800      	ldr	r0, [r0, #0]
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	a902      	add	r1, sp, #8
 8001954:	f000 f9ba 	bl	8001ccc <_svfiprintf_r>
 8001958:	9b02      	ldr	r3, [sp, #8]
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	b01c      	add	sp, #112	; 0x70
 8001960:	f85d eb04 	ldr.w	lr, [sp], #4
 8001964:	b003      	add	sp, #12
 8001966:	4770      	bx	lr
 8001968:	20000000 	.word	0x20000000
 800196c:	ffff0208 	.word	0xffff0208

08001970 <std>:
 8001970:	2300      	movs	r3, #0
 8001972:	b510      	push	{r4, lr}
 8001974:	4604      	mov	r4, r0
 8001976:	e9c0 3300 	strd	r3, r3, [r0]
 800197a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800197e:	6083      	str	r3, [r0, #8]
 8001980:	8181      	strh	r1, [r0, #12]
 8001982:	6643      	str	r3, [r0, #100]	; 0x64
 8001984:	81c2      	strh	r2, [r0, #14]
 8001986:	6183      	str	r3, [r0, #24]
 8001988:	4619      	mov	r1, r3
 800198a:	2208      	movs	r2, #8
 800198c:	305c      	adds	r0, #92	; 0x5c
 800198e:	f7ff ffaf 	bl	80018f0 <memset>
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <std+0x38>)
 8001994:	6263      	str	r3, [r4, #36]	; 0x24
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <std+0x3c>)
 8001998:	62a3      	str	r3, [r4, #40]	; 0x28
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <std+0x40>)
 800199c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <std+0x44>)
 80019a0:	6224      	str	r4, [r4, #32]
 80019a2:	6323      	str	r3, [r4, #48]	; 0x30
 80019a4:	bd10      	pop	{r4, pc}
 80019a6:	bf00      	nop
 80019a8:	080024c9 	.word	0x080024c9
 80019ac:	080024eb 	.word	0x080024eb
 80019b0:	08002523 	.word	0x08002523
 80019b4:	08002547 	.word	0x08002547

080019b8 <_cleanup_r>:
 80019b8:	4901      	ldr	r1, [pc, #4]	; (80019c0 <_cleanup_r+0x8>)
 80019ba:	f000 b8af 	b.w	8001b1c <_fwalk_reent>
 80019be:	bf00      	nop
 80019c0:	08002821 	.word	0x08002821

080019c4 <__sfmoreglue>:
 80019c4:	b570      	push	{r4, r5, r6, lr}
 80019c6:	1e4a      	subs	r2, r1, #1
 80019c8:	2568      	movs	r5, #104	; 0x68
 80019ca:	4355      	muls	r5, r2
 80019cc:	460e      	mov	r6, r1
 80019ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80019d2:	f000 f8c5 	bl	8001b60 <_malloc_r>
 80019d6:	4604      	mov	r4, r0
 80019d8:	b140      	cbz	r0, 80019ec <__sfmoreglue+0x28>
 80019da:	2100      	movs	r1, #0
 80019dc:	e9c0 1600 	strd	r1, r6, [r0]
 80019e0:	300c      	adds	r0, #12
 80019e2:	60a0      	str	r0, [r4, #8]
 80019e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80019e8:	f7ff ff82 	bl	80018f0 <memset>
 80019ec:	4620      	mov	r0, r4
 80019ee:	bd70      	pop	{r4, r5, r6, pc}

080019f0 <__sfp_lock_acquire>:
 80019f0:	4801      	ldr	r0, [pc, #4]	; (80019f8 <__sfp_lock_acquire+0x8>)
 80019f2:	f000 b8b3 	b.w	8001b5c <__retarget_lock_acquire_recursive>
 80019f6:	bf00      	nop
 80019f8:	20000178 	.word	0x20000178

080019fc <__sfp_lock_release>:
 80019fc:	4801      	ldr	r0, [pc, #4]	; (8001a04 <__sfp_lock_release+0x8>)
 80019fe:	f000 b8ae 	b.w	8001b5e <__retarget_lock_release_recursive>
 8001a02:	bf00      	nop
 8001a04:	20000178 	.word	0x20000178

08001a08 <__sinit_lock_acquire>:
 8001a08:	4801      	ldr	r0, [pc, #4]	; (8001a10 <__sinit_lock_acquire+0x8>)
 8001a0a:	f000 b8a7 	b.w	8001b5c <__retarget_lock_acquire_recursive>
 8001a0e:	bf00      	nop
 8001a10:	20000173 	.word	0x20000173

08001a14 <__sinit_lock_release>:
 8001a14:	4801      	ldr	r0, [pc, #4]	; (8001a1c <__sinit_lock_release+0x8>)
 8001a16:	f000 b8a2 	b.w	8001b5e <__retarget_lock_release_recursive>
 8001a1a:	bf00      	nop
 8001a1c:	20000173 	.word	0x20000173

08001a20 <__sinit>:
 8001a20:	b510      	push	{r4, lr}
 8001a22:	4604      	mov	r4, r0
 8001a24:	f7ff fff0 	bl	8001a08 <__sinit_lock_acquire>
 8001a28:	69a3      	ldr	r3, [r4, #24]
 8001a2a:	b11b      	cbz	r3, 8001a34 <__sinit+0x14>
 8001a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a30:	f7ff bff0 	b.w	8001a14 <__sinit_lock_release>
 8001a34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001a38:	6523      	str	r3, [r4, #80]	; 0x50
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <__sinit+0x68>)
 8001a3c:	4a13      	ldr	r2, [pc, #76]	; (8001a8c <__sinit+0x6c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	62a2      	str	r2, [r4, #40]	; 0x28
 8001a42:	42a3      	cmp	r3, r4
 8001a44:	bf04      	itt	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	61a3      	streq	r3, [r4, #24]
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f000 f820 	bl	8001a90 <__sfp>
 8001a50:	6060      	str	r0, [r4, #4]
 8001a52:	4620      	mov	r0, r4
 8001a54:	f000 f81c 	bl	8001a90 <__sfp>
 8001a58:	60a0      	str	r0, [r4, #8]
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f000 f818 	bl	8001a90 <__sfp>
 8001a60:	2200      	movs	r2, #0
 8001a62:	60e0      	str	r0, [r4, #12]
 8001a64:	2104      	movs	r1, #4
 8001a66:	6860      	ldr	r0, [r4, #4]
 8001a68:	f7ff ff82 	bl	8001970 <std>
 8001a6c:	68a0      	ldr	r0, [r4, #8]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	2109      	movs	r1, #9
 8001a72:	f7ff ff7d 	bl	8001970 <std>
 8001a76:	68e0      	ldr	r0, [r4, #12]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	2112      	movs	r1, #18
 8001a7c:	f7ff ff78 	bl	8001970 <std>
 8001a80:	2301      	movs	r3, #1
 8001a82:	61a3      	str	r3, [r4, #24]
 8001a84:	e7d2      	b.n	8001a2c <__sinit+0xc>
 8001a86:	bf00      	nop
 8001a88:	08002e40 	.word	0x08002e40
 8001a8c:	080019b9 	.word	0x080019b9

08001a90 <__sfp>:
 8001a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a92:	4607      	mov	r7, r0
 8001a94:	f7ff ffac 	bl	80019f0 <__sfp_lock_acquire>
 8001a98:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <__sfp+0x84>)
 8001a9a:	681e      	ldr	r6, [r3, #0]
 8001a9c:	69b3      	ldr	r3, [r6, #24]
 8001a9e:	b913      	cbnz	r3, 8001aa6 <__sfp+0x16>
 8001aa0:	4630      	mov	r0, r6
 8001aa2:	f7ff ffbd 	bl	8001a20 <__sinit>
 8001aa6:	3648      	adds	r6, #72	; 0x48
 8001aa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	d503      	bpl.n	8001ab8 <__sfp+0x28>
 8001ab0:	6833      	ldr	r3, [r6, #0]
 8001ab2:	b30b      	cbz	r3, 8001af8 <__sfp+0x68>
 8001ab4:	6836      	ldr	r6, [r6, #0]
 8001ab6:	e7f7      	b.n	8001aa8 <__sfp+0x18>
 8001ab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001abc:	b9d5      	cbnz	r5, 8001af4 <__sfp+0x64>
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <__sfp+0x88>)
 8001ac0:	60e3      	str	r3, [r4, #12]
 8001ac2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001ac6:	6665      	str	r5, [r4, #100]	; 0x64
 8001ac8:	f000 f847 	bl	8001b5a <__retarget_lock_init_recursive>
 8001acc:	f7ff ff96 	bl	80019fc <__sfp_lock_release>
 8001ad0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001ad4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001ad8:	6025      	str	r5, [r4, #0]
 8001ada:	61a5      	str	r5, [r4, #24]
 8001adc:	2208      	movs	r2, #8
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ae4:	f7ff ff04 	bl	80018f0 <memset>
 8001ae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001aec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001af0:	4620      	mov	r0, r4
 8001af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001af4:	3468      	adds	r4, #104	; 0x68
 8001af6:	e7d9      	b.n	8001aac <__sfp+0x1c>
 8001af8:	2104      	movs	r1, #4
 8001afa:	4638      	mov	r0, r7
 8001afc:	f7ff ff62 	bl	80019c4 <__sfmoreglue>
 8001b00:	4604      	mov	r4, r0
 8001b02:	6030      	str	r0, [r6, #0]
 8001b04:	2800      	cmp	r0, #0
 8001b06:	d1d5      	bne.n	8001ab4 <__sfp+0x24>
 8001b08:	f7ff ff78 	bl	80019fc <__sfp_lock_release>
 8001b0c:	230c      	movs	r3, #12
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	e7ee      	b.n	8001af0 <__sfp+0x60>
 8001b12:	bf00      	nop
 8001b14:	08002e40 	.word	0x08002e40
 8001b18:	ffff0001 	.word	0xffff0001

08001b1c <_fwalk_reent>:
 8001b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b20:	4606      	mov	r6, r0
 8001b22:	4688      	mov	r8, r1
 8001b24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001b28:	2700      	movs	r7, #0
 8001b2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001b2e:	f1b9 0901 	subs.w	r9, r9, #1
 8001b32:	d505      	bpl.n	8001b40 <_fwalk_reent+0x24>
 8001b34:	6824      	ldr	r4, [r4, #0]
 8001b36:	2c00      	cmp	r4, #0
 8001b38:	d1f7      	bne.n	8001b2a <_fwalk_reent+0xe>
 8001b3a:	4638      	mov	r0, r7
 8001b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b40:	89ab      	ldrh	r3, [r5, #12]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d907      	bls.n	8001b56 <_fwalk_reent+0x3a>
 8001b46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	d003      	beq.n	8001b56 <_fwalk_reent+0x3a>
 8001b4e:	4629      	mov	r1, r5
 8001b50:	4630      	mov	r0, r6
 8001b52:	47c0      	blx	r8
 8001b54:	4307      	orrs	r7, r0
 8001b56:	3568      	adds	r5, #104	; 0x68
 8001b58:	e7e9      	b.n	8001b2e <_fwalk_reent+0x12>

08001b5a <__retarget_lock_init_recursive>:
 8001b5a:	4770      	bx	lr

08001b5c <__retarget_lock_acquire_recursive>:
 8001b5c:	4770      	bx	lr

08001b5e <__retarget_lock_release_recursive>:
 8001b5e:	4770      	bx	lr

08001b60 <_malloc_r>:
 8001b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b62:	1ccd      	adds	r5, r1, #3
 8001b64:	f025 0503 	bic.w	r5, r5, #3
 8001b68:	3508      	adds	r5, #8
 8001b6a:	2d0c      	cmp	r5, #12
 8001b6c:	bf38      	it	cc
 8001b6e:	250c      	movcc	r5, #12
 8001b70:	2d00      	cmp	r5, #0
 8001b72:	4606      	mov	r6, r0
 8001b74:	db01      	blt.n	8001b7a <_malloc_r+0x1a>
 8001b76:	42a9      	cmp	r1, r5
 8001b78:	d903      	bls.n	8001b82 <_malloc_r+0x22>
 8001b7a:	230c      	movs	r3, #12
 8001b7c:	6033      	str	r3, [r6, #0]
 8001b7e:	2000      	movs	r0, #0
 8001b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b82:	f000 ff27 	bl	80029d4 <__malloc_lock>
 8001b86:	4921      	ldr	r1, [pc, #132]	; (8001c0c <_malloc_r+0xac>)
 8001b88:	680a      	ldr	r2, [r1, #0]
 8001b8a:	4614      	mov	r4, r2
 8001b8c:	b99c      	cbnz	r4, 8001bb6 <_malloc_r+0x56>
 8001b8e:	4f20      	ldr	r7, [pc, #128]	; (8001c10 <_malloc_r+0xb0>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b923      	cbnz	r3, 8001b9e <_malloc_r+0x3e>
 8001b94:	4621      	mov	r1, r4
 8001b96:	4630      	mov	r0, r6
 8001b98:	f000 fc86 	bl	80024a8 <_sbrk_r>
 8001b9c:	6038      	str	r0, [r7, #0]
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	4630      	mov	r0, r6
 8001ba2:	f000 fc81 	bl	80024a8 <_sbrk_r>
 8001ba6:	1c43      	adds	r3, r0, #1
 8001ba8:	d123      	bne.n	8001bf2 <_malloc_r+0x92>
 8001baa:	230c      	movs	r3, #12
 8001bac:	6033      	str	r3, [r6, #0]
 8001bae:	4630      	mov	r0, r6
 8001bb0:	f000 ff16 	bl	80029e0 <__malloc_unlock>
 8001bb4:	e7e3      	b.n	8001b7e <_malloc_r+0x1e>
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	1b5b      	subs	r3, r3, r5
 8001bba:	d417      	bmi.n	8001bec <_malloc_r+0x8c>
 8001bbc:	2b0b      	cmp	r3, #11
 8001bbe:	d903      	bls.n	8001bc8 <_malloc_r+0x68>
 8001bc0:	6023      	str	r3, [r4, #0]
 8001bc2:	441c      	add	r4, r3
 8001bc4:	6025      	str	r5, [r4, #0]
 8001bc6:	e004      	b.n	8001bd2 <_malloc_r+0x72>
 8001bc8:	6863      	ldr	r3, [r4, #4]
 8001bca:	42a2      	cmp	r2, r4
 8001bcc:	bf0c      	ite	eq
 8001bce:	600b      	streq	r3, [r1, #0]
 8001bd0:	6053      	strne	r3, [r2, #4]
 8001bd2:	4630      	mov	r0, r6
 8001bd4:	f000 ff04 	bl	80029e0 <__malloc_unlock>
 8001bd8:	f104 000b 	add.w	r0, r4, #11
 8001bdc:	1d23      	adds	r3, r4, #4
 8001bde:	f020 0007 	bic.w	r0, r0, #7
 8001be2:	1ac2      	subs	r2, r0, r3
 8001be4:	d0cc      	beq.n	8001b80 <_malloc_r+0x20>
 8001be6:	1a1b      	subs	r3, r3, r0
 8001be8:	50a3      	str	r3, [r4, r2]
 8001bea:	e7c9      	b.n	8001b80 <_malloc_r+0x20>
 8001bec:	4622      	mov	r2, r4
 8001bee:	6864      	ldr	r4, [r4, #4]
 8001bf0:	e7cc      	b.n	8001b8c <_malloc_r+0x2c>
 8001bf2:	1cc4      	adds	r4, r0, #3
 8001bf4:	f024 0403 	bic.w	r4, r4, #3
 8001bf8:	42a0      	cmp	r0, r4
 8001bfa:	d0e3      	beq.n	8001bc4 <_malloc_r+0x64>
 8001bfc:	1a21      	subs	r1, r4, r0
 8001bfe:	4630      	mov	r0, r6
 8001c00:	f000 fc52 	bl	80024a8 <_sbrk_r>
 8001c04:	3001      	adds	r0, #1
 8001c06:	d1dd      	bne.n	8001bc4 <_malloc_r+0x64>
 8001c08:	e7cf      	b.n	8001baa <_malloc_r+0x4a>
 8001c0a:	bf00      	nop
 8001c0c:	20000088 	.word	0x20000088
 8001c10:	2000008c 	.word	0x2000008c

08001c14 <__ssputs_r>:
 8001c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c18:	688e      	ldr	r6, [r1, #8]
 8001c1a:	429e      	cmp	r6, r3
 8001c1c:	4682      	mov	sl, r0
 8001c1e:	460c      	mov	r4, r1
 8001c20:	4690      	mov	r8, r2
 8001c22:	461f      	mov	r7, r3
 8001c24:	d838      	bhi.n	8001c98 <__ssputs_r+0x84>
 8001c26:	898a      	ldrh	r2, [r1, #12]
 8001c28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001c2c:	d032      	beq.n	8001c94 <__ssputs_r+0x80>
 8001c2e:	6825      	ldr	r5, [r4, #0]
 8001c30:	6909      	ldr	r1, [r1, #16]
 8001c32:	eba5 0901 	sub.w	r9, r5, r1
 8001c36:	6965      	ldr	r5, [r4, #20]
 8001c38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001c40:	3301      	adds	r3, #1
 8001c42:	444b      	add	r3, r9
 8001c44:	106d      	asrs	r5, r5, #1
 8001c46:	429d      	cmp	r5, r3
 8001c48:	bf38      	it	cc
 8001c4a:	461d      	movcc	r5, r3
 8001c4c:	0553      	lsls	r3, r2, #21
 8001c4e:	d531      	bpl.n	8001cb4 <__ssputs_r+0xa0>
 8001c50:	4629      	mov	r1, r5
 8001c52:	f7ff ff85 	bl	8001b60 <_malloc_r>
 8001c56:	4606      	mov	r6, r0
 8001c58:	b950      	cbnz	r0, 8001c70 <__ssputs_r+0x5c>
 8001c5a:	230c      	movs	r3, #12
 8001c5c:	f8ca 3000 	str.w	r3, [sl]
 8001c60:	89a3      	ldrh	r3, [r4, #12]
 8001c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c66:	81a3      	strh	r3, [r4, #12]
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c70:	6921      	ldr	r1, [r4, #16]
 8001c72:	464a      	mov	r2, r9
 8001c74:	f000 fe86 	bl	8002984 <memcpy>
 8001c78:	89a3      	ldrh	r3, [r4, #12]
 8001c7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c82:	81a3      	strh	r3, [r4, #12]
 8001c84:	6126      	str	r6, [r4, #16]
 8001c86:	6165      	str	r5, [r4, #20]
 8001c88:	444e      	add	r6, r9
 8001c8a:	eba5 0509 	sub.w	r5, r5, r9
 8001c8e:	6026      	str	r6, [r4, #0]
 8001c90:	60a5      	str	r5, [r4, #8]
 8001c92:	463e      	mov	r6, r7
 8001c94:	42be      	cmp	r6, r7
 8001c96:	d900      	bls.n	8001c9a <__ssputs_r+0x86>
 8001c98:	463e      	mov	r6, r7
 8001c9a:	4632      	mov	r2, r6
 8001c9c:	6820      	ldr	r0, [r4, #0]
 8001c9e:	4641      	mov	r1, r8
 8001ca0:	f000 fe7e 	bl	80029a0 <memmove>
 8001ca4:	68a3      	ldr	r3, [r4, #8]
 8001ca6:	6822      	ldr	r2, [r4, #0]
 8001ca8:	1b9b      	subs	r3, r3, r6
 8001caa:	4432      	add	r2, r6
 8001cac:	60a3      	str	r3, [r4, #8]
 8001cae:	6022      	str	r2, [r4, #0]
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	e7db      	b.n	8001c6c <__ssputs_r+0x58>
 8001cb4:	462a      	mov	r2, r5
 8001cb6:	f000 fee9 	bl	8002a8c <_realloc_r>
 8001cba:	4606      	mov	r6, r0
 8001cbc:	2800      	cmp	r0, #0
 8001cbe:	d1e1      	bne.n	8001c84 <__ssputs_r+0x70>
 8001cc0:	6921      	ldr	r1, [r4, #16]
 8001cc2:	4650      	mov	r0, sl
 8001cc4:	f000 fe92 	bl	80029ec <_free_r>
 8001cc8:	e7c7      	b.n	8001c5a <__ssputs_r+0x46>
	...

08001ccc <_svfiprintf_r>:
 8001ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cd0:	4698      	mov	r8, r3
 8001cd2:	898b      	ldrh	r3, [r1, #12]
 8001cd4:	061b      	lsls	r3, r3, #24
 8001cd6:	b09d      	sub	sp, #116	; 0x74
 8001cd8:	4607      	mov	r7, r0
 8001cda:	460d      	mov	r5, r1
 8001cdc:	4614      	mov	r4, r2
 8001cde:	d50e      	bpl.n	8001cfe <_svfiprintf_r+0x32>
 8001ce0:	690b      	ldr	r3, [r1, #16]
 8001ce2:	b963      	cbnz	r3, 8001cfe <_svfiprintf_r+0x32>
 8001ce4:	2140      	movs	r1, #64	; 0x40
 8001ce6:	f7ff ff3b 	bl	8001b60 <_malloc_r>
 8001cea:	6028      	str	r0, [r5, #0]
 8001cec:	6128      	str	r0, [r5, #16]
 8001cee:	b920      	cbnz	r0, 8001cfa <_svfiprintf_r+0x2e>
 8001cf0:	230c      	movs	r3, #12
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	e0d1      	b.n	8001e9e <_svfiprintf_r+0x1d2>
 8001cfa:	2340      	movs	r3, #64	; 0x40
 8001cfc:	616b      	str	r3, [r5, #20]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9309      	str	r3, [sp, #36]	; 0x24
 8001d02:	2320      	movs	r3, #32
 8001d04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d08:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d0c:	2330      	movs	r3, #48	; 0x30
 8001d0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001eb8 <_svfiprintf_r+0x1ec>
 8001d12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d16:	f04f 0901 	mov.w	r9, #1
 8001d1a:	4623      	mov	r3, r4
 8001d1c:	469a      	mov	sl, r3
 8001d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d22:	b10a      	cbz	r2, 8001d28 <_svfiprintf_r+0x5c>
 8001d24:	2a25      	cmp	r2, #37	; 0x25
 8001d26:	d1f9      	bne.n	8001d1c <_svfiprintf_r+0x50>
 8001d28:	ebba 0b04 	subs.w	fp, sl, r4
 8001d2c:	d00b      	beq.n	8001d46 <_svfiprintf_r+0x7a>
 8001d2e:	465b      	mov	r3, fp
 8001d30:	4622      	mov	r2, r4
 8001d32:	4629      	mov	r1, r5
 8001d34:	4638      	mov	r0, r7
 8001d36:	f7ff ff6d 	bl	8001c14 <__ssputs_r>
 8001d3a:	3001      	adds	r0, #1
 8001d3c:	f000 80aa 	beq.w	8001e94 <_svfiprintf_r+0x1c8>
 8001d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d42:	445a      	add	r2, fp
 8001d44:	9209      	str	r2, [sp, #36]	; 0x24
 8001d46:	f89a 3000 	ldrb.w	r3, [sl]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80a2 	beq.w	8001e94 <_svfiprintf_r+0x1c8>
 8001d50:	2300      	movs	r3, #0
 8001d52:	f04f 32ff 	mov.w	r2, #4294967295
 8001d56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d5a:	f10a 0a01 	add.w	sl, sl, #1
 8001d5e:	9304      	str	r3, [sp, #16]
 8001d60:	9307      	str	r3, [sp, #28]
 8001d62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d66:	931a      	str	r3, [sp, #104]	; 0x68
 8001d68:	4654      	mov	r4, sl
 8001d6a:	2205      	movs	r2, #5
 8001d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d70:	4851      	ldr	r0, [pc, #324]	; (8001eb8 <_svfiprintf_r+0x1ec>)
 8001d72:	f7fe fa35 	bl	80001e0 <memchr>
 8001d76:	9a04      	ldr	r2, [sp, #16]
 8001d78:	b9d8      	cbnz	r0, 8001db2 <_svfiprintf_r+0xe6>
 8001d7a:	06d0      	lsls	r0, r2, #27
 8001d7c:	bf44      	itt	mi
 8001d7e:	2320      	movmi	r3, #32
 8001d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d84:	0711      	lsls	r1, r2, #28
 8001d86:	bf44      	itt	mi
 8001d88:	232b      	movmi	r3, #43	; 0x2b
 8001d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8001d92:	2b2a      	cmp	r3, #42	; 0x2a
 8001d94:	d015      	beq.n	8001dc2 <_svfiprintf_r+0xf6>
 8001d96:	9a07      	ldr	r2, [sp, #28]
 8001d98:	4654      	mov	r4, sl
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f04f 0c0a 	mov.w	ip, #10
 8001da0:	4621      	mov	r1, r4
 8001da2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001da6:	3b30      	subs	r3, #48	; 0x30
 8001da8:	2b09      	cmp	r3, #9
 8001daa:	d94e      	bls.n	8001e4a <_svfiprintf_r+0x17e>
 8001dac:	b1b0      	cbz	r0, 8001ddc <_svfiprintf_r+0x110>
 8001dae:	9207      	str	r2, [sp, #28]
 8001db0:	e014      	b.n	8001ddc <_svfiprintf_r+0x110>
 8001db2:	eba0 0308 	sub.w	r3, r0, r8
 8001db6:	fa09 f303 	lsl.w	r3, r9, r3
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	9304      	str	r3, [sp, #16]
 8001dbe:	46a2      	mov	sl, r4
 8001dc0:	e7d2      	b.n	8001d68 <_svfiprintf_r+0x9c>
 8001dc2:	9b03      	ldr	r3, [sp, #12]
 8001dc4:	1d19      	adds	r1, r3, #4
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	9103      	str	r1, [sp, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	bfbb      	ittet	lt
 8001dce:	425b      	neglt	r3, r3
 8001dd0:	f042 0202 	orrlt.w	r2, r2, #2
 8001dd4:	9307      	strge	r3, [sp, #28]
 8001dd6:	9307      	strlt	r3, [sp, #28]
 8001dd8:	bfb8      	it	lt
 8001dda:	9204      	strlt	r2, [sp, #16]
 8001ddc:	7823      	ldrb	r3, [r4, #0]
 8001dde:	2b2e      	cmp	r3, #46	; 0x2e
 8001de0:	d10c      	bne.n	8001dfc <_svfiprintf_r+0x130>
 8001de2:	7863      	ldrb	r3, [r4, #1]
 8001de4:	2b2a      	cmp	r3, #42	; 0x2a
 8001de6:	d135      	bne.n	8001e54 <_svfiprintf_r+0x188>
 8001de8:	9b03      	ldr	r3, [sp, #12]
 8001dea:	1d1a      	adds	r2, r3, #4
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	9203      	str	r2, [sp, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bfb8      	it	lt
 8001df4:	f04f 33ff 	movlt.w	r3, #4294967295
 8001df8:	3402      	adds	r4, #2
 8001dfa:	9305      	str	r3, [sp, #20]
 8001dfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001ec8 <_svfiprintf_r+0x1fc>
 8001e00:	7821      	ldrb	r1, [r4, #0]
 8001e02:	2203      	movs	r2, #3
 8001e04:	4650      	mov	r0, sl
 8001e06:	f7fe f9eb 	bl	80001e0 <memchr>
 8001e0a:	b140      	cbz	r0, 8001e1e <_svfiprintf_r+0x152>
 8001e0c:	2340      	movs	r3, #64	; 0x40
 8001e0e:	eba0 000a 	sub.w	r0, r0, sl
 8001e12:	fa03 f000 	lsl.w	r0, r3, r0
 8001e16:	9b04      	ldr	r3, [sp, #16]
 8001e18:	4303      	orrs	r3, r0
 8001e1a:	3401      	adds	r4, #1
 8001e1c:	9304      	str	r3, [sp, #16]
 8001e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e22:	4826      	ldr	r0, [pc, #152]	; (8001ebc <_svfiprintf_r+0x1f0>)
 8001e24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e28:	2206      	movs	r2, #6
 8001e2a:	f7fe f9d9 	bl	80001e0 <memchr>
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d038      	beq.n	8001ea4 <_svfiprintf_r+0x1d8>
 8001e32:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <_svfiprintf_r+0x1f4>)
 8001e34:	bb1b      	cbnz	r3, 8001e7e <_svfiprintf_r+0x1b2>
 8001e36:	9b03      	ldr	r3, [sp, #12]
 8001e38:	3307      	adds	r3, #7
 8001e3a:	f023 0307 	bic.w	r3, r3, #7
 8001e3e:	3308      	adds	r3, #8
 8001e40:	9303      	str	r3, [sp, #12]
 8001e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e44:	4433      	add	r3, r6
 8001e46:	9309      	str	r3, [sp, #36]	; 0x24
 8001e48:	e767      	b.n	8001d1a <_svfiprintf_r+0x4e>
 8001e4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e4e:	460c      	mov	r4, r1
 8001e50:	2001      	movs	r0, #1
 8001e52:	e7a5      	b.n	8001da0 <_svfiprintf_r+0xd4>
 8001e54:	2300      	movs	r3, #0
 8001e56:	3401      	adds	r4, #1
 8001e58:	9305      	str	r3, [sp, #20]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f04f 0c0a 	mov.w	ip, #10
 8001e60:	4620      	mov	r0, r4
 8001e62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e66:	3a30      	subs	r2, #48	; 0x30
 8001e68:	2a09      	cmp	r2, #9
 8001e6a:	d903      	bls.n	8001e74 <_svfiprintf_r+0x1a8>
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0c5      	beq.n	8001dfc <_svfiprintf_r+0x130>
 8001e70:	9105      	str	r1, [sp, #20]
 8001e72:	e7c3      	b.n	8001dfc <_svfiprintf_r+0x130>
 8001e74:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e78:	4604      	mov	r4, r0
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e7f0      	b.n	8001e60 <_svfiprintf_r+0x194>
 8001e7e:	ab03      	add	r3, sp, #12
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	462a      	mov	r2, r5
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <_svfiprintf_r+0x1f8>)
 8001e86:	a904      	add	r1, sp, #16
 8001e88:	4638      	mov	r0, r7
 8001e8a:	f3af 8000 	nop.w
 8001e8e:	1c42      	adds	r2, r0, #1
 8001e90:	4606      	mov	r6, r0
 8001e92:	d1d6      	bne.n	8001e42 <_svfiprintf_r+0x176>
 8001e94:	89ab      	ldrh	r3, [r5, #12]
 8001e96:	065b      	lsls	r3, r3, #25
 8001e98:	f53f af2c 	bmi.w	8001cf4 <_svfiprintf_r+0x28>
 8001e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e9e:	b01d      	add	sp, #116	; 0x74
 8001ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ea4:	ab03      	add	r3, sp, #12
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	462a      	mov	r2, r5
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <_svfiprintf_r+0x1f8>)
 8001eac:	a904      	add	r1, sp, #16
 8001eae:	4638      	mov	r0, r7
 8001eb0:	f000 f9d4 	bl	800225c <_printf_i>
 8001eb4:	e7eb      	b.n	8001e8e <_svfiprintf_r+0x1c2>
 8001eb6:	bf00      	nop
 8001eb8:	08002ea4 	.word	0x08002ea4
 8001ebc:	08002eae 	.word	0x08002eae
 8001ec0:	00000000 	.word	0x00000000
 8001ec4:	08001c15 	.word	0x08001c15
 8001ec8:	08002eaa 	.word	0x08002eaa

08001ecc <__sfputc_r>:
 8001ecc:	6893      	ldr	r3, [r2, #8]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	b410      	push	{r4}
 8001ed4:	6093      	str	r3, [r2, #8]
 8001ed6:	da08      	bge.n	8001eea <__sfputc_r+0x1e>
 8001ed8:	6994      	ldr	r4, [r2, #24]
 8001eda:	42a3      	cmp	r3, r4
 8001edc:	db01      	blt.n	8001ee2 <__sfputc_r+0x16>
 8001ede:	290a      	cmp	r1, #10
 8001ee0:	d103      	bne.n	8001eea <__sfputc_r+0x1e>
 8001ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ee6:	f000 bb33 	b.w	8002550 <__swbuf_r>
 8001eea:	6813      	ldr	r3, [r2, #0]
 8001eec:	1c58      	adds	r0, r3, #1
 8001eee:	6010      	str	r0, [r2, #0]
 8001ef0:	7019      	strb	r1, [r3, #0]
 8001ef2:	4608      	mov	r0, r1
 8001ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <__sfputs_r>:
 8001efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efc:	4606      	mov	r6, r0
 8001efe:	460f      	mov	r7, r1
 8001f00:	4614      	mov	r4, r2
 8001f02:	18d5      	adds	r5, r2, r3
 8001f04:	42ac      	cmp	r4, r5
 8001f06:	d101      	bne.n	8001f0c <__sfputs_r+0x12>
 8001f08:	2000      	movs	r0, #0
 8001f0a:	e007      	b.n	8001f1c <__sfputs_r+0x22>
 8001f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f10:	463a      	mov	r2, r7
 8001f12:	4630      	mov	r0, r6
 8001f14:	f7ff ffda 	bl	8001ecc <__sfputc_r>
 8001f18:	1c43      	adds	r3, r0, #1
 8001f1a:	d1f3      	bne.n	8001f04 <__sfputs_r+0xa>
 8001f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001f20 <_vfiprintf_r>:
 8001f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f24:	460d      	mov	r5, r1
 8001f26:	b09d      	sub	sp, #116	; 0x74
 8001f28:	4614      	mov	r4, r2
 8001f2a:	4698      	mov	r8, r3
 8001f2c:	4606      	mov	r6, r0
 8001f2e:	b118      	cbz	r0, 8001f38 <_vfiprintf_r+0x18>
 8001f30:	6983      	ldr	r3, [r0, #24]
 8001f32:	b90b      	cbnz	r3, 8001f38 <_vfiprintf_r+0x18>
 8001f34:	f7ff fd74 	bl	8001a20 <__sinit>
 8001f38:	4b89      	ldr	r3, [pc, #548]	; (8002160 <_vfiprintf_r+0x240>)
 8001f3a:	429d      	cmp	r5, r3
 8001f3c:	d11b      	bne.n	8001f76 <_vfiprintf_r+0x56>
 8001f3e:	6875      	ldr	r5, [r6, #4]
 8001f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f42:	07d9      	lsls	r1, r3, #31
 8001f44:	d405      	bmi.n	8001f52 <_vfiprintf_r+0x32>
 8001f46:	89ab      	ldrh	r3, [r5, #12]
 8001f48:	059a      	lsls	r2, r3, #22
 8001f4a:	d402      	bmi.n	8001f52 <_vfiprintf_r+0x32>
 8001f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f4e:	f7ff fe05 	bl	8001b5c <__retarget_lock_acquire_recursive>
 8001f52:	89ab      	ldrh	r3, [r5, #12]
 8001f54:	071b      	lsls	r3, r3, #28
 8001f56:	d501      	bpl.n	8001f5c <_vfiprintf_r+0x3c>
 8001f58:	692b      	ldr	r3, [r5, #16]
 8001f5a:	b9eb      	cbnz	r3, 8001f98 <_vfiprintf_r+0x78>
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	4630      	mov	r0, r6
 8001f60:	f000 fb5a 	bl	8002618 <__swsetup_r>
 8001f64:	b1c0      	cbz	r0, 8001f98 <_vfiprintf_r+0x78>
 8001f66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f68:	07dc      	lsls	r4, r3, #31
 8001f6a:	d50e      	bpl.n	8001f8a <_vfiprintf_r+0x6a>
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	b01d      	add	sp, #116	; 0x74
 8001f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f76:	4b7b      	ldr	r3, [pc, #492]	; (8002164 <_vfiprintf_r+0x244>)
 8001f78:	429d      	cmp	r5, r3
 8001f7a:	d101      	bne.n	8001f80 <_vfiprintf_r+0x60>
 8001f7c:	68b5      	ldr	r5, [r6, #8]
 8001f7e:	e7df      	b.n	8001f40 <_vfiprintf_r+0x20>
 8001f80:	4b79      	ldr	r3, [pc, #484]	; (8002168 <_vfiprintf_r+0x248>)
 8001f82:	429d      	cmp	r5, r3
 8001f84:	bf08      	it	eq
 8001f86:	68f5      	ldreq	r5, [r6, #12]
 8001f88:	e7da      	b.n	8001f40 <_vfiprintf_r+0x20>
 8001f8a:	89ab      	ldrh	r3, [r5, #12]
 8001f8c:	0598      	lsls	r0, r3, #22
 8001f8e:	d4ed      	bmi.n	8001f6c <_vfiprintf_r+0x4c>
 8001f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f92:	f7ff fde4 	bl	8001b5e <__retarget_lock_release_recursive>
 8001f96:	e7e9      	b.n	8001f6c <_vfiprintf_r+0x4c>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8001f9c:	2320      	movs	r3, #32
 8001f9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001fa6:	2330      	movs	r3, #48	; 0x30
 8001fa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800216c <_vfiprintf_r+0x24c>
 8001fac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001fb0:	f04f 0901 	mov.w	r9, #1
 8001fb4:	4623      	mov	r3, r4
 8001fb6:	469a      	mov	sl, r3
 8001fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001fbc:	b10a      	cbz	r2, 8001fc2 <_vfiprintf_r+0xa2>
 8001fbe:	2a25      	cmp	r2, #37	; 0x25
 8001fc0:	d1f9      	bne.n	8001fb6 <_vfiprintf_r+0x96>
 8001fc2:	ebba 0b04 	subs.w	fp, sl, r4
 8001fc6:	d00b      	beq.n	8001fe0 <_vfiprintf_r+0xc0>
 8001fc8:	465b      	mov	r3, fp
 8001fca:	4622      	mov	r2, r4
 8001fcc:	4629      	mov	r1, r5
 8001fce:	4630      	mov	r0, r6
 8001fd0:	f7ff ff93 	bl	8001efa <__sfputs_r>
 8001fd4:	3001      	adds	r0, #1
 8001fd6:	f000 80aa 	beq.w	800212e <_vfiprintf_r+0x20e>
 8001fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001fdc:	445a      	add	r2, fp
 8001fde:	9209      	str	r2, [sp, #36]	; 0x24
 8001fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80a2 	beq.w	800212e <_vfiprintf_r+0x20e>
 8001fea:	2300      	movs	r3, #0
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ff4:	f10a 0a01 	add.w	sl, sl, #1
 8001ff8:	9304      	str	r3, [sp, #16]
 8001ffa:	9307      	str	r3, [sp, #28]
 8001ffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002000:	931a      	str	r3, [sp, #104]	; 0x68
 8002002:	4654      	mov	r4, sl
 8002004:	2205      	movs	r2, #5
 8002006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800200a:	4858      	ldr	r0, [pc, #352]	; (800216c <_vfiprintf_r+0x24c>)
 800200c:	f7fe f8e8 	bl	80001e0 <memchr>
 8002010:	9a04      	ldr	r2, [sp, #16]
 8002012:	b9d8      	cbnz	r0, 800204c <_vfiprintf_r+0x12c>
 8002014:	06d1      	lsls	r1, r2, #27
 8002016:	bf44      	itt	mi
 8002018:	2320      	movmi	r3, #32
 800201a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800201e:	0713      	lsls	r3, r2, #28
 8002020:	bf44      	itt	mi
 8002022:	232b      	movmi	r3, #43	; 0x2b
 8002024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002028:	f89a 3000 	ldrb.w	r3, [sl]
 800202c:	2b2a      	cmp	r3, #42	; 0x2a
 800202e:	d015      	beq.n	800205c <_vfiprintf_r+0x13c>
 8002030:	9a07      	ldr	r2, [sp, #28]
 8002032:	4654      	mov	r4, sl
 8002034:	2000      	movs	r0, #0
 8002036:	f04f 0c0a 	mov.w	ip, #10
 800203a:	4621      	mov	r1, r4
 800203c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002040:	3b30      	subs	r3, #48	; 0x30
 8002042:	2b09      	cmp	r3, #9
 8002044:	d94e      	bls.n	80020e4 <_vfiprintf_r+0x1c4>
 8002046:	b1b0      	cbz	r0, 8002076 <_vfiprintf_r+0x156>
 8002048:	9207      	str	r2, [sp, #28]
 800204a:	e014      	b.n	8002076 <_vfiprintf_r+0x156>
 800204c:	eba0 0308 	sub.w	r3, r0, r8
 8002050:	fa09 f303 	lsl.w	r3, r9, r3
 8002054:	4313      	orrs	r3, r2
 8002056:	9304      	str	r3, [sp, #16]
 8002058:	46a2      	mov	sl, r4
 800205a:	e7d2      	b.n	8002002 <_vfiprintf_r+0xe2>
 800205c:	9b03      	ldr	r3, [sp, #12]
 800205e:	1d19      	adds	r1, r3, #4
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	9103      	str	r1, [sp, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	bfbb      	ittet	lt
 8002068:	425b      	neglt	r3, r3
 800206a:	f042 0202 	orrlt.w	r2, r2, #2
 800206e:	9307      	strge	r3, [sp, #28]
 8002070:	9307      	strlt	r3, [sp, #28]
 8002072:	bfb8      	it	lt
 8002074:	9204      	strlt	r2, [sp, #16]
 8002076:	7823      	ldrb	r3, [r4, #0]
 8002078:	2b2e      	cmp	r3, #46	; 0x2e
 800207a:	d10c      	bne.n	8002096 <_vfiprintf_r+0x176>
 800207c:	7863      	ldrb	r3, [r4, #1]
 800207e:	2b2a      	cmp	r3, #42	; 0x2a
 8002080:	d135      	bne.n	80020ee <_vfiprintf_r+0x1ce>
 8002082:	9b03      	ldr	r3, [sp, #12]
 8002084:	1d1a      	adds	r2, r3, #4
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	9203      	str	r2, [sp, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	bfb8      	it	lt
 800208e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002092:	3402      	adds	r4, #2
 8002094:	9305      	str	r3, [sp, #20]
 8002096:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800217c <_vfiprintf_r+0x25c>
 800209a:	7821      	ldrb	r1, [r4, #0]
 800209c:	2203      	movs	r2, #3
 800209e:	4650      	mov	r0, sl
 80020a0:	f7fe f89e 	bl	80001e0 <memchr>
 80020a4:	b140      	cbz	r0, 80020b8 <_vfiprintf_r+0x198>
 80020a6:	2340      	movs	r3, #64	; 0x40
 80020a8:	eba0 000a 	sub.w	r0, r0, sl
 80020ac:	fa03 f000 	lsl.w	r0, r3, r0
 80020b0:	9b04      	ldr	r3, [sp, #16]
 80020b2:	4303      	orrs	r3, r0
 80020b4:	3401      	adds	r4, #1
 80020b6:	9304      	str	r3, [sp, #16]
 80020b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020bc:	482c      	ldr	r0, [pc, #176]	; (8002170 <_vfiprintf_r+0x250>)
 80020be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80020c2:	2206      	movs	r2, #6
 80020c4:	f7fe f88c 	bl	80001e0 <memchr>
 80020c8:	2800      	cmp	r0, #0
 80020ca:	d03f      	beq.n	800214c <_vfiprintf_r+0x22c>
 80020cc:	4b29      	ldr	r3, [pc, #164]	; (8002174 <_vfiprintf_r+0x254>)
 80020ce:	bb1b      	cbnz	r3, 8002118 <_vfiprintf_r+0x1f8>
 80020d0:	9b03      	ldr	r3, [sp, #12]
 80020d2:	3307      	adds	r3, #7
 80020d4:	f023 0307 	bic.w	r3, r3, #7
 80020d8:	3308      	adds	r3, #8
 80020da:	9303      	str	r3, [sp, #12]
 80020dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020de:	443b      	add	r3, r7
 80020e0:	9309      	str	r3, [sp, #36]	; 0x24
 80020e2:	e767      	b.n	8001fb4 <_vfiprintf_r+0x94>
 80020e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80020e8:	460c      	mov	r4, r1
 80020ea:	2001      	movs	r0, #1
 80020ec:	e7a5      	b.n	800203a <_vfiprintf_r+0x11a>
 80020ee:	2300      	movs	r3, #0
 80020f0:	3401      	adds	r4, #1
 80020f2:	9305      	str	r3, [sp, #20]
 80020f4:	4619      	mov	r1, r3
 80020f6:	f04f 0c0a 	mov.w	ip, #10
 80020fa:	4620      	mov	r0, r4
 80020fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002100:	3a30      	subs	r2, #48	; 0x30
 8002102:	2a09      	cmp	r2, #9
 8002104:	d903      	bls.n	800210e <_vfiprintf_r+0x1ee>
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0c5      	beq.n	8002096 <_vfiprintf_r+0x176>
 800210a:	9105      	str	r1, [sp, #20]
 800210c:	e7c3      	b.n	8002096 <_vfiprintf_r+0x176>
 800210e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002112:	4604      	mov	r4, r0
 8002114:	2301      	movs	r3, #1
 8002116:	e7f0      	b.n	80020fa <_vfiprintf_r+0x1da>
 8002118:	ab03      	add	r3, sp, #12
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	462a      	mov	r2, r5
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <_vfiprintf_r+0x258>)
 8002120:	a904      	add	r1, sp, #16
 8002122:	4630      	mov	r0, r6
 8002124:	f3af 8000 	nop.w
 8002128:	4607      	mov	r7, r0
 800212a:	1c78      	adds	r0, r7, #1
 800212c:	d1d6      	bne.n	80020dc <_vfiprintf_r+0x1bc>
 800212e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002130:	07d9      	lsls	r1, r3, #31
 8002132:	d405      	bmi.n	8002140 <_vfiprintf_r+0x220>
 8002134:	89ab      	ldrh	r3, [r5, #12]
 8002136:	059a      	lsls	r2, r3, #22
 8002138:	d402      	bmi.n	8002140 <_vfiprintf_r+0x220>
 800213a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800213c:	f7ff fd0f 	bl	8001b5e <__retarget_lock_release_recursive>
 8002140:	89ab      	ldrh	r3, [r5, #12]
 8002142:	065b      	lsls	r3, r3, #25
 8002144:	f53f af12 	bmi.w	8001f6c <_vfiprintf_r+0x4c>
 8002148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800214a:	e711      	b.n	8001f70 <_vfiprintf_r+0x50>
 800214c:	ab03      	add	r3, sp, #12
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	462a      	mov	r2, r5
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <_vfiprintf_r+0x258>)
 8002154:	a904      	add	r1, sp, #16
 8002156:	4630      	mov	r0, r6
 8002158:	f000 f880 	bl	800225c <_printf_i>
 800215c:	e7e4      	b.n	8002128 <_vfiprintf_r+0x208>
 800215e:	bf00      	nop
 8002160:	08002e64 	.word	0x08002e64
 8002164:	08002e84 	.word	0x08002e84
 8002168:	08002e44 	.word	0x08002e44
 800216c:	08002ea4 	.word	0x08002ea4
 8002170:	08002eae 	.word	0x08002eae
 8002174:	00000000 	.word	0x00000000
 8002178:	08001efb 	.word	0x08001efb
 800217c:	08002eaa 	.word	0x08002eaa

08002180 <_printf_common>:
 8002180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002184:	4616      	mov	r6, r2
 8002186:	4699      	mov	r9, r3
 8002188:	688a      	ldr	r2, [r1, #8]
 800218a:	690b      	ldr	r3, [r1, #16]
 800218c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002190:	4293      	cmp	r3, r2
 8002192:	bfb8      	it	lt
 8002194:	4613      	movlt	r3, r2
 8002196:	6033      	str	r3, [r6, #0]
 8002198:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800219c:	4607      	mov	r7, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	b10a      	cbz	r2, 80021a6 <_printf_common+0x26>
 80021a2:	3301      	adds	r3, #1
 80021a4:	6033      	str	r3, [r6, #0]
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	0699      	lsls	r1, r3, #26
 80021aa:	bf42      	ittt	mi
 80021ac:	6833      	ldrmi	r3, [r6, #0]
 80021ae:	3302      	addmi	r3, #2
 80021b0:	6033      	strmi	r3, [r6, #0]
 80021b2:	6825      	ldr	r5, [r4, #0]
 80021b4:	f015 0506 	ands.w	r5, r5, #6
 80021b8:	d106      	bne.n	80021c8 <_printf_common+0x48>
 80021ba:	f104 0a19 	add.w	sl, r4, #25
 80021be:	68e3      	ldr	r3, [r4, #12]
 80021c0:	6832      	ldr	r2, [r6, #0]
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	42ab      	cmp	r3, r5
 80021c6:	dc26      	bgt.n	8002216 <_printf_common+0x96>
 80021c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80021cc:	1e13      	subs	r3, r2, #0
 80021ce:	6822      	ldr	r2, [r4, #0]
 80021d0:	bf18      	it	ne
 80021d2:	2301      	movne	r3, #1
 80021d4:	0692      	lsls	r2, r2, #26
 80021d6:	d42b      	bmi.n	8002230 <_printf_common+0xb0>
 80021d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021dc:	4649      	mov	r1, r9
 80021de:	4638      	mov	r0, r7
 80021e0:	47c0      	blx	r8
 80021e2:	3001      	adds	r0, #1
 80021e4:	d01e      	beq.n	8002224 <_printf_common+0xa4>
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	68e5      	ldr	r5, [r4, #12]
 80021ea:	6832      	ldr	r2, [r6, #0]
 80021ec:	f003 0306 	and.w	r3, r3, #6
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	bf08      	it	eq
 80021f4:	1aad      	subeq	r5, r5, r2
 80021f6:	68a3      	ldr	r3, [r4, #8]
 80021f8:	6922      	ldr	r2, [r4, #16]
 80021fa:	bf0c      	ite	eq
 80021fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002200:	2500      	movne	r5, #0
 8002202:	4293      	cmp	r3, r2
 8002204:	bfc4      	itt	gt
 8002206:	1a9b      	subgt	r3, r3, r2
 8002208:	18ed      	addgt	r5, r5, r3
 800220a:	2600      	movs	r6, #0
 800220c:	341a      	adds	r4, #26
 800220e:	42b5      	cmp	r5, r6
 8002210:	d11a      	bne.n	8002248 <_printf_common+0xc8>
 8002212:	2000      	movs	r0, #0
 8002214:	e008      	b.n	8002228 <_printf_common+0xa8>
 8002216:	2301      	movs	r3, #1
 8002218:	4652      	mov	r2, sl
 800221a:	4649      	mov	r1, r9
 800221c:	4638      	mov	r0, r7
 800221e:	47c0      	blx	r8
 8002220:	3001      	adds	r0, #1
 8002222:	d103      	bne.n	800222c <_printf_common+0xac>
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800222c:	3501      	adds	r5, #1
 800222e:	e7c6      	b.n	80021be <_printf_common+0x3e>
 8002230:	18e1      	adds	r1, r4, r3
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	2030      	movs	r0, #48	; 0x30
 8002236:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800223a:	4422      	add	r2, r4
 800223c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002240:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002244:	3302      	adds	r3, #2
 8002246:	e7c7      	b.n	80021d8 <_printf_common+0x58>
 8002248:	2301      	movs	r3, #1
 800224a:	4622      	mov	r2, r4
 800224c:	4649      	mov	r1, r9
 800224e:	4638      	mov	r0, r7
 8002250:	47c0      	blx	r8
 8002252:	3001      	adds	r0, #1
 8002254:	d0e6      	beq.n	8002224 <_printf_common+0xa4>
 8002256:	3601      	adds	r6, #1
 8002258:	e7d9      	b.n	800220e <_printf_common+0x8e>
	...

0800225c <_printf_i>:
 800225c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002260:	460c      	mov	r4, r1
 8002262:	4691      	mov	r9, r2
 8002264:	7e27      	ldrb	r7, [r4, #24]
 8002266:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002268:	2f78      	cmp	r7, #120	; 0x78
 800226a:	4680      	mov	r8, r0
 800226c:	469a      	mov	sl, r3
 800226e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002272:	d807      	bhi.n	8002284 <_printf_i+0x28>
 8002274:	2f62      	cmp	r7, #98	; 0x62
 8002276:	d80a      	bhi.n	800228e <_printf_i+0x32>
 8002278:	2f00      	cmp	r7, #0
 800227a:	f000 80d8 	beq.w	800242e <_printf_i+0x1d2>
 800227e:	2f58      	cmp	r7, #88	; 0x58
 8002280:	f000 80a3 	beq.w	80023ca <_printf_i+0x16e>
 8002284:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800228c:	e03a      	b.n	8002304 <_printf_i+0xa8>
 800228e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002292:	2b15      	cmp	r3, #21
 8002294:	d8f6      	bhi.n	8002284 <_printf_i+0x28>
 8002296:	a001      	add	r0, pc, #4	; (adr r0, 800229c <_printf_i+0x40>)
 8002298:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800229c:	080022f5 	.word	0x080022f5
 80022a0:	08002309 	.word	0x08002309
 80022a4:	08002285 	.word	0x08002285
 80022a8:	08002285 	.word	0x08002285
 80022ac:	08002285 	.word	0x08002285
 80022b0:	08002285 	.word	0x08002285
 80022b4:	08002309 	.word	0x08002309
 80022b8:	08002285 	.word	0x08002285
 80022bc:	08002285 	.word	0x08002285
 80022c0:	08002285 	.word	0x08002285
 80022c4:	08002285 	.word	0x08002285
 80022c8:	08002415 	.word	0x08002415
 80022cc:	08002339 	.word	0x08002339
 80022d0:	080023f7 	.word	0x080023f7
 80022d4:	08002285 	.word	0x08002285
 80022d8:	08002285 	.word	0x08002285
 80022dc:	08002437 	.word	0x08002437
 80022e0:	08002285 	.word	0x08002285
 80022e4:	08002339 	.word	0x08002339
 80022e8:	08002285 	.word	0x08002285
 80022ec:	08002285 	.word	0x08002285
 80022f0:	080023ff 	.word	0x080023ff
 80022f4:	680b      	ldr	r3, [r1, #0]
 80022f6:	1d1a      	adds	r2, r3, #4
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	600a      	str	r2, [r1, #0]
 80022fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002304:	2301      	movs	r3, #1
 8002306:	e0a3      	b.n	8002450 <_printf_i+0x1f4>
 8002308:	6825      	ldr	r5, [r4, #0]
 800230a:	6808      	ldr	r0, [r1, #0]
 800230c:	062e      	lsls	r6, r5, #24
 800230e:	f100 0304 	add.w	r3, r0, #4
 8002312:	d50a      	bpl.n	800232a <_printf_i+0xce>
 8002314:	6805      	ldr	r5, [r0, #0]
 8002316:	600b      	str	r3, [r1, #0]
 8002318:	2d00      	cmp	r5, #0
 800231a:	da03      	bge.n	8002324 <_printf_i+0xc8>
 800231c:	232d      	movs	r3, #45	; 0x2d
 800231e:	426d      	negs	r5, r5
 8002320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002324:	485e      	ldr	r0, [pc, #376]	; (80024a0 <_printf_i+0x244>)
 8002326:	230a      	movs	r3, #10
 8002328:	e019      	b.n	800235e <_printf_i+0x102>
 800232a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800232e:	6805      	ldr	r5, [r0, #0]
 8002330:	600b      	str	r3, [r1, #0]
 8002332:	bf18      	it	ne
 8002334:	b22d      	sxthne	r5, r5
 8002336:	e7ef      	b.n	8002318 <_printf_i+0xbc>
 8002338:	680b      	ldr	r3, [r1, #0]
 800233a:	6825      	ldr	r5, [r4, #0]
 800233c:	1d18      	adds	r0, r3, #4
 800233e:	6008      	str	r0, [r1, #0]
 8002340:	0628      	lsls	r0, r5, #24
 8002342:	d501      	bpl.n	8002348 <_printf_i+0xec>
 8002344:	681d      	ldr	r5, [r3, #0]
 8002346:	e002      	b.n	800234e <_printf_i+0xf2>
 8002348:	0669      	lsls	r1, r5, #25
 800234a:	d5fb      	bpl.n	8002344 <_printf_i+0xe8>
 800234c:	881d      	ldrh	r5, [r3, #0]
 800234e:	4854      	ldr	r0, [pc, #336]	; (80024a0 <_printf_i+0x244>)
 8002350:	2f6f      	cmp	r7, #111	; 0x6f
 8002352:	bf0c      	ite	eq
 8002354:	2308      	moveq	r3, #8
 8002356:	230a      	movne	r3, #10
 8002358:	2100      	movs	r1, #0
 800235a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800235e:	6866      	ldr	r6, [r4, #4]
 8002360:	60a6      	str	r6, [r4, #8]
 8002362:	2e00      	cmp	r6, #0
 8002364:	bfa2      	ittt	ge
 8002366:	6821      	ldrge	r1, [r4, #0]
 8002368:	f021 0104 	bicge.w	r1, r1, #4
 800236c:	6021      	strge	r1, [r4, #0]
 800236e:	b90d      	cbnz	r5, 8002374 <_printf_i+0x118>
 8002370:	2e00      	cmp	r6, #0
 8002372:	d04d      	beq.n	8002410 <_printf_i+0x1b4>
 8002374:	4616      	mov	r6, r2
 8002376:	fbb5 f1f3 	udiv	r1, r5, r3
 800237a:	fb03 5711 	mls	r7, r3, r1, r5
 800237e:	5dc7      	ldrb	r7, [r0, r7]
 8002380:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002384:	462f      	mov	r7, r5
 8002386:	42bb      	cmp	r3, r7
 8002388:	460d      	mov	r5, r1
 800238a:	d9f4      	bls.n	8002376 <_printf_i+0x11a>
 800238c:	2b08      	cmp	r3, #8
 800238e:	d10b      	bne.n	80023a8 <_printf_i+0x14c>
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	07df      	lsls	r7, r3, #31
 8002394:	d508      	bpl.n	80023a8 <_printf_i+0x14c>
 8002396:	6923      	ldr	r3, [r4, #16]
 8002398:	6861      	ldr	r1, [r4, #4]
 800239a:	4299      	cmp	r1, r3
 800239c:	bfde      	ittt	le
 800239e:	2330      	movle	r3, #48	; 0x30
 80023a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80023a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80023a8:	1b92      	subs	r2, r2, r6
 80023aa:	6122      	str	r2, [r4, #16]
 80023ac:	f8cd a000 	str.w	sl, [sp]
 80023b0:	464b      	mov	r3, r9
 80023b2:	aa03      	add	r2, sp, #12
 80023b4:	4621      	mov	r1, r4
 80023b6:	4640      	mov	r0, r8
 80023b8:	f7ff fee2 	bl	8002180 <_printf_common>
 80023bc:	3001      	adds	r0, #1
 80023be:	d14c      	bne.n	800245a <_printf_i+0x1fe>
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295
 80023c4:	b004      	add	sp, #16
 80023c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023ca:	4835      	ldr	r0, [pc, #212]	; (80024a0 <_printf_i+0x244>)
 80023cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	680e      	ldr	r6, [r1, #0]
 80023d4:	061f      	lsls	r7, r3, #24
 80023d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80023da:	600e      	str	r6, [r1, #0]
 80023dc:	d514      	bpl.n	8002408 <_printf_i+0x1ac>
 80023de:	07d9      	lsls	r1, r3, #31
 80023e0:	bf44      	itt	mi
 80023e2:	f043 0320 	orrmi.w	r3, r3, #32
 80023e6:	6023      	strmi	r3, [r4, #0]
 80023e8:	b91d      	cbnz	r5, 80023f2 <_printf_i+0x196>
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	f023 0320 	bic.w	r3, r3, #32
 80023f0:	6023      	str	r3, [r4, #0]
 80023f2:	2310      	movs	r3, #16
 80023f4:	e7b0      	b.n	8002358 <_printf_i+0xfc>
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	f043 0320 	orr.w	r3, r3, #32
 80023fc:	6023      	str	r3, [r4, #0]
 80023fe:	2378      	movs	r3, #120	; 0x78
 8002400:	4828      	ldr	r0, [pc, #160]	; (80024a4 <_printf_i+0x248>)
 8002402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002406:	e7e3      	b.n	80023d0 <_printf_i+0x174>
 8002408:	065e      	lsls	r6, r3, #25
 800240a:	bf48      	it	mi
 800240c:	b2ad      	uxthmi	r5, r5
 800240e:	e7e6      	b.n	80023de <_printf_i+0x182>
 8002410:	4616      	mov	r6, r2
 8002412:	e7bb      	b.n	800238c <_printf_i+0x130>
 8002414:	680b      	ldr	r3, [r1, #0]
 8002416:	6826      	ldr	r6, [r4, #0]
 8002418:	6960      	ldr	r0, [r4, #20]
 800241a:	1d1d      	adds	r5, r3, #4
 800241c:	600d      	str	r5, [r1, #0]
 800241e:	0635      	lsls	r5, r6, #24
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	d501      	bpl.n	8002428 <_printf_i+0x1cc>
 8002424:	6018      	str	r0, [r3, #0]
 8002426:	e002      	b.n	800242e <_printf_i+0x1d2>
 8002428:	0671      	lsls	r1, r6, #25
 800242a:	d5fb      	bpl.n	8002424 <_printf_i+0x1c8>
 800242c:	8018      	strh	r0, [r3, #0]
 800242e:	2300      	movs	r3, #0
 8002430:	6123      	str	r3, [r4, #16]
 8002432:	4616      	mov	r6, r2
 8002434:	e7ba      	b.n	80023ac <_printf_i+0x150>
 8002436:	680b      	ldr	r3, [r1, #0]
 8002438:	1d1a      	adds	r2, r3, #4
 800243a:	600a      	str	r2, [r1, #0]
 800243c:	681e      	ldr	r6, [r3, #0]
 800243e:	6862      	ldr	r2, [r4, #4]
 8002440:	2100      	movs	r1, #0
 8002442:	4630      	mov	r0, r6
 8002444:	f7fd fecc 	bl	80001e0 <memchr>
 8002448:	b108      	cbz	r0, 800244e <_printf_i+0x1f2>
 800244a:	1b80      	subs	r0, r0, r6
 800244c:	6060      	str	r0, [r4, #4]
 800244e:	6863      	ldr	r3, [r4, #4]
 8002450:	6123      	str	r3, [r4, #16]
 8002452:	2300      	movs	r3, #0
 8002454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002458:	e7a8      	b.n	80023ac <_printf_i+0x150>
 800245a:	6923      	ldr	r3, [r4, #16]
 800245c:	4632      	mov	r2, r6
 800245e:	4649      	mov	r1, r9
 8002460:	4640      	mov	r0, r8
 8002462:	47d0      	blx	sl
 8002464:	3001      	adds	r0, #1
 8002466:	d0ab      	beq.n	80023c0 <_printf_i+0x164>
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	079b      	lsls	r3, r3, #30
 800246c:	d413      	bmi.n	8002496 <_printf_i+0x23a>
 800246e:	68e0      	ldr	r0, [r4, #12]
 8002470:	9b03      	ldr	r3, [sp, #12]
 8002472:	4298      	cmp	r0, r3
 8002474:	bfb8      	it	lt
 8002476:	4618      	movlt	r0, r3
 8002478:	e7a4      	b.n	80023c4 <_printf_i+0x168>
 800247a:	2301      	movs	r3, #1
 800247c:	4632      	mov	r2, r6
 800247e:	4649      	mov	r1, r9
 8002480:	4640      	mov	r0, r8
 8002482:	47d0      	blx	sl
 8002484:	3001      	adds	r0, #1
 8002486:	d09b      	beq.n	80023c0 <_printf_i+0x164>
 8002488:	3501      	adds	r5, #1
 800248a:	68e3      	ldr	r3, [r4, #12]
 800248c:	9903      	ldr	r1, [sp, #12]
 800248e:	1a5b      	subs	r3, r3, r1
 8002490:	42ab      	cmp	r3, r5
 8002492:	dcf2      	bgt.n	800247a <_printf_i+0x21e>
 8002494:	e7eb      	b.n	800246e <_printf_i+0x212>
 8002496:	2500      	movs	r5, #0
 8002498:	f104 0619 	add.w	r6, r4, #25
 800249c:	e7f5      	b.n	800248a <_printf_i+0x22e>
 800249e:	bf00      	nop
 80024a0:	08002eb5 	.word	0x08002eb5
 80024a4:	08002ec6 	.word	0x08002ec6

080024a8 <_sbrk_r>:
 80024a8:	b538      	push	{r3, r4, r5, lr}
 80024aa:	4d06      	ldr	r5, [pc, #24]	; (80024c4 <_sbrk_r+0x1c>)
 80024ac:	2300      	movs	r3, #0
 80024ae:	4604      	mov	r4, r0
 80024b0:	4608      	mov	r0, r1
 80024b2:	602b      	str	r3, [r5, #0]
 80024b4:	f7ff f928 	bl	8001708 <_sbrk>
 80024b8:	1c43      	adds	r3, r0, #1
 80024ba:	d102      	bne.n	80024c2 <_sbrk_r+0x1a>
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	b103      	cbz	r3, 80024c2 <_sbrk_r+0x1a>
 80024c0:	6023      	str	r3, [r4, #0]
 80024c2:	bd38      	pop	{r3, r4, r5, pc}
 80024c4:	2000017c 	.word	0x2000017c

080024c8 <__sread>:
 80024c8:	b510      	push	{r4, lr}
 80024ca:	460c      	mov	r4, r1
 80024cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024d0:	f000 fb02 	bl	8002ad8 <_read_r>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	bfab      	itete	ge
 80024d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80024da:	89a3      	ldrhlt	r3, [r4, #12]
 80024dc:	181b      	addge	r3, r3, r0
 80024de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80024e2:	bfac      	ite	ge
 80024e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80024e6:	81a3      	strhlt	r3, [r4, #12]
 80024e8:	bd10      	pop	{r4, pc}

080024ea <__swrite>:
 80024ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024ee:	461f      	mov	r7, r3
 80024f0:	898b      	ldrh	r3, [r1, #12]
 80024f2:	05db      	lsls	r3, r3, #23
 80024f4:	4605      	mov	r5, r0
 80024f6:	460c      	mov	r4, r1
 80024f8:	4616      	mov	r6, r2
 80024fa:	d505      	bpl.n	8002508 <__swrite+0x1e>
 80024fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002500:	2302      	movs	r3, #2
 8002502:	2200      	movs	r2, #0
 8002504:	f000 f9c8 	bl	8002898 <_lseek_r>
 8002508:	89a3      	ldrh	r3, [r4, #12]
 800250a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800250e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002512:	81a3      	strh	r3, [r4, #12]
 8002514:	4632      	mov	r2, r6
 8002516:	463b      	mov	r3, r7
 8002518:	4628      	mov	r0, r5
 800251a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800251e:	f000 b869 	b.w	80025f4 <_write_r>

08002522 <__sseek>:
 8002522:	b510      	push	{r4, lr}
 8002524:	460c      	mov	r4, r1
 8002526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800252a:	f000 f9b5 	bl	8002898 <_lseek_r>
 800252e:	1c43      	adds	r3, r0, #1
 8002530:	89a3      	ldrh	r3, [r4, #12]
 8002532:	bf15      	itete	ne
 8002534:	6560      	strne	r0, [r4, #84]	; 0x54
 8002536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800253a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800253e:	81a3      	strheq	r3, [r4, #12]
 8002540:	bf18      	it	ne
 8002542:	81a3      	strhne	r3, [r4, #12]
 8002544:	bd10      	pop	{r4, pc}

08002546 <__sclose>:
 8002546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800254a:	f000 b8d3 	b.w	80026f4 <_close_r>
	...

08002550 <__swbuf_r>:
 8002550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002552:	460e      	mov	r6, r1
 8002554:	4614      	mov	r4, r2
 8002556:	4605      	mov	r5, r0
 8002558:	b118      	cbz	r0, 8002562 <__swbuf_r+0x12>
 800255a:	6983      	ldr	r3, [r0, #24]
 800255c:	b90b      	cbnz	r3, 8002562 <__swbuf_r+0x12>
 800255e:	f7ff fa5f 	bl	8001a20 <__sinit>
 8002562:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <__swbuf_r+0x98>)
 8002564:	429c      	cmp	r4, r3
 8002566:	d12b      	bne.n	80025c0 <__swbuf_r+0x70>
 8002568:	686c      	ldr	r4, [r5, #4]
 800256a:	69a3      	ldr	r3, [r4, #24]
 800256c:	60a3      	str	r3, [r4, #8]
 800256e:	89a3      	ldrh	r3, [r4, #12]
 8002570:	071a      	lsls	r2, r3, #28
 8002572:	d52f      	bpl.n	80025d4 <__swbuf_r+0x84>
 8002574:	6923      	ldr	r3, [r4, #16]
 8002576:	b36b      	cbz	r3, 80025d4 <__swbuf_r+0x84>
 8002578:	6923      	ldr	r3, [r4, #16]
 800257a:	6820      	ldr	r0, [r4, #0]
 800257c:	1ac0      	subs	r0, r0, r3
 800257e:	6963      	ldr	r3, [r4, #20]
 8002580:	b2f6      	uxtb	r6, r6
 8002582:	4283      	cmp	r3, r0
 8002584:	4637      	mov	r7, r6
 8002586:	dc04      	bgt.n	8002592 <__swbuf_r+0x42>
 8002588:	4621      	mov	r1, r4
 800258a:	4628      	mov	r0, r5
 800258c:	f000 f948 	bl	8002820 <_fflush_r>
 8002590:	bb30      	cbnz	r0, 80025e0 <__swbuf_r+0x90>
 8002592:	68a3      	ldr	r3, [r4, #8]
 8002594:	3b01      	subs	r3, #1
 8002596:	60a3      	str	r3, [r4, #8]
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	6022      	str	r2, [r4, #0]
 800259e:	701e      	strb	r6, [r3, #0]
 80025a0:	6963      	ldr	r3, [r4, #20]
 80025a2:	3001      	adds	r0, #1
 80025a4:	4283      	cmp	r3, r0
 80025a6:	d004      	beq.n	80025b2 <__swbuf_r+0x62>
 80025a8:	89a3      	ldrh	r3, [r4, #12]
 80025aa:	07db      	lsls	r3, r3, #31
 80025ac:	d506      	bpl.n	80025bc <__swbuf_r+0x6c>
 80025ae:	2e0a      	cmp	r6, #10
 80025b0:	d104      	bne.n	80025bc <__swbuf_r+0x6c>
 80025b2:	4621      	mov	r1, r4
 80025b4:	4628      	mov	r0, r5
 80025b6:	f000 f933 	bl	8002820 <_fflush_r>
 80025ba:	b988      	cbnz	r0, 80025e0 <__swbuf_r+0x90>
 80025bc:	4638      	mov	r0, r7
 80025be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025c0:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <__swbuf_r+0x9c>)
 80025c2:	429c      	cmp	r4, r3
 80025c4:	d101      	bne.n	80025ca <__swbuf_r+0x7a>
 80025c6:	68ac      	ldr	r4, [r5, #8]
 80025c8:	e7cf      	b.n	800256a <__swbuf_r+0x1a>
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <__swbuf_r+0xa0>)
 80025cc:	429c      	cmp	r4, r3
 80025ce:	bf08      	it	eq
 80025d0:	68ec      	ldreq	r4, [r5, #12]
 80025d2:	e7ca      	b.n	800256a <__swbuf_r+0x1a>
 80025d4:	4621      	mov	r1, r4
 80025d6:	4628      	mov	r0, r5
 80025d8:	f000 f81e 	bl	8002618 <__swsetup_r>
 80025dc:	2800      	cmp	r0, #0
 80025de:	d0cb      	beq.n	8002578 <__swbuf_r+0x28>
 80025e0:	f04f 37ff 	mov.w	r7, #4294967295
 80025e4:	e7ea      	b.n	80025bc <__swbuf_r+0x6c>
 80025e6:	bf00      	nop
 80025e8:	08002e64 	.word	0x08002e64
 80025ec:	08002e84 	.word	0x08002e84
 80025f0:	08002e44 	.word	0x08002e44

080025f4 <_write_r>:
 80025f4:	b538      	push	{r3, r4, r5, lr}
 80025f6:	4d07      	ldr	r5, [pc, #28]	; (8002614 <_write_r+0x20>)
 80025f8:	4604      	mov	r4, r0
 80025fa:	4608      	mov	r0, r1
 80025fc:	4611      	mov	r1, r2
 80025fe:	2200      	movs	r2, #0
 8002600:	602a      	str	r2, [r5, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	f000 fb56 	bl	8002cb4 <_write>
 8002608:	1c43      	adds	r3, r0, #1
 800260a:	d102      	bne.n	8002612 <_write_r+0x1e>
 800260c:	682b      	ldr	r3, [r5, #0]
 800260e:	b103      	cbz	r3, 8002612 <_write_r+0x1e>
 8002610:	6023      	str	r3, [r4, #0]
 8002612:	bd38      	pop	{r3, r4, r5, pc}
 8002614:	2000017c 	.word	0x2000017c

08002618 <__swsetup_r>:
 8002618:	4b32      	ldr	r3, [pc, #200]	; (80026e4 <__swsetup_r+0xcc>)
 800261a:	b570      	push	{r4, r5, r6, lr}
 800261c:	681d      	ldr	r5, [r3, #0]
 800261e:	4606      	mov	r6, r0
 8002620:	460c      	mov	r4, r1
 8002622:	b125      	cbz	r5, 800262e <__swsetup_r+0x16>
 8002624:	69ab      	ldr	r3, [r5, #24]
 8002626:	b913      	cbnz	r3, 800262e <__swsetup_r+0x16>
 8002628:	4628      	mov	r0, r5
 800262a:	f7ff f9f9 	bl	8001a20 <__sinit>
 800262e:	4b2e      	ldr	r3, [pc, #184]	; (80026e8 <__swsetup_r+0xd0>)
 8002630:	429c      	cmp	r4, r3
 8002632:	d10f      	bne.n	8002654 <__swsetup_r+0x3c>
 8002634:	686c      	ldr	r4, [r5, #4]
 8002636:	89a3      	ldrh	r3, [r4, #12]
 8002638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800263c:	0719      	lsls	r1, r3, #28
 800263e:	d42c      	bmi.n	800269a <__swsetup_r+0x82>
 8002640:	06dd      	lsls	r5, r3, #27
 8002642:	d411      	bmi.n	8002668 <__swsetup_r+0x50>
 8002644:	2309      	movs	r3, #9
 8002646:	6033      	str	r3, [r6, #0]
 8002648:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800264c:	81a3      	strh	r3, [r4, #12]
 800264e:	f04f 30ff 	mov.w	r0, #4294967295
 8002652:	e03e      	b.n	80026d2 <__swsetup_r+0xba>
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <__swsetup_r+0xd4>)
 8002656:	429c      	cmp	r4, r3
 8002658:	d101      	bne.n	800265e <__swsetup_r+0x46>
 800265a:	68ac      	ldr	r4, [r5, #8]
 800265c:	e7eb      	b.n	8002636 <__swsetup_r+0x1e>
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <__swsetup_r+0xd8>)
 8002660:	429c      	cmp	r4, r3
 8002662:	bf08      	it	eq
 8002664:	68ec      	ldreq	r4, [r5, #12]
 8002666:	e7e6      	b.n	8002636 <__swsetup_r+0x1e>
 8002668:	0758      	lsls	r0, r3, #29
 800266a:	d512      	bpl.n	8002692 <__swsetup_r+0x7a>
 800266c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800266e:	b141      	cbz	r1, 8002682 <__swsetup_r+0x6a>
 8002670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002674:	4299      	cmp	r1, r3
 8002676:	d002      	beq.n	800267e <__swsetup_r+0x66>
 8002678:	4630      	mov	r0, r6
 800267a:	f000 f9b7 	bl	80029ec <_free_r>
 800267e:	2300      	movs	r3, #0
 8002680:	6363      	str	r3, [r4, #52]	; 0x34
 8002682:	89a3      	ldrh	r3, [r4, #12]
 8002684:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002688:	81a3      	strh	r3, [r4, #12]
 800268a:	2300      	movs	r3, #0
 800268c:	6063      	str	r3, [r4, #4]
 800268e:	6923      	ldr	r3, [r4, #16]
 8002690:	6023      	str	r3, [r4, #0]
 8002692:	89a3      	ldrh	r3, [r4, #12]
 8002694:	f043 0308 	orr.w	r3, r3, #8
 8002698:	81a3      	strh	r3, [r4, #12]
 800269a:	6923      	ldr	r3, [r4, #16]
 800269c:	b94b      	cbnz	r3, 80026b2 <__swsetup_r+0x9a>
 800269e:	89a3      	ldrh	r3, [r4, #12]
 80026a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80026a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a8:	d003      	beq.n	80026b2 <__swsetup_r+0x9a>
 80026aa:	4621      	mov	r1, r4
 80026ac:	4630      	mov	r0, r6
 80026ae:	f000 f929 	bl	8002904 <__smakebuf_r>
 80026b2:	89a0      	ldrh	r0, [r4, #12]
 80026b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026b8:	f010 0301 	ands.w	r3, r0, #1
 80026bc:	d00a      	beq.n	80026d4 <__swsetup_r+0xbc>
 80026be:	2300      	movs	r3, #0
 80026c0:	60a3      	str	r3, [r4, #8]
 80026c2:	6963      	ldr	r3, [r4, #20]
 80026c4:	425b      	negs	r3, r3
 80026c6:	61a3      	str	r3, [r4, #24]
 80026c8:	6923      	ldr	r3, [r4, #16]
 80026ca:	b943      	cbnz	r3, 80026de <__swsetup_r+0xc6>
 80026cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80026d0:	d1ba      	bne.n	8002648 <__swsetup_r+0x30>
 80026d2:	bd70      	pop	{r4, r5, r6, pc}
 80026d4:	0781      	lsls	r1, r0, #30
 80026d6:	bf58      	it	pl
 80026d8:	6963      	ldrpl	r3, [r4, #20]
 80026da:	60a3      	str	r3, [r4, #8]
 80026dc:	e7f4      	b.n	80026c8 <__swsetup_r+0xb0>
 80026de:	2000      	movs	r0, #0
 80026e0:	e7f7      	b.n	80026d2 <__swsetup_r+0xba>
 80026e2:	bf00      	nop
 80026e4:	20000000 	.word	0x20000000
 80026e8:	08002e64 	.word	0x08002e64
 80026ec:	08002e84 	.word	0x08002e84
 80026f0:	08002e44 	.word	0x08002e44

080026f4 <_close_r>:
 80026f4:	b538      	push	{r3, r4, r5, lr}
 80026f6:	4d06      	ldr	r5, [pc, #24]	; (8002710 <_close_r+0x1c>)
 80026f8:	2300      	movs	r3, #0
 80026fa:	4604      	mov	r4, r0
 80026fc:	4608      	mov	r0, r1
 80026fe:	602b      	str	r3, [r5, #0]
 8002700:	f000 fb0a 	bl	8002d18 <_close>
 8002704:	1c43      	adds	r3, r0, #1
 8002706:	d102      	bne.n	800270e <_close_r+0x1a>
 8002708:	682b      	ldr	r3, [r5, #0]
 800270a:	b103      	cbz	r3, 800270e <_close_r+0x1a>
 800270c:	6023      	str	r3, [r4, #0]
 800270e:	bd38      	pop	{r3, r4, r5, pc}
 8002710:	2000017c 	.word	0x2000017c

08002714 <__sflush_r>:
 8002714:	898a      	ldrh	r2, [r1, #12]
 8002716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800271a:	4605      	mov	r5, r0
 800271c:	0710      	lsls	r0, r2, #28
 800271e:	460c      	mov	r4, r1
 8002720:	d458      	bmi.n	80027d4 <__sflush_r+0xc0>
 8002722:	684b      	ldr	r3, [r1, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	dc05      	bgt.n	8002734 <__sflush_r+0x20>
 8002728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	dc02      	bgt.n	8002734 <__sflush_r+0x20>
 800272e:	2000      	movs	r0, #0
 8002730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002736:	2e00      	cmp	r6, #0
 8002738:	d0f9      	beq.n	800272e <__sflush_r+0x1a>
 800273a:	2300      	movs	r3, #0
 800273c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002740:	682f      	ldr	r7, [r5, #0]
 8002742:	602b      	str	r3, [r5, #0]
 8002744:	d032      	beq.n	80027ac <__sflush_r+0x98>
 8002746:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002748:	89a3      	ldrh	r3, [r4, #12]
 800274a:	075a      	lsls	r2, r3, #29
 800274c:	d505      	bpl.n	800275a <__sflush_r+0x46>
 800274e:	6863      	ldr	r3, [r4, #4]
 8002750:	1ac0      	subs	r0, r0, r3
 8002752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002754:	b10b      	cbz	r3, 800275a <__sflush_r+0x46>
 8002756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002758:	1ac0      	subs	r0, r0, r3
 800275a:	2300      	movs	r3, #0
 800275c:	4602      	mov	r2, r0
 800275e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002760:	6a21      	ldr	r1, [r4, #32]
 8002762:	4628      	mov	r0, r5
 8002764:	47b0      	blx	r6
 8002766:	1c43      	adds	r3, r0, #1
 8002768:	89a3      	ldrh	r3, [r4, #12]
 800276a:	d106      	bne.n	800277a <__sflush_r+0x66>
 800276c:	6829      	ldr	r1, [r5, #0]
 800276e:	291d      	cmp	r1, #29
 8002770:	d82c      	bhi.n	80027cc <__sflush_r+0xb8>
 8002772:	4a2a      	ldr	r2, [pc, #168]	; (800281c <__sflush_r+0x108>)
 8002774:	40ca      	lsrs	r2, r1
 8002776:	07d6      	lsls	r6, r2, #31
 8002778:	d528      	bpl.n	80027cc <__sflush_r+0xb8>
 800277a:	2200      	movs	r2, #0
 800277c:	6062      	str	r2, [r4, #4]
 800277e:	04d9      	lsls	r1, r3, #19
 8002780:	6922      	ldr	r2, [r4, #16]
 8002782:	6022      	str	r2, [r4, #0]
 8002784:	d504      	bpl.n	8002790 <__sflush_r+0x7c>
 8002786:	1c42      	adds	r2, r0, #1
 8002788:	d101      	bne.n	800278e <__sflush_r+0x7a>
 800278a:	682b      	ldr	r3, [r5, #0]
 800278c:	b903      	cbnz	r3, 8002790 <__sflush_r+0x7c>
 800278e:	6560      	str	r0, [r4, #84]	; 0x54
 8002790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002792:	602f      	str	r7, [r5, #0]
 8002794:	2900      	cmp	r1, #0
 8002796:	d0ca      	beq.n	800272e <__sflush_r+0x1a>
 8002798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800279c:	4299      	cmp	r1, r3
 800279e:	d002      	beq.n	80027a6 <__sflush_r+0x92>
 80027a0:	4628      	mov	r0, r5
 80027a2:	f000 f923 	bl	80029ec <_free_r>
 80027a6:	2000      	movs	r0, #0
 80027a8:	6360      	str	r0, [r4, #52]	; 0x34
 80027aa:	e7c1      	b.n	8002730 <__sflush_r+0x1c>
 80027ac:	6a21      	ldr	r1, [r4, #32]
 80027ae:	2301      	movs	r3, #1
 80027b0:	4628      	mov	r0, r5
 80027b2:	47b0      	blx	r6
 80027b4:	1c41      	adds	r1, r0, #1
 80027b6:	d1c7      	bne.n	8002748 <__sflush_r+0x34>
 80027b8:	682b      	ldr	r3, [r5, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0c4      	beq.n	8002748 <__sflush_r+0x34>
 80027be:	2b1d      	cmp	r3, #29
 80027c0:	d001      	beq.n	80027c6 <__sflush_r+0xb2>
 80027c2:	2b16      	cmp	r3, #22
 80027c4:	d101      	bne.n	80027ca <__sflush_r+0xb6>
 80027c6:	602f      	str	r7, [r5, #0]
 80027c8:	e7b1      	b.n	800272e <__sflush_r+0x1a>
 80027ca:	89a3      	ldrh	r3, [r4, #12]
 80027cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d0:	81a3      	strh	r3, [r4, #12]
 80027d2:	e7ad      	b.n	8002730 <__sflush_r+0x1c>
 80027d4:	690f      	ldr	r7, [r1, #16]
 80027d6:	2f00      	cmp	r7, #0
 80027d8:	d0a9      	beq.n	800272e <__sflush_r+0x1a>
 80027da:	0793      	lsls	r3, r2, #30
 80027dc:	680e      	ldr	r6, [r1, #0]
 80027de:	bf08      	it	eq
 80027e0:	694b      	ldreq	r3, [r1, #20]
 80027e2:	600f      	str	r7, [r1, #0]
 80027e4:	bf18      	it	ne
 80027e6:	2300      	movne	r3, #0
 80027e8:	eba6 0807 	sub.w	r8, r6, r7
 80027ec:	608b      	str	r3, [r1, #8]
 80027ee:	f1b8 0f00 	cmp.w	r8, #0
 80027f2:	dd9c      	ble.n	800272e <__sflush_r+0x1a>
 80027f4:	6a21      	ldr	r1, [r4, #32]
 80027f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80027f8:	4643      	mov	r3, r8
 80027fa:	463a      	mov	r2, r7
 80027fc:	4628      	mov	r0, r5
 80027fe:	47b0      	blx	r6
 8002800:	2800      	cmp	r0, #0
 8002802:	dc06      	bgt.n	8002812 <__sflush_r+0xfe>
 8002804:	89a3      	ldrh	r3, [r4, #12]
 8002806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800280a:	81a3      	strh	r3, [r4, #12]
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	e78e      	b.n	8002730 <__sflush_r+0x1c>
 8002812:	4407      	add	r7, r0
 8002814:	eba8 0800 	sub.w	r8, r8, r0
 8002818:	e7e9      	b.n	80027ee <__sflush_r+0xda>
 800281a:	bf00      	nop
 800281c:	20400001 	.word	0x20400001

08002820 <_fflush_r>:
 8002820:	b538      	push	{r3, r4, r5, lr}
 8002822:	690b      	ldr	r3, [r1, #16]
 8002824:	4605      	mov	r5, r0
 8002826:	460c      	mov	r4, r1
 8002828:	b913      	cbnz	r3, 8002830 <_fflush_r+0x10>
 800282a:	2500      	movs	r5, #0
 800282c:	4628      	mov	r0, r5
 800282e:	bd38      	pop	{r3, r4, r5, pc}
 8002830:	b118      	cbz	r0, 800283a <_fflush_r+0x1a>
 8002832:	6983      	ldr	r3, [r0, #24]
 8002834:	b90b      	cbnz	r3, 800283a <_fflush_r+0x1a>
 8002836:	f7ff f8f3 	bl	8001a20 <__sinit>
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <_fflush_r+0x6c>)
 800283c:	429c      	cmp	r4, r3
 800283e:	d11b      	bne.n	8002878 <_fflush_r+0x58>
 8002840:	686c      	ldr	r4, [r5, #4]
 8002842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0ef      	beq.n	800282a <_fflush_r+0xa>
 800284a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800284c:	07d0      	lsls	r0, r2, #31
 800284e:	d404      	bmi.n	800285a <_fflush_r+0x3a>
 8002850:	0599      	lsls	r1, r3, #22
 8002852:	d402      	bmi.n	800285a <_fflush_r+0x3a>
 8002854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002856:	f7ff f981 	bl	8001b5c <__retarget_lock_acquire_recursive>
 800285a:	4628      	mov	r0, r5
 800285c:	4621      	mov	r1, r4
 800285e:	f7ff ff59 	bl	8002714 <__sflush_r>
 8002862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002864:	07da      	lsls	r2, r3, #31
 8002866:	4605      	mov	r5, r0
 8002868:	d4e0      	bmi.n	800282c <_fflush_r+0xc>
 800286a:	89a3      	ldrh	r3, [r4, #12]
 800286c:	059b      	lsls	r3, r3, #22
 800286e:	d4dd      	bmi.n	800282c <_fflush_r+0xc>
 8002870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002872:	f7ff f974 	bl	8001b5e <__retarget_lock_release_recursive>
 8002876:	e7d9      	b.n	800282c <_fflush_r+0xc>
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <_fflush_r+0x70>)
 800287a:	429c      	cmp	r4, r3
 800287c:	d101      	bne.n	8002882 <_fflush_r+0x62>
 800287e:	68ac      	ldr	r4, [r5, #8]
 8002880:	e7df      	b.n	8002842 <_fflush_r+0x22>
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <_fflush_r+0x74>)
 8002884:	429c      	cmp	r4, r3
 8002886:	bf08      	it	eq
 8002888:	68ec      	ldreq	r4, [r5, #12]
 800288a:	e7da      	b.n	8002842 <_fflush_r+0x22>
 800288c:	08002e64 	.word	0x08002e64
 8002890:	08002e84 	.word	0x08002e84
 8002894:	08002e44 	.word	0x08002e44

08002898 <_lseek_r>:
 8002898:	b538      	push	{r3, r4, r5, lr}
 800289a:	4d07      	ldr	r5, [pc, #28]	; (80028b8 <_lseek_r+0x20>)
 800289c:	4604      	mov	r4, r0
 800289e:	4608      	mov	r0, r1
 80028a0:	4611      	mov	r1, r2
 80028a2:	2200      	movs	r2, #0
 80028a4:	602a      	str	r2, [r5, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	f000 f9f2 	bl	8002c90 <_lseek>
 80028ac:	1c43      	adds	r3, r0, #1
 80028ae:	d102      	bne.n	80028b6 <_lseek_r+0x1e>
 80028b0:	682b      	ldr	r3, [r5, #0]
 80028b2:	b103      	cbz	r3, 80028b6 <_lseek_r+0x1e>
 80028b4:	6023      	str	r3, [r4, #0]
 80028b6:	bd38      	pop	{r3, r4, r5, pc}
 80028b8:	2000017c 	.word	0x2000017c

080028bc <__swhatbuf_r>:
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	460e      	mov	r6, r1
 80028c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028c4:	2900      	cmp	r1, #0
 80028c6:	b096      	sub	sp, #88	; 0x58
 80028c8:	4614      	mov	r4, r2
 80028ca:	461d      	mov	r5, r3
 80028cc:	da07      	bge.n	80028de <__swhatbuf_r+0x22>
 80028ce:	2300      	movs	r3, #0
 80028d0:	602b      	str	r3, [r5, #0]
 80028d2:	89b3      	ldrh	r3, [r6, #12]
 80028d4:	061a      	lsls	r2, r3, #24
 80028d6:	d410      	bmi.n	80028fa <__swhatbuf_r+0x3e>
 80028d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028dc:	e00e      	b.n	80028fc <__swhatbuf_r+0x40>
 80028de:	466a      	mov	r2, sp
 80028e0:	f000 f90c 	bl	8002afc <_fstat_r>
 80028e4:	2800      	cmp	r0, #0
 80028e6:	dbf2      	blt.n	80028ce <__swhatbuf_r+0x12>
 80028e8:	9a01      	ldr	r2, [sp, #4]
 80028ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80028ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80028f2:	425a      	negs	r2, r3
 80028f4:	415a      	adcs	r2, r3
 80028f6:	602a      	str	r2, [r5, #0]
 80028f8:	e7ee      	b.n	80028d8 <__swhatbuf_r+0x1c>
 80028fa:	2340      	movs	r3, #64	; 0x40
 80028fc:	2000      	movs	r0, #0
 80028fe:	6023      	str	r3, [r4, #0]
 8002900:	b016      	add	sp, #88	; 0x58
 8002902:	bd70      	pop	{r4, r5, r6, pc}

08002904 <__smakebuf_r>:
 8002904:	898b      	ldrh	r3, [r1, #12]
 8002906:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002908:	079d      	lsls	r5, r3, #30
 800290a:	4606      	mov	r6, r0
 800290c:	460c      	mov	r4, r1
 800290e:	d507      	bpl.n	8002920 <__smakebuf_r+0x1c>
 8002910:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002914:	6023      	str	r3, [r4, #0]
 8002916:	6123      	str	r3, [r4, #16]
 8002918:	2301      	movs	r3, #1
 800291a:	6163      	str	r3, [r4, #20]
 800291c:	b002      	add	sp, #8
 800291e:	bd70      	pop	{r4, r5, r6, pc}
 8002920:	ab01      	add	r3, sp, #4
 8002922:	466a      	mov	r2, sp
 8002924:	f7ff ffca 	bl	80028bc <__swhatbuf_r>
 8002928:	9900      	ldr	r1, [sp, #0]
 800292a:	4605      	mov	r5, r0
 800292c:	4630      	mov	r0, r6
 800292e:	f7ff f917 	bl	8001b60 <_malloc_r>
 8002932:	b948      	cbnz	r0, 8002948 <__smakebuf_r+0x44>
 8002934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002938:	059a      	lsls	r2, r3, #22
 800293a:	d4ef      	bmi.n	800291c <__smakebuf_r+0x18>
 800293c:	f023 0303 	bic.w	r3, r3, #3
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	81a3      	strh	r3, [r4, #12]
 8002946:	e7e3      	b.n	8002910 <__smakebuf_r+0xc>
 8002948:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <__smakebuf_r+0x7c>)
 800294a:	62b3      	str	r3, [r6, #40]	; 0x28
 800294c:	89a3      	ldrh	r3, [r4, #12]
 800294e:	6020      	str	r0, [r4, #0]
 8002950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002954:	81a3      	strh	r3, [r4, #12]
 8002956:	9b00      	ldr	r3, [sp, #0]
 8002958:	6163      	str	r3, [r4, #20]
 800295a:	9b01      	ldr	r3, [sp, #4]
 800295c:	6120      	str	r0, [r4, #16]
 800295e:	b15b      	cbz	r3, 8002978 <__smakebuf_r+0x74>
 8002960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002964:	4630      	mov	r0, r6
 8002966:	f000 f8db 	bl	8002b20 <_isatty_r>
 800296a:	b128      	cbz	r0, 8002978 <__smakebuf_r+0x74>
 800296c:	89a3      	ldrh	r3, [r4, #12]
 800296e:	f023 0303 	bic.w	r3, r3, #3
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	81a3      	strh	r3, [r4, #12]
 8002978:	89a0      	ldrh	r0, [r4, #12]
 800297a:	4305      	orrs	r5, r0
 800297c:	81a5      	strh	r5, [r4, #12]
 800297e:	e7cd      	b.n	800291c <__smakebuf_r+0x18>
 8002980:	080019b9 	.word	0x080019b9

08002984 <memcpy>:
 8002984:	440a      	add	r2, r1
 8002986:	4291      	cmp	r1, r2
 8002988:	f100 33ff 	add.w	r3, r0, #4294967295
 800298c:	d100      	bne.n	8002990 <memcpy+0xc>
 800298e:	4770      	bx	lr
 8002990:	b510      	push	{r4, lr}
 8002992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800299a:	4291      	cmp	r1, r2
 800299c:	d1f9      	bne.n	8002992 <memcpy+0xe>
 800299e:	bd10      	pop	{r4, pc}

080029a0 <memmove>:
 80029a0:	4288      	cmp	r0, r1
 80029a2:	b510      	push	{r4, lr}
 80029a4:	eb01 0402 	add.w	r4, r1, r2
 80029a8:	d902      	bls.n	80029b0 <memmove+0x10>
 80029aa:	4284      	cmp	r4, r0
 80029ac:	4623      	mov	r3, r4
 80029ae:	d807      	bhi.n	80029c0 <memmove+0x20>
 80029b0:	1e43      	subs	r3, r0, #1
 80029b2:	42a1      	cmp	r1, r4
 80029b4:	d008      	beq.n	80029c8 <memmove+0x28>
 80029b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029be:	e7f8      	b.n	80029b2 <memmove+0x12>
 80029c0:	4402      	add	r2, r0
 80029c2:	4601      	mov	r1, r0
 80029c4:	428a      	cmp	r2, r1
 80029c6:	d100      	bne.n	80029ca <memmove+0x2a>
 80029c8:	bd10      	pop	{r4, pc}
 80029ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029d2:	e7f7      	b.n	80029c4 <memmove+0x24>

080029d4 <__malloc_lock>:
 80029d4:	4801      	ldr	r0, [pc, #4]	; (80029dc <__malloc_lock+0x8>)
 80029d6:	f7ff b8c1 	b.w	8001b5c <__retarget_lock_acquire_recursive>
 80029da:	bf00      	nop
 80029dc:	20000174 	.word	0x20000174

080029e0 <__malloc_unlock>:
 80029e0:	4801      	ldr	r0, [pc, #4]	; (80029e8 <__malloc_unlock+0x8>)
 80029e2:	f7ff b8bc 	b.w	8001b5e <__retarget_lock_release_recursive>
 80029e6:	bf00      	nop
 80029e8:	20000174 	.word	0x20000174

080029ec <_free_r>:
 80029ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029ee:	2900      	cmp	r1, #0
 80029f0:	d048      	beq.n	8002a84 <_free_r+0x98>
 80029f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029f6:	9001      	str	r0, [sp, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f1a1 0404 	sub.w	r4, r1, #4
 80029fe:	bfb8      	it	lt
 8002a00:	18e4      	addlt	r4, r4, r3
 8002a02:	f7ff ffe7 	bl	80029d4 <__malloc_lock>
 8002a06:	4a20      	ldr	r2, [pc, #128]	; (8002a88 <_free_r+0x9c>)
 8002a08:	9801      	ldr	r0, [sp, #4]
 8002a0a:	6813      	ldr	r3, [r2, #0]
 8002a0c:	4615      	mov	r5, r2
 8002a0e:	b933      	cbnz	r3, 8002a1e <_free_r+0x32>
 8002a10:	6063      	str	r3, [r4, #4]
 8002a12:	6014      	str	r4, [r2, #0]
 8002a14:	b003      	add	sp, #12
 8002a16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a1a:	f7ff bfe1 	b.w	80029e0 <__malloc_unlock>
 8002a1e:	42a3      	cmp	r3, r4
 8002a20:	d90b      	bls.n	8002a3a <_free_r+0x4e>
 8002a22:	6821      	ldr	r1, [r4, #0]
 8002a24:	1862      	adds	r2, r4, r1
 8002a26:	4293      	cmp	r3, r2
 8002a28:	bf04      	itt	eq
 8002a2a:	681a      	ldreq	r2, [r3, #0]
 8002a2c:	685b      	ldreq	r3, [r3, #4]
 8002a2e:	6063      	str	r3, [r4, #4]
 8002a30:	bf04      	itt	eq
 8002a32:	1852      	addeq	r2, r2, r1
 8002a34:	6022      	streq	r2, [r4, #0]
 8002a36:	602c      	str	r4, [r5, #0]
 8002a38:	e7ec      	b.n	8002a14 <_free_r+0x28>
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	b10b      	cbz	r3, 8002a44 <_free_r+0x58>
 8002a40:	42a3      	cmp	r3, r4
 8002a42:	d9fa      	bls.n	8002a3a <_free_r+0x4e>
 8002a44:	6811      	ldr	r1, [r2, #0]
 8002a46:	1855      	adds	r5, r2, r1
 8002a48:	42a5      	cmp	r5, r4
 8002a4a:	d10b      	bne.n	8002a64 <_free_r+0x78>
 8002a4c:	6824      	ldr	r4, [r4, #0]
 8002a4e:	4421      	add	r1, r4
 8002a50:	1854      	adds	r4, r2, r1
 8002a52:	42a3      	cmp	r3, r4
 8002a54:	6011      	str	r1, [r2, #0]
 8002a56:	d1dd      	bne.n	8002a14 <_free_r+0x28>
 8002a58:	681c      	ldr	r4, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	6053      	str	r3, [r2, #4]
 8002a5e:	4421      	add	r1, r4
 8002a60:	6011      	str	r1, [r2, #0]
 8002a62:	e7d7      	b.n	8002a14 <_free_r+0x28>
 8002a64:	d902      	bls.n	8002a6c <_free_r+0x80>
 8002a66:	230c      	movs	r3, #12
 8002a68:	6003      	str	r3, [r0, #0]
 8002a6a:	e7d3      	b.n	8002a14 <_free_r+0x28>
 8002a6c:	6825      	ldr	r5, [r4, #0]
 8002a6e:	1961      	adds	r1, r4, r5
 8002a70:	428b      	cmp	r3, r1
 8002a72:	bf04      	itt	eq
 8002a74:	6819      	ldreq	r1, [r3, #0]
 8002a76:	685b      	ldreq	r3, [r3, #4]
 8002a78:	6063      	str	r3, [r4, #4]
 8002a7a:	bf04      	itt	eq
 8002a7c:	1949      	addeq	r1, r1, r5
 8002a7e:	6021      	streq	r1, [r4, #0]
 8002a80:	6054      	str	r4, [r2, #4]
 8002a82:	e7c7      	b.n	8002a14 <_free_r+0x28>
 8002a84:	b003      	add	sp, #12
 8002a86:	bd30      	pop	{r4, r5, pc}
 8002a88:	20000088 	.word	0x20000088

08002a8c <_realloc_r>:
 8002a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8e:	4607      	mov	r7, r0
 8002a90:	4614      	mov	r4, r2
 8002a92:	460e      	mov	r6, r1
 8002a94:	b921      	cbnz	r1, 8002aa0 <_realloc_r+0x14>
 8002a96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	f7ff b860 	b.w	8001b60 <_malloc_r>
 8002aa0:	b922      	cbnz	r2, 8002aac <_realloc_r+0x20>
 8002aa2:	f7ff ffa3 	bl	80029ec <_free_r>
 8002aa6:	4625      	mov	r5, r4
 8002aa8:	4628      	mov	r0, r5
 8002aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aac:	f000 f848 	bl	8002b40 <_malloc_usable_size_r>
 8002ab0:	42a0      	cmp	r0, r4
 8002ab2:	d20f      	bcs.n	8002ad4 <_realloc_r+0x48>
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	4638      	mov	r0, r7
 8002ab8:	f7ff f852 	bl	8001b60 <_malloc_r>
 8002abc:	4605      	mov	r5, r0
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	d0f2      	beq.n	8002aa8 <_realloc_r+0x1c>
 8002ac2:	4631      	mov	r1, r6
 8002ac4:	4622      	mov	r2, r4
 8002ac6:	f7ff ff5d 	bl	8002984 <memcpy>
 8002aca:	4631      	mov	r1, r6
 8002acc:	4638      	mov	r0, r7
 8002ace:	f7ff ff8d 	bl	80029ec <_free_r>
 8002ad2:	e7e9      	b.n	8002aa8 <_realloc_r+0x1c>
 8002ad4:	4635      	mov	r5, r6
 8002ad6:	e7e7      	b.n	8002aa8 <_realloc_r+0x1c>

08002ad8 <_read_r>:
 8002ad8:	b538      	push	{r3, r4, r5, lr}
 8002ada:	4d07      	ldr	r5, [pc, #28]	; (8002af8 <_read_r+0x20>)
 8002adc:	4604      	mov	r4, r0
 8002ade:	4608      	mov	r0, r1
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	602a      	str	r2, [r5, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f000 f87a 	bl	8002be0 <_read>
 8002aec:	1c43      	adds	r3, r0, #1
 8002aee:	d102      	bne.n	8002af6 <_read_r+0x1e>
 8002af0:	682b      	ldr	r3, [r5, #0]
 8002af2:	b103      	cbz	r3, 8002af6 <_read_r+0x1e>
 8002af4:	6023      	str	r3, [r4, #0]
 8002af6:	bd38      	pop	{r3, r4, r5, pc}
 8002af8:	2000017c 	.word	0x2000017c

08002afc <_fstat_r>:
 8002afc:	b538      	push	{r3, r4, r5, lr}
 8002afe:	4d07      	ldr	r5, [pc, #28]	; (8002b1c <_fstat_r+0x20>)
 8002b00:	2300      	movs	r3, #0
 8002b02:	4604      	mov	r4, r0
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	602b      	str	r3, [r5, #0]
 8002b0a:	f000 f94c 	bl	8002da6 <_fstat>
 8002b0e:	1c43      	adds	r3, r0, #1
 8002b10:	d102      	bne.n	8002b18 <_fstat_r+0x1c>
 8002b12:	682b      	ldr	r3, [r5, #0]
 8002b14:	b103      	cbz	r3, 8002b18 <_fstat_r+0x1c>
 8002b16:	6023      	str	r3, [r4, #0]
 8002b18:	bd38      	pop	{r3, r4, r5, pc}
 8002b1a:	bf00      	nop
 8002b1c:	2000017c 	.word	0x2000017c

08002b20 <_isatty_r>:
 8002b20:	b538      	push	{r3, r4, r5, lr}
 8002b22:	4d06      	ldr	r5, [pc, #24]	; (8002b3c <_isatty_r+0x1c>)
 8002b24:	2300      	movs	r3, #0
 8002b26:	4604      	mov	r4, r0
 8002b28:	4608      	mov	r0, r1
 8002b2a:	602b      	str	r3, [r5, #0]
 8002b2c:	f000 f949 	bl	8002dc2 <_isatty>
 8002b30:	1c43      	adds	r3, r0, #1
 8002b32:	d102      	bne.n	8002b3a <_isatty_r+0x1a>
 8002b34:	682b      	ldr	r3, [r5, #0]
 8002b36:	b103      	cbz	r3, 8002b3a <_isatty_r+0x1a>
 8002b38:	6023      	str	r3, [r4, #0]
 8002b3a:	bd38      	pop	{r3, r4, r5, pc}
 8002b3c:	2000017c 	.word	0x2000017c

08002b40 <_malloc_usable_size_r>:
 8002b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b44:	1f18      	subs	r0, r3, #4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bfbc      	itt	lt
 8002b4a:	580b      	ldrlt	r3, [r1, r0]
 8002b4c:	18c0      	addlt	r0, r0, r3
 8002b4e:	4770      	bx	lr

08002b50 <findslot>:
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <findslot+0x2c>)
 8002b52:	b510      	push	{r4, lr}
 8002b54:	4604      	mov	r4, r0
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	b118      	cbz	r0, 8002b62 <findslot+0x12>
 8002b5a:	6983      	ldr	r3, [r0, #24]
 8002b5c:	b90b      	cbnz	r3, 8002b62 <findslot+0x12>
 8002b5e:	f7fe ff5f 	bl	8001a20 <__sinit>
 8002b62:	2c13      	cmp	r4, #19
 8002b64:	d807      	bhi.n	8002b76 <findslot+0x26>
 8002b66:	4806      	ldr	r0, [pc, #24]	; (8002b80 <findslot+0x30>)
 8002b68:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002b6c:	3201      	adds	r2, #1
 8002b6e:	d002      	beq.n	8002b76 <findslot+0x26>
 8002b70:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002b74:	bd10      	pop	{r4, pc}
 8002b76:	2000      	movs	r0, #0
 8002b78:	e7fc      	b.n	8002b74 <findslot+0x24>
 8002b7a:	bf00      	nop
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	20000090 	.word	0x20000090

08002b84 <checkerror>:
 8002b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b86:	1c43      	adds	r3, r0, #1
 8002b88:	4604      	mov	r4, r0
 8002b8a:	d109      	bne.n	8002ba0 <checkerror+0x1c>
 8002b8c:	f7fe fe86 	bl	800189c <__errno>
 8002b90:	2613      	movs	r6, #19
 8002b92:	4605      	mov	r5, r0
 8002b94:	2700      	movs	r7, #0
 8002b96:	4630      	mov	r0, r6
 8002b98:	4639      	mov	r1, r7
 8002b9a:	beab      	bkpt	0x00ab
 8002b9c:	4606      	mov	r6, r0
 8002b9e:	602e      	str	r6, [r5, #0]
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ba4 <error>:
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	f7fe fe78 	bl	800189c <__errno>
 8002bac:	2613      	movs	r6, #19
 8002bae:	4605      	mov	r5, r0
 8002bb0:	2700      	movs	r7, #0
 8002bb2:	4630      	mov	r0, r6
 8002bb4:	4639      	mov	r1, r7
 8002bb6:	beab      	bkpt	0x00ab
 8002bb8:	4606      	mov	r6, r0
 8002bba:	602e      	str	r6, [r5, #0]
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002bc0 <_swiread>:
 8002bc0:	b530      	push	{r4, r5, lr}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002bc8:	9203      	str	r2, [sp, #12]
 8002bca:	2406      	movs	r4, #6
 8002bcc:	ad01      	add	r5, sp, #4
 8002bce:	4620      	mov	r0, r4
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	beab      	bkpt	0x00ab
 8002bd4:	4604      	mov	r4, r0
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f7ff ffd4 	bl	8002b84 <checkerror>
 8002bdc:	b005      	add	sp, #20
 8002bde:	bd30      	pop	{r4, r5, pc}

08002be0 <_read>:
 8002be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002be2:	4615      	mov	r5, r2
 8002be4:	9101      	str	r1, [sp, #4]
 8002be6:	f7ff ffb3 	bl	8002b50 <findslot>
 8002bea:	9901      	ldr	r1, [sp, #4]
 8002bec:	4604      	mov	r4, r0
 8002bee:	b938      	cbnz	r0, 8002c00 <_read+0x20>
 8002bf0:	f7fe fe54 	bl	800189c <__errno>
 8002bf4:	2309      	movs	r3, #9
 8002bf6:	6003      	str	r3, [r0, #0]
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	b003      	add	sp, #12
 8002bfe:	bd30      	pop	{r4, r5, pc}
 8002c00:	6800      	ldr	r0, [r0, #0]
 8002c02:	462a      	mov	r2, r5
 8002c04:	f7ff ffdc 	bl	8002bc0 <_swiread>
 8002c08:	1c43      	adds	r3, r0, #1
 8002c0a:	d0f7      	beq.n	8002bfc <_read+0x1c>
 8002c0c:	6863      	ldr	r3, [r4, #4]
 8002c0e:	1a2a      	subs	r2, r5, r0
 8002c10:	4413      	add	r3, r2
 8002c12:	6063      	str	r3, [r4, #4]
 8002c14:	4610      	mov	r0, r2
 8002c16:	e7f1      	b.n	8002bfc <_read+0x1c>

08002c18 <_swilseek>:
 8002c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	4616      	mov	r6, r2
 8002c1e:	f7ff ff97 	bl	8002b50 <findslot>
 8002c22:	4605      	mov	r5, r0
 8002c24:	b940      	cbnz	r0, 8002c38 <_swilseek+0x20>
 8002c26:	f7fe fe39 	bl	800189c <__errno>
 8002c2a:	2309      	movs	r3, #9
 8002c2c:	6003      	str	r3, [r0, #0]
 8002c2e:	f04f 34ff 	mov.w	r4, #4294967295
 8002c32:	4620      	mov	r0, r4
 8002c34:	b003      	add	sp, #12
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	2e02      	cmp	r6, #2
 8002c3a:	d903      	bls.n	8002c44 <_swilseek+0x2c>
 8002c3c:	f7fe fe2e 	bl	800189c <__errno>
 8002c40:	2316      	movs	r3, #22
 8002c42:	e7f3      	b.n	8002c2c <_swilseek+0x14>
 8002c44:	2e01      	cmp	r6, #1
 8002c46:	d112      	bne.n	8002c6e <_swilseek+0x56>
 8002c48:	6843      	ldr	r3, [r0, #4]
 8002c4a:	18e4      	adds	r4, r4, r3
 8002c4c:	d4f6      	bmi.n	8002c3c <_swilseek+0x24>
 8002c4e:	682b      	ldr	r3, [r5, #0]
 8002c50:	260a      	movs	r6, #10
 8002c52:	e9cd 3400 	strd	r3, r4, [sp]
 8002c56:	466f      	mov	r7, sp
 8002c58:	4630      	mov	r0, r6
 8002c5a:	4639      	mov	r1, r7
 8002c5c:	beab      	bkpt	0x00ab
 8002c5e:	4606      	mov	r6, r0
 8002c60:	4630      	mov	r0, r6
 8002c62:	f7ff ff8f 	bl	8002b84 <checkerror>
 8002c66:	2800      	cmp	r0, #0
 8002c68:	dbe1      	blt.n	8002c2e <_swilseek+0x16>
 8002c6a:	606c      	str	r4, [r5, #4]
 8002c6c:	e7e1      	b.n	8002c32 <_swilseek+0x1a>
 8002c6e:	2e02      	cmp	r6, #2
 8002c70:	d1ed      	bne.n	8002c4e <_swilseek+0x36>
 8002c72:	6803      	ldr	r3, [r0, #0]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	260c      	movs	r6, #12
 8002c78:	466f      	mov	r7, sp
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	4639      	mov	r1, r7
 8002c7e:	beab      	bkpt	0x00ab
 8002c80:	4606      	mov	r6, r0
 8002c82:	4630      	mov	r0, r6
 8002c84:	f7ff ff7e 	bl	8002b84 <checkerror>
 8002c88:	1c43      	adds	r3, r0, #1
 8002c8a:	d0d0      	beq.n	8002c2e <_swilseek+0x16>
 8002c8c:	4404      	add	r4, r0
 8002c8e:	e7de      	b.n	8002c4e <_swilseek+0x36>

08002c90 <_lseek>:
 8002c90:	f7ff bfc2 	b.w	8002c18 <_swilseek>

08002c94 <_swiwrite>:
 8002c94:	b530      	push	{r4, r5, lr}
 8002c96:	b085      	sub	sp, #20
 8002c98:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002c9c:	9203      	str	r2, [sp, #12]
 8002c9e:	2405      	movs	r4, #5
 8002ca0:	ad01      	add	r5, sp, #4
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	beab      	bkpt	0x00ab
 8002ca8:	4604      	mov	r4, r0
 8002caa:	4620      	mov	r0, r4
 8002cac:	f7ff ff6a 	bl	8002b84 <checkerror>
 8002cb0:	b005      	add	sp, #20
 8002cb2:	bd30      	pop	{r4, r5, pc}

08002cb4 <_write>:
 8002cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cb6:	4615      	mov	r5, r2
 8002cb8:	9101      	str	r1, [sp, #4]
 8002cba:	f7ff ff49 	bl	8002b50 <findslot>
 8002cbe:	9901      	ldr	r1, [sp, #4]
 8002cc0:	4604      	mov	r4, r0
 8002cc2:	b930      	cbnz	r0, 8002cd2 <_write+0x1e>
 8002cc4:	f7fe fdea 	bl	800189c <__errno>
 8002cc8:	2309      	movs	r3, #9
 8002cca:	6003      	str	r3, [r0, #0]
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd0:	e012      	b.n	8002cf8 <_write+0x44>
 8002cd2:	6800      	ldr	r0, [r0, #0]
 8002cd4:	462a      	mov	r2, r5
 8002cd6:	f7ff ffdd 	bl	8002c94 <_swiwrite>
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	dbf6      	blt.n	8002ccc <_write+0x18>
 8002cde:	6862      	ldr	r2, [r4, #4]
 8002ce0:	1a2b      	subs	r3, r5, r0
 8002ce2:	441a      	add	r2, r3
 8002ce4:	42a8      	cmp	r0, r5
 8002ce6:	6062      	str	r2, [r4, #4]
 8002ce8:	d105      	bne.n	8002cf6 <_write+0x42>
 8002cea:	2000      	movs	r0, #0
 8002cec:	b003      	add	sp, #12
 8002cee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002cf2:	f7ff bf57 	b.w	8002ba4 <error>
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	b003      	add	sp, #12
 8002cfa:	bd30      	pop	{r4, r5, pc}

08002cfc <_swiclose>:
 8002cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cfe:	2402      	movs	r4, #2
 8002d00:	9001      	str	r0, [sp, #4]
 8002d02:	ad01      	add	r5, sp, #4
 8002d04:	4620      	mov	r0, r4
 8002d06:	4629      	mov	r1, r5
 8002d08:	beab      	bkpt	0x00ab
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f7ff ff39 	bl	8002b84 <checkerror>
 8002d12:	b003      	add	sp, #12
 8002d14:	bd30      	pop	{r4, r5, pc}
	...

08002d18 <_close>:
 8002d18:	b538      	push	{r3, r4, r5, lr}
 8002d1a:	4605      	mov	r5, r0
 8002d1c:	f7ff ff18 	bl	8002b50 <findslot>
 8002d20:	4604      	mov	r4, r0
 8002d22:	b930      	cbnz	r0, 8002d32 <_close+0x1a>
 8002d24:	f7fe fdba 	bl	800189c <__errno>
 8002d28:	2309      	movs	r3, #9
 8002d2a:	6003      	str	r3, [r0, #0]
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	bd38      	pop	{r3, r4, r5, pc}
 8002d32:	3d01      	subs	r5, #1
 8002d34:	2d01      	cmp	r5, #1
 8002d36:	d809      	bhi.n	8002d4c <_close+0x34>
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <_close+0x48>)
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d104      	bne.n	8002d4c <_close+0x34>
 8002d42:	f04f 33ff 	mov.w	r3, #4294967295
 8002d46:	6003      	str	r3, [r0, #0]
 8002d48:	2000      	movs	r0, #0
 8002d4a:	e7f1      	b.n	8002d30 <_close+0x18>
 8002d4c:	6820      	ldr	r0, [r4, #0]
 8002d4e:	f7ff ffd5 	bl	8002cfc <_swiclose>
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d1ec      	bne.n	8002d30 <_close+0x18>
 8002d56:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5a:	6023      	str	r3, [r4, #0]
 8002d5c:	e7e8      	b.n	8002d30 <_close+0x18>
 8002d5e:	bf00      	nop
 8002d60:	20000090 	.word	0x20000090

08002d64 <_swistat>:
 8002d64:	b570      	push	{r4, r5, r6, lr}
 8002d66:	460c      	mov	r4, r1
 8002d68:	f7ff fef2 	bl	8002b50 <findslot>
 8002d6c:	4605      	mov	r5, r0
 8002d6e:	b930      	cbnz	r0, 8002d7e <_swistat+0x1a>
 8002d70:	f7fe fd94 	bl	800189c <__errno>
 8002d74:	2309      	movs	r3, #9
 8002d76:	6003      	str	r3, [r0, #0]
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
 8002d7e:	6863      	ldr	r3, [r4, #4]
 8002d80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d84:	6063      	str	r3, [r4, #4]
 8002d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d8a:	64a3      	str	r3, [r4, #72]	; 0x48
 8002d8c:	260c      	movs	r6, #12
 8002d8e:	4630      	mov	r0, r6
 8002d90:	4629      	mov	r1, r5
 8002d92:	beab      	bkpt	0x00ab
 8002d94:	4605      	mov	r5, r0
 8002d96:	4628      	mov	r0, r5
 8002d98:	f7ff fef4 	bl	8002b84 <checkerror>
 8002d9c:	1c43      	adds	r3, r0, #1
 8002d9e:	bf1c      	itt	ne
 8002da0:	6120      	strne	r0, [r4, #16]
 8002da2:	2000      	movne	r0, #0
 8002da4:	e7ea      	b.n	8002d7c <_swistat+0x18>

08002da6 <_fstat>:
 8002da6:	460b      	mov	r3, r1
 8002da8:	b510      	push	{r4, lr}
 8002daa:	2100      	movs	r1, #0
 8002dac:	4604      	mov	r4, r0
 8002dae:	2258      	movs	r2, #88	; 0x58
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe fd9d 	bl	80018f0 <memset>
 8002db6:	4601      	mov	r1, r0
 8002db8:	4620      	mov	r0, r4
 8002dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dbe:	f7ff bfd1 	b.w	8002d64 <_swistat>

08002dc2 <_isatty>:
 8002dc2:	b570      	push	{r4, r5, r6, lr}
 8002dc4:	f7ff fec4 	bl	8002b50 <findslot>
 8002dc8:	2509      	movs	r5, #9
 8002dca:	4604      	mov	r4, r0
 8002dcc:	b920      	cbnz	r0, 8002dd8 <_isatty+0x16>
 8002dce:	f7fe fd65 	bl	800189c <__errno>
 8002dd2:	6005      	str	r5, [r0, #0]
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	bd70      	pop	{r4, r5, r6, pc}
 8002dd8:	4628      	mov	r0, r5
 8002dda:	4621      	mov	r1, r4
 8002ddc:	beab      	bkpt	0x00ab
 8002dde:	4604      	mov	r4, r0
 8002de0:	2c01      	cmp	r4, #1
 8002de2:	d0f7      	beq.n	8002dd4 <_isatty+0x12>
 8002de4:	f7fe fd5a 	bl	800189c <__errno>
 8002de8:	2400      	movs	r4, #0
 8002dea:	4605      	mov	r5, r0
 8002dec:	2613      	movs	r6, #19
 8002dee:	4630      	mov	r0, r6
 8002df0:	4621      	mov	r1, r4
 8002df2:	beab      	bkpt	0x00ab
 8002df4:	4606      	mov	r6, r0
 8002df6:	602e      	str	r6, [r5, #0]
 8002df8:	e7ec      	b.n	8002dd4 <_isatty+0x12>
	...

08002dfc <_init>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	bf00      	nop
 8002e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e02:	bc08      	pop	{r3}
 8002e04:	469e      	mov	lr, r3
 8002e06:	4770      	bx	lr

08002e08 <_fini>:
 8002e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0a:	bf00      	nop
 8002e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0e:	bc08      	pop	{r3}
 8002e10:	469e      	mov	lr, r3
 8002e12:	4770      	bx	lr
