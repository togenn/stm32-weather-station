
weather_station2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ba4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002d44  08002d44  00012d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e08  08002e08  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002e08  08002e08  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e08  08002e08  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e08  08002e08  00012e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e0c  08002e0c  00012e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000064  08002e74  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08002e74  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ff3  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001872  00000000  00000000  00027087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d8  00000000  00000000  00028900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002f0  00000000  00000000  00028cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010012  00000000  00000000  00028fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000574d  00000000  00000000  00038fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000550dd  00000000  00000000  0003e727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00093804  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001900  00000000  00000000  00093858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002d2c 	.word	0x08002d2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08002d2c 	.word	0x08002d2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <calculate_SYSCFG_values>:
 *  Created on: Nov 29, 2021
 *      Author: toni
 */
#include "EXTI_lib.h"

static void calculate_SYSCFG_values(uint8_t pin_num, uint8_t *buf) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]

	uint8_t SYSCFG_num = pin_num / 4;
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	089b      	lsrs	r3, r3, #2
 8000290:	73fb      	strb	r3, [r7, #15]
	uint8_t SYSCFG_pos = pin_num % 4 * 4;
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 0303 	and.w	r3, r3, #3
 8000298:	b2db      	uxtb	r3, r3
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	73bb      	strb	r3, [r7, #14]

	buf[0] = SYSCFG_num;
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	7bfa      	ldrb	r2, [r7, #15]
 80002a2:	701a      	strb	r2, [r3, #0]
	buf[1] = SYSCFG_pos;
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	3301      	adds	r3, #1
 80002a8:	7bba      	ldrb	r2, [r7, #14]
 80002aa:	701a      	strb	r2, [r3, #0]

}
 80002ac:	bf00      	nop
 80002ae:	3714      	adds	r7, #20
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <enable_EXTI>:

void enable_EXTI(uint8_t pin_num, uint8_t gpio, uint8_t edge) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
 80002c2:	460b      	mov	r3, r1
 80002c4:	71bb      	strb	r3, [r7, #6]
 80002c6:	4613      	mov	r3, r2
 80002c8:	717b      	strb	r3, [r7, #5]

	RCC->APB2ENR |= 1u << 14;
 80002ca:	4b2c      	ldr	r3, [pc, #176]	; (800037c <enable_EXTI+0xc4>)
 80002cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ce:	4a2b      	ldr	r2, [pc, #172]	; (800037c <enable_EXTI+0xc4>)
 80002d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002d4:	6453      	str	r3, [r2, #68]	; 0x44

	//enable correct port from SYSCFG register for EXTI
	uint8_t SYSCFG_values[2];
	calculate_SYSCFG_values(pin_num, SYSCFG_values);
 80002d6:	f107 020c 	add.w	r2, r7, #12
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	4611      	mov	r1, r2
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ffce 	bl	8000280 <calculate_SYSCFG_values>

	SYSCFG->EXTICR[SYSCFG_values[0]] |= (gpio << SYSCFG_values[1]);
 80002e4:	4a26      	ldr	r2, [pc, #152]	; (8000380 <enable_EXTI+0xc8>)
 80002e6:	7b3b      	ldrb	r3, [r7, #12]
 80002e8:	3302      	adds	r3, #2
 80002ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ee:	79ba      	ldrb	r2, [r7, #6]
 80002f0:	7b79      	ldrb	r1, [r7, #13]
 80002f2:	408a      	lsls	r2, r1
 80002f4:	4922      	ldr	r1, [pc, #136]	; (8000380 <enable_EXTI+0xc8>)
 80002f6:	7b38      	ldrb	r0, [r7, #12]
 80002f8:	431a      	orrs	r2, r3
 80002fa:	1c83      	adds	r3, r0, #2
 80002fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	switch (edge) {
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	2b02      	cmp	r3, #2
 8000304:	d006      	beq.n	8000314 <enable_EXTI+0x5c>
 8000306:	2b02      	cmp	r3, #2
 8000308:	dc2b      	bgt.n	8000362 <enable_EXTI+0xaa>
 800030a:	2b00      	cmp	r3, #0
 800030c:	d015      	beq.n	800033a <enable_EXTI+0x82>
 800030e:	2b01      	cmp	r3, #1
 8000310:	d01d      	beq.n	800034e <enable_EXTI+0x96>
 8000312:	e026      	b.n	8000362 <enable_EXTI+0xaa>
	case EXTI_REFE:
		EXTI->FTSR |= 1u << pin_num;
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <enable_EXTI+0xcc>)
 8000316:	68da      	ldr	r2, [r3, #12]
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	2101      	movs	r1, #1
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	4918      	ldr	r1, [pc, #96]	; (8000384 <enable_EXTI+0xcc>)
 8000322:	4313      	orrs	r3, r2
 8000324:	60cb      	str	r3, [r1, #12]
		EXTI->RTSR |= 1u << pin_num;
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <enable_EXTI+0xcc>)
 8000328:	689a      	ldr	r2, [r3, #8]
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	2101      	movs	r1, #1
 800032e:	fa01 f303 	lsl.w	r3, r1, r3
 8000332:	4914      	ldr	r1, [pc, #80]	; (8000384 <enable_EXTI+0xcc>)
 8000334:	4313      	orrs	r3, r2
 8000336:	608b      	str	r3, [r1, #8]
		break;
 8000338:	e013      	b.n	8000362 <enable_EXTI+0xaa>

	case EXTI_RE:
		EXTI->RTSR |= 1u << pin_num;
 800033a:	4b12      	ldr	r3, [pc, #72]	; (8000384 <enable_EXTI+0xcc>)
 800033c:	689a      	ldr	r2, [r3, #8]
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2101      	movs	r1, #1
 8000342:	fa01 f303 	lsl.w	r3, r1, r3
 8000346:	490f      	ldr	r1, [pc, #60]	; (8000384 <enable_EXTI+0xcc>)
 8000348:	4313      	orrs	r3, r2
 800034a:	608b      	str	r3, [r1, #8]
		break;
 800034c:	e009      	b.n	8000362 <enable_EXTI+0xaa>

	case EXTI_FE:
		EXTI->FTSR |= 1u << pin_num;
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <enable_EXTI+0xcc>)
 8000350:	68da      	ldr	r2, [r3, #12]
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2101      	movs	r1, #1
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	490a      	ldr	r1, [pc, #40]	; (8000384 <enable_EXTI+0xcc>)
 800035c:	4313      	orrs	r3, r2
 800035e:	60cb      	str	r3, [r1, #12]
		break;
 8000360:	bf00      	nop
	}

	EXTI->IMR |= 1u << pin_num;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <enable_EXTI+0xcc>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	2101      	movs	r1, #1
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	4905      	ldr	r1, [pc, #20]	; (8000384 <enable_EXTI+0xcc>)
 8000370:	4313      	orrs	r3, r2
 8000372:	600b      	str	r3, [r1, #0]

}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40023800 	.word	0x40023800
 8000380:	40013800 	.word	0x40013800
 8000384:	40013c00 	.word	0x40013c00

08000388 <disable_EXTI>:

void disable_EXTI(uint8_t pin_num) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	uint8_t SYSCFG_values[2];
	calculate_SYSCFG_values(pin_num, SYSCFG_values);
 8000392:	f107 020c 	add.w	r2, r7, #12
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	4611      	mov	r1, r2
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ff70 	bl	8000280 <calculate_SYSCFG_values>

	SYSCFG->EXTICR[SYSCFG_values[0]] &= ~(0xFu << SYSCFG_values[1]);
 80003a0:	4a18      	ldr	r2, [pc, #96]	; (8000404 <disable_EXTI+0x7c>)
 80003a2:	7b3b      	ldrb	r3, [r7, #12]
 80003a4:	3302      	adds	r3, #2
 80003a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003aa:	7b7b      	ldrb	r3, [r7, #13]
 80003ac:	4619      	mov	r1, r3
 80003ae:	230f      	movs	r3, #15
 80003b0:	408b      	lsls	r3, r1
 80003b2:	43db      	mvns	r3, r3
 80003b4:	4913      	ldr	r1, [pc, #76]	; (8000404 <disable_EXTI+0x7c>)
 80003b6:	7b38      	ldrb	r0, [r7, #12]
 80003b8:	401a      	ands	r2, r3
 80003ba:	1c83      	adds	r3, r0, #2
 80003bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	EXTI->FTSR &= ~(1u << pin_num);
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <disable_EXTI+0x80>)
 80003c2:	68da      	ldr	r2, [r3, #12]
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	2101      	movs	r1, #1
 80003c8:	fa01 f303 	lsl.w	r3, r1, r3
 80003cc:	43db      	mvns	r3, r3
 80003ce:	490e      	ldr	r1, [pc, #56]	; (8000408 <disable_EXTI+0x80>)
 80003d0:	4013      	ands	r3, r2
 80003d2:	60cb      	str	r3, [r1, #12]
	EXTI->RTSR &= ~(1u << pin_num);
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <disable_EXTI+0x80>)
 80003d6:	689a      	ldr	r2, [r3, #8]
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	2101      	movs	r1, #1
 80003dc:	fa01 f303 	lsl.w	r3, r1, r3
 80003e0:	43db      	mvns	r3, r3
 80003e2:	4909      	ldr	r1, [pc, #36]	; (8000408 <disable_EXTI+0x80>)
 80003e4:	4013      	ands	r3, r2
 80003e6:	608b      	str	r3, [r1, #8]

	EXTI->IMR &= ~(1u << pin_num);
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <disable_EXTI+0x80>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	2101      	movs	r1, #1
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	43db      	mvns	r3, r3
 80003f6:	4904      	ldr	r1, [pc, #16]	; (8000408 <disable_EXTI+0x80>)
 80003f8:	4013      	ands	r3, r2
 80003fa:	600b      	str	r3, [r1, #0]



}
 80003fc:	bf00      	nop
 80003fe:	3710      	adds	r7, #16
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40013800 	.word	0x40013800
 8000408:	40013c00 	.word	0x40013c00

0800040c <enable_GPIOx_clock>:
#include "GPIO_Lib.h"

static void enable_GPIOx_clock(GPIO_TypeDef *gpio) {
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]

	if (gpio == GPIOA) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a23      	ldr	r2, [pc, #140]	; (80004a4 <enable_GPIOx_clock+0x98>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <enable_GPIOx_clock+0x1e>

		RCC->AHB1ENR |= GPIOA_CLOCK_EN;
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	6313      	str	r3, [r2, #48]	; 0x30

	} else if (gpio == GPIOH) {

		RCC->AHB1ENR |= GPIOH_CLOCK_EN;
	}
}
 8000428:	e035      	b.n	8000496 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOB) {
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a1f      	ldr	r2, [pc, #124]	; (80004ac <enable_GPIOx_clock+0xa0>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <enable_GPIOx_clock+0x34>
		RCC->AHB1ENR |= GPIOB_CLOCK_EN;
 8000432:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a1c      	ldr	r2, [pc, #112]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000438:	f043 0302 	orr.w	r3, r3, #2
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043e:	e02a      	b.n	8000496 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOC) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a1b      	ldr	r2, [pc, #108]	; (80004b0 <enable_GPIOx_clock+0xa4>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <enable_GPIOx_clock+0x4a>
		RCC->AHB1ENR |= GPIOC_CLOCK_EN;
 8000448:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a16      	ldr	r2, [pc, #88]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 800044e:	f043 0304 	orr.w	r3, r3, #4
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000454:	e01f      	b.n	8000496 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOD) {
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a16      	ldr	r2, [pc, #88]	; (80004b4 <enable_GPIOx_clock+0xa8>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <enable_GPIOx_clock+0x60>
		RCC->AHB1ENR |= GPIOD_CLOCK_EN;
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a11      	ldr	r2, [pc, #68]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000464:	f043 0308 	orr.w	r3, r3, #8
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046a:	e014      	b.n	8000496 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOE) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <enable_GPIOx_clock+0xac>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <enable_GPIOx_clock+0x76>
		RCC->AHB1ENR |= GPIOE_CLOCK_EN;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a0b      	ldr	r2, [pc, #44]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 800047a:	f043 0310 	orr.w	r3, r3, #16
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000480:	e009      	b.n	8000496 <enable_GPIOx_clock+0x8a>
	} else if (gpio == GPIOH) {
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <enable_GPIOx_clock+0xb0>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d105      	bne.n	8000496 <enable_GPIOx_clock+0x8a>
		RCC->AHB1ENR |= GPIOH_CLOCK_EN;
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048e:	4a06      	ldr	r2, [pc, #24]	; (80004a8 <enable_GPIOx_clock+0x9c>)
 8000490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000494:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40020000 	.word	0x40020000
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40020400 	.word	0x40020400
 80004b0:	40020800 	.word	0x40020800
 80004b4:	40020c00 	.word	0x40020c00
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40021c00 	.word	0x40021c00

080004c0 <init_pin>:

void init_pin(pin_type *pin) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]

	enable_GPIOx_clock(pin->gpio);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff9d 	bl	800040c <enable_GPIOx_clock>

	change_mode(pin);
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f000 f822 	bl	800051c <change_mode>

	uint8_t reg_H_L = pin->pin_num < 8 ? 0 : 1;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	791b      	ldrb	r3, [r3, #4]
 80004dc:	2b07      	cmp	r3, #7
 80004de:	bf8c      	ite	hi
 80004e0:	2301      	movhi	r3, #1
 80004e2:	2300      	movls	r3, #0
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	73fb      	strb	r3, [r7, #15]
	pin->gpio->AFR[reg_H_L] |= pin->AF_num << (pin->pin_num * 4);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	7bfa      	ldrb	r2, [r7, #15]
 80004ee:	3208      	adds	r2, #8
 80004f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	7a1b      	ldrb	r3, [r3, #8]
 80004f8:	461a      	mov	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	4618      	mov	r0, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	7bfa      	ldrb	r2, [r7, #15]
 800050c:	4301      	orrs	r1, r0
 800050e:	3208      	adds	r2, #8
 8000510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000514:	bf00      	nop
 8000516:	3710      	adds	r7, #16
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <change_mode>:

void change_mode(pin_type *pin) {
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	pin->gpio->MODER &= ~(3u << ((pin->pin_num * 2)));
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	6819      	ldr	r1, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	791b      	ldrb	r3, [r3, #4]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	2203      	movs	r2, #3
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	43da      	mvns	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	400a      	ands	r2, r1
 800053e:	601a      	str	r2, [r3, #0]
	pin->gpio->PUPDR &= ~(3u << ((pin->pin_num * 2)));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	68d9      	ldr	r1, [r3, #12]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	791b      	ldrb	r3, [r3, #4]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	2203      	movs	r2, #3
 800054e:	fa02 f303 	lsl.w	r3, r2, r3
 8000552:	43da      	mvns	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	400a      	ands	r2, r1
 800055a:	60da      	str	r2, [r3, #12]
	pin->gpio->OTYPER &= ~(1u << pin->pin_num);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	6859      	ldr	r1, [r3, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	461a      	mov	r2, r3
 8000568:	2301      	movs	r3, #1
 800056a:	4093      	lsls	r3, r2
 800056c:	43da      	mvns	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	400a      	ands	r2, r1
 8000574:	605a      	str	r2, [r3, #4]

	pin->gpio->MODER |= pin->mode << (pin->pin_num * 2);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	795b      	ldrb	r3, [r3, #5]
 8000580:	4619      	mov	r1, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	4619      	mov	r1, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	430a      	orrs	r2, r1
 8000594:	601a      	str	r2, [r3, #0]
	pin->gpio->OTYPER |= pin->PP_OD << pin->pin_num;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	685a      	ldr	r2, [r3, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	799b      	ldrb	r3, [r3, #6]
 80005a0:	4619      	mov	r1, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	430a      	orrs	r2, r1
 80005b2:	605a      	str	r2, [r3, #4]
	pin->gpio->PUPDR |= pin->push_pull << (pin->pin_num * 2);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	68da      	ldr	r2, [r3, #12]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	79db      	ldrb	r3, [r3, #7]
 80005be:	4619      	mov	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	430a      	orrs	r2, r1
 80005d2:	60da      	str	r2, [r3, #12]

}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <read_pin>:
	}

	return state;
}

pin_state read_pin(pin_type *pin) {
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	uint32_t state = (pin->gpio->IDR >> pin->pin_num) & 1u;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	691b      	ldr	r3, [r3, #16]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	7912      	ldrb	r2, [r2, #4]
 80005f2:	40d3      	lsrs	r3, r2
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	60fb      	str	r3, [r7, #12]

	if (state == 1) {
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d101      	bne.n	8000604 <read_pin+0x24>
		return HIGH;
 8000600:	2301      	movs	r3, #1
 8000602:	e000      	b.n	8000606 <read_pin+0x26>
	}

	return LOW;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <I2C_enable_clock>:
 */
#include "I2C_lib.h"
#include "clocks_lib.h"
#include "NVIC_lib.h"

static void I2C_enable_clock(I2C_handle_type *handle) {
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

	if (handle->peripheral == I2C1) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a13      	ldr	r2, [pc, #76]	; (8000670 <I2C_enable_clock+0x5c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <I2C_enable_clock+0x20>
		RCC->APB1ENR |= 1u << 21;
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <I2C_enable_clock+0x60>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <I2C_enable_clock+0x60>)
 800062c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000630:	6413      	str	r3, [r2, #64]	; 0x40
	} else if (handle->peripheral == I2C2) {
		RCC->APB1ENR |= 1u << 22;
	} else if (handle->peripheral == I2C3) {
		RCC->APB1ENR |= 1u << 23;
	}
}
 8000632:	e016      	b.n	8000662 <I2C_enable_clock+0x4e>
	} else if (handle->peripheral == I2C2) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <I2C_enable_clock+0x64>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d106      	bne.n	800064c <I2C_enable_clock+0x38>
		RCC->APB1ENR |= 1u << 22;
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <I2C_enable_clock+0x60>)
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <I2C_enable_clock+0x60>)
 8000644:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000648:	6413      	str	r3, [r2, #64]	; 0x40
}
 800064a:	e00a      	b.n	8000662 <I2C_enable_clock+0x4e>
	} else if (handle->peripheral == I2C3) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a0a      	ldr	r2, [pc, #40]	; (800067c <I2C_enable_clock+0x68>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d105      	bne.n	8000662 <I2C_enable_clock+0x4e>
		RCC->APB1ENR |= 1u << 23;
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <I2C_enable_clock+0x60>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a06      	ldr	r2, [pc, #24]	; (8000674 <I2C_enable_clock+0x60>)
 800065c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40005400 	.word	0x40005400
 8000674:	40023800 	.word	0x40023800
 8000678:	40005800 	.word	0x40005800
 800067c:	40005c00 	.word	0x40005c00

08000680 <I2C_enable_IR>:

static void I2C_enable_IR(I2C_handle_type *handle) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

	if (handle->peripheral == I2C1) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <I2C_enable_IR+0x58>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d106      	bne.n	80006a0 <I2C_enable_IR+0x20>
		enable_IR(I2C1_EV_IRQn);
 8000692:	201f      	movs	r0, #31
 8000694:	f000 fa42 	bl	8000b1c <enable_IR>
		enable_IR(I2C1_ER_IRQn);
 8000698:	2020      	movs	r0, #32
 800069a:	f000 fa3f 	bl	8000b1c <enable_IR>
		enable_IR(I2C2_ER_IRQn);
	} else if (handle->peripheral == I2C3) {
		enable_IR(I2C3_EV_IRQn);
		enable_IR(I2C3_ER_IRQn);
	}
}
 800069e:	e016      	b.n	80006ce <I2C_enable_IR+0x4e>
	} else if (handle->peripheral == I2C2) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <I2C_enable_IR+0x5c>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <I2C_enable_IR+0x38>
		enable_IR(I2C2_EV_IRQn);
 80006aa:	2021      	movs	r0, #33	; 0x21
 80006ac:	f000 fa36 	bl	8000b1c <enable_IR>
		enable_IR(I2C2_ER_IRQn);
 80006b0:	2022      	movs	r0, #34	; 0x22
 80006b2:	f000 fa33 	bl	8000b1c <enable_IR>
}
 80006b6:	e00a      	b.n	80006ce <I2C_enable_IR+0x4e>
	} else if (handle->peripheral == I2C3) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <I2C_enable_IR+0x60>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d105      	bne.n	80006ce <I2C_enable_IR+0x4e>
		enable_IR(I2C3_EV_IRQn);
 80006c2:	2048      	movs	r0, #72	; 0x48
 80006c4:	f000 fa2a 	bl	8000b1c <enable_IR>
		enable_IR(I2C3_ER_IRQn);
 80006c8:	2049      	movs	r0, #73	; 0x49
 80006ca:	f000 fa27 	bl	8000b1c <enable_IR>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40005400 	.word	0x40005400
 80006dc:	40005800 	.word	0x40005800
 80006e0:	40005c00 	.word	0x40005c00

080006e4 <I2C_init>:

void I2C_init(I2C_handle_type *handle) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

	I2C_pins_init();
 80006ec:	f000 ff2a 	bl	8001544 <I2C_pins_init>
	I2C_enable_clock(handle);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ff8f 	bl	8000614 <I2C_enable_clock>
	I2C_enable_IR(handle);
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ffc2 	bl	8000680 <I2C_enable_IR>

	//Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
	uint32_t APB1_clk = get_APB1_clock();
 80006fc:	f000 fd56 	bl	80011ac <get_APB1_clock>
 8000700:	60f8      	str	r0, [r7, #12]
	uint8_t APB1_clk_MHz = APB1_clk / 1000000;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	4a15      	ldr	r2, [pc, #84]	; (800075c <I2C_init+0x78>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	0c9b      	lsrs	r3, r3, #18
 800070c:	72fb      	strb	r3, [r7, #11]
	handle->peripheral->CR2 |= 0x1Fu & APB1_clk_MHz;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	6859      	ldr	r1, [r3, #4]
 8000714:	7afb      	ldrb	r3, [r7, #11]
 8000716:	f003 021f 	and.w	r2, r3, #31
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	430a      	orrs	r2, r1
 8000720:	605a      	str	r2, [r3, #4]

	//Configure the clock control registers
	uint16_t ccr = APB1_clk / 200000;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	099b      	lsrs	r3, r3, #6
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <I2C_init+0x7c>)
 8000728:	fba2 2303 	umull	r2, r3, r2, r3
 800072c:	099b      	lsrs	r3, r3, #6
 800072e:	813b      	strh	r3, [r7, #8]
	handle->peripheral->CCR = ccr;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	893a      	ldrh	r2, [r7, #8]
 8000736:	61da      	str	r2, [r3, #28]

	//Configure the rise time register
	handle->peripheral->TRISE = ccr + 1;
 8000738:	893b      	ldrh	r3, [r7, #8]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	621a      	str	r2, [r3, #32]

	//enable interrupts
	handle->peripheral->CR2 |= 7u << 8;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8000750:	605a      	str	r2, [r3, #4]
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	431bde83 	.word	0x431bde83
 8000760:	053e2d63 	.word	0x053e2d63

08000764 <start_communication>:

static uint8_t start_communication(I2C_handle_type *handle) {
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	if (handle->status != I2C_STATUS_IDLE) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	7c1b      	ldrb	r3, [r3, #16]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <start_communication+0x14>
		return 1;
 8000774:	2301      	movs	r3, #1
 8000776:	e018      	b.n	80007aa <start_communication+0x46>
	}

	//enable the peripheral
	handle->peripheral->CR1 &= ~1u;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f022 0201 	bic.w	r2, r2, #1
 8000786:	601a      	str	r2, [r3, #0]
	handle->peripheral->CR1 |= 1u;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f042 0201 	orr.w	r2, r2, #1
 8000796:	601a      	str	r2, [r3, #0]

	//generate a Start condition
	handle->peripheral->CR1 |= 1u << 8;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007a6:	601a      	str	r2, [r3, #0]

	return 0;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <I2C_transmit_data>:

uint8_t I2C_transmit_data(I2C_handle_type *handle) {
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]

	if (start_communication(handle)) {
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ffd0 	bl	8000764 <start_communication>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <I2C_transmit_data+0x18>
		return 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e003      	b.n	80007d6 <I2C_transmit_data+0x20>
	}

	handle->status = I2C_STATUS_TRANSMITTING;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2201      	movs	r2, #1
 80007d2:	741a      	strb	r2, [r3, #16]

	return 0;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <I2C_transmit_data_and_wait>:

uint8_t I2C_transmit_data_and_wait(I2C_handle_type *handle) {
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]

	if (I2C_transmit_data(handle)) {
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ffe5 	bl	80007b6 <I2C_transmit_data>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <I2C_transmit_data_and_wait+0x18>
		return 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e005      	b.n	8000802 <I2C_transmit_data_and_wait+0x24>
	}

	while (handle->status != I2C_STATUS_IDLE)
 80007f6:	bf00      	nop
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7c1b      	ldrb	r3, [r3, #16]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1fb      	bne.n	80007f8 <I2C_transmit_data_and_wait+0x1a>
		;

	return 0;
 8000800:	2300      	movs	r3, #0

}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <handle_start_condition>:
		;

	return 0;
}

static void handle_start_condition(I2C_handle_type *handle) {
 800080a:	b480      	push	{r7}
 800080c:	b085      	sub	sp, #20
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]

	if (handle->addressing_mode == I2C_7_BIT_ADDRESSING) {
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d106      	bne.n	8000828 <handle_start_condition+0x1e>

		handle->peripheral->DR = handle->slave_address << 1;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	88db      	ldrh	r3, [r3, #6]
 800081e:	005a      	lsls	r2, r3, #1
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	611a      	str	r2, [r3, #16]

		header |= (0b11 << 1) & bits_9_8;

		handle->peripheral->DR = header;
	}
}
 8000826:	e011      	b.n	800084c <handle_start_condition+0x42>
		uint8_t header = 0xF0;
 8000828:	23f0      	movs	r3, #240	; 0xf0
 800082a:	73fb      	strb	r3, [r7, #15]
		uint8_t bits_9_8 = handle->slave_address >> 8;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	88db      	ldrh	r3, [r3, #6]
 8000830:	0a1b      	lsrs	r3, r3, #8
 8000832:	b29b      	uxth	r3, r3
 8000834:	73bb      	strb	r3, [r7, #14]
		header |= (0b11 << 1) & bits_9_8;
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	f003 0306 	and.w	r3, r3, #6
 800083c:	b2da      	uxtb	r2, r3
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	4313      	orrs	r3, r2
 8000842:	73fb      	strb	r3, [r7, #15]
		handle->peripheral->DR = header;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	7bfa      	ldrb	r2, [r7, #15]
 800084a:	611a      	str	r2, [r3, #16]
}
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <handle_transmitting>:

static void handle_transmitting(I2C_handle_type *handle) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

	if (handle->peripheral->SR1 & 1u) {
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	2b00      	cmp	r3, #0
 800086c:	d003      	beq.n	8000876 <handle_transmitting+0x1e>
		//start condition
		handle_start_condition(handle);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ffcb 	bl	800080a <handle_start_condition>

			handle->status = I2C_STATUS_IDLE;

		}
	}
}
 8000874:	e03a      	b.n	80008ec <handle_transmitting+0x94>
	} else if (handle->peripheral->SR1 & (1u << 3)) {
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	f003 0308 	and.w	r3, r3, #8
 8000880:	2b00      	cmp	r3, #0
 8000882:	d006      	beq.n	8000892 <handle_transmitting+0x3a>
		handle->peripheral->DR = handle->slave_address << 1;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	88db      	ldrh	r3, [r3, #6]
 8000888:	005a      	lsls	r2, r3, #1
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	611a      	str	r2, [r3, #16]
}
 8000890:	e02c      	b.n	80008ec <handle_transmitting+0x94>
	} else if (handle->peripheral->SR1 & 2u) {
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	f003 0302 	and.w	r3, r3, #2
 800089c:	2b00      	cmp	r3, #0
 800089e:	d003      	beq.n	80008a8 <handle_transmitting+0x50>
		(void) handle->peripheral->SR2;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	699b      	ldr	r3, [r3, #24]
}
 80008a6:	e021      	b.n	80008ec <handle_transmitting+0x94>
	} else if (handle->peripheral->SR1 & (1u << 7)) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d01a      	beq.n	80008ec <handle_transmitting+0x94>
		handle->peripheral->DR = *(handle->data++);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	1c59      	adds	r1, r3, #1
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	6091      	str	r1, [r2, #8]
 80008c0:	781a      	ldrb	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	611a      	str	r2, [r3, #16]
		if (handle->data_len-- == 0) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	1e59      	subs	r1, r3, #1
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	60d1      	str	r1, [r2, #12]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10a      	bne.n	80008ec <handle_transmitting+0x94>
			handle->peripheral->CR1 |= 1u << 9;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008e4:	601a      	str	r2, [r3, #0]
			handle->status = I2C_STATUS_IDLE;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	741a      	strb	r2, [r3, #16]
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <handle_receiving>:

static void handle_receiving(I2C_handle_type *handle) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

	static uint8_t repeated_start = 0;

	if (handle->peripheral->SR1 & 1u) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d01d      	beq.n	8000946 <handle_receiving+0x52>
		//start condition
		if (!repeated_start) {
 800090a:	4b4c      	ldr	r3, [pc, #304]	; (8000a3c <handle_receiving+0x148>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d103      	bne.n	800091a <handle_receiving+0x26>
			handle_start_condition(handle);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff ff79 	bl	800080a <handle_start_condition>

			handle->status = I2C_STATUS_IDLE;

		}
	}
}
 8000918:	e08c      	b.n	8000a34 <handle_receiving+0x140>
			uint8_t header = 0xF0;
 800091a:	23f0      	movs	r3, #240	; 0xf0
 800091c:	73fb      	strb	r3, [r7, #15]
			uint8_t bits_9_8 = handle->slave_address >> 8;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	88db      	ldrh	r3, [r3, #6]
 8000922:	0a1b      	lsrs	r3, r3, #8
 8000924:	b29b      	uxth	r3, r3
 8000926:	73bb      	strb	r3, [r7, #14]
			header |= ((0b11 << 1) & bits_9_8) | 1u;
 8000928:	7bbb      	ldrb	r3, [r7, #14]
 800092a:	f003 0306 	and.w	r3, r3, #6
 800092e:	b2da      	uxtb	r2, r3
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	4313      	orrs	r3, r2
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]
			handle->peripheral->DR = header;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	7bfa      	ldrb	r2, [r7, #15]
 8000942:	611a      	str	r2, [r3, #16]
}
 8000944:	e076      	b.n	8000a34 <handle_receiving+0x140>
	} else if (handle->peripheral->SR1 & (1u << 3)) {
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	2b00      	cmp	r3, #0
 8000952:	d006      	beq.n	8000962 <handle_receiving+0x6e>
		handle->peripheral->DR = handle->slave_address << 1;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	88db      	ldrh	r3, [r3, #6]
 8000958:	005a      	lsls	r2, r3, #1
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	611a      	str	r2, [r3, #16]
}
 8000960:	e068      	b.n	8000a34 <handle_receiving+0x140>
	} else if (handle->peripheral->SR1 & 2u) {
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	f003 0302 	and.w	r3, r3, #2
 800096c:	2b00      	cmp	r3, #0
 800096e:	d031      	beq.n	80009d4 <handle_receiving+0xe0>
		if (!repeated_start
 8000970:	4b32      	ldr	r3, [pc, #200]	; (8000a3c <handle_receiving+0x148>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d10f      	bne.n	8000998 <handle_receiving+0xa4>
				&& (handle->addressing_mode == I2C_10_BIT_ADDRESSING)) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	791b      	ldrb	r3, [r3, #4]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d10b      	bne.n	8000998 <handle_receiving+0xa4>
			handle->peripheral->CR1 |= 1u << 8;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800098e:	601a      	str	r2, [r3, #0]
			repeated_start = 1;
 8000990:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <handle_receiving+0x148>)
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	e019      	b.n	80009cc <handle_receiving+0xd8>
		} else if (handle->data_len == 1) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d115      	bne.n	80009cc <handle_receiving+0xd8>
			handle->peripheral->CR1 &= ~(1u << 10);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009ae:	601a      	str	r2, [r3, #0]
			handle->peripheral->CR1 |= 1u << 9;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009be:	601a      	str	r2, [r3, #0]
			repeated_start = 0;
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <handle_receiving+0x148>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
			handle->status = I2C_STATUS_IDLE;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2200      	movs	r2, #0
 80009ca:	741a      	strb	r2, [r3, #16]
		(void) handle->peripheral->SR2;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	699b      	ldr	r3, [r3, #24]
}
 80009d2:	e02f      	b.n	8000a34 <handle_receiving+0x140>
	} else if (handle->peripheral->SR1 & (1u << 6)) {
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d028      	beq.n	8000a34 <handle_receiving+0x140>
		*(handle->data++) = handle->peripheral->DR;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	6918      	ldr	r0, [r3, #16]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	1c59      	adds	r1, r3, #1
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	6091      	str	r1, [r2, #8]
 80009f2:	b2c2      	uxtb	r2, r0
 80009f4:	701a      	strb	r2, [r3, #0]
		if (--handle->data_len == 1) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	1e5a      	subs	r2, r3, #1
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d115      	bne.n	8000a34 <handle_receiving+0x140>
			handle->peripheral->CR1 &= ~(1u << 10);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a16:	601a      	str	r2, [r3, #0]
			handle->peripheral->CR1 |= 1u << 9;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a26:	601a      	str	r2, [r3, #0]
			repeated_start = 0;
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <handle_receiving+0x148>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
			handle->status = I2C_STATUS_IDLE;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	741a      	strb	r2, [r3, #16]
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000080 	.word	0x20000080

08000a40 <I2C_handle_EV>:

void I2C_handle_EV(I2C_handle_type *handle) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

	if (handle->status == I2C_STATUS_TRANSMITTING) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7c1b      	ldrb	r3, [r3, #16]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d103      	bne.n	8000a58 <I2C_handle_EV+0x18>
		handle_transmitting(handle);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ff01 	bl	8000858 <handle_transmitting>

	} else if (handle->status == I2C_STATUS_RECEIVING) {
		handle_receiving(handle);
	}

}
 8000a56:	e006      	b.n	8000a66 <I2C_handle_EV+0x26>
	} else if (handle->status == I2C_STATUS_RECEIVING) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	7c1b      	ldrb	r3, [r3, #16]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d102      	bne.n	8000a66 <I2C_handle_EV+0x26>
		handle_receiving(handle);
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ff47 	bl	80008f4 <handle_receiving>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <I2C_handle_ER>:

uint8_t I2C_handle_ER(I2C_handle_type *handle) {
 8000a6e:	b480      	push	{r7}
 8000a70:	b085      	sub	sp, #20
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
	uint8_t error_code;

	if (handle->peripheral->SR1 & (1u << 8)) {
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d002      	beq.n	8000a8a <I2C_handle_ER+0x1c>
		error_code = 8;
 8000a84:	2308      	movs	r3, #8
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	e01c      	b.n	8000ac4 <I2C_handle_ER+0x56>
	} else if (handle->peripheral->SR1 & (1u << 10)) {
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <I2C_handle_ER+0x30>
		error_code = 10;
 8000a98:	230a      	movs	r3, #10
 8000a9a:	73fb      	strb	r3, [r7, #15]
 8000a9c:	e012      	b.n	8000ac4 <I2C_handle_ER+0x56>
	} else if (handle->peripheral->SR1 & (1u << 11)) {
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <I2C_handle_ER+0x44>
		error_code = 11;
 8000aac:	230b      	movs	r3, #11
 8000aae:	73fb      	strb	r3, [r7, #15]
 8000ab0:	e008      	b.n	8000ac4 <I2C_handle_ER+0x56>
	} else if (handle->peripheral->SR1 & (1u << 14)) {
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <I2C_handle_ER+0x56>
		error_code = 14;
 8000ac0:	230e      	movs	r3, #14
 8000ac2:	73fb      	strb	r3, [r7, #15]
	}

	handle->peripheral->CR1 &= ~1u;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f022 0201 	bic.w	r2, r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
	handle->status = I2C_STATUS_IDLE;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	741a      	strb	r2, [r3, #16]

	return error_code;
 8000ada:	7bfb      	ldrb	r3, [r7, #15]

}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <calculate_ISER_values>:
#include "NVIC_lib.h"
#include "stm32f4xx.h"

static void calculate_ISER_values(uint8_t IRQn, uint8_t *buf) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]

	uint8_t ISER_num = IRQn / 32;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	095b      	lsrs	r3, r3, #5
 8000af8:	73fb      	strb	r3, [r7, #15]
	uint8_t ISER_pos = IRQn % 32;
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 031f 	and.w	r3, r3, #31
 8000b00:	73bb      	strb	r3, [r7, #14]

	buf[0] = ISER_num;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	7bfa      	ldrb	r2, [r7, #15]
 8000b06:	701a      	strb	r2, [r3, #0]
	buf[1] = ISER_pos;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	7bba      	ldrb	r2, [r7, #14]
 8000b0e:	701a      	strb	r2, [r3, #0]

}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <enable_IR>:

void enable_IR(uint8_t IRQn) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]

	uint8_t ISER_values[2];
	calculate_ISER_values(IRQn, ISER_values);
 8000b26:	f107 020c 	add.w	r2, r7, #12
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ffda 	bl	8000ae8 <calculate_ISER_values>

	NVIC->ISER[ISER_values[0]] |= 1u << ISER_values[1];
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <enable_IR+0x3c>)
 8000b36:	7b3a      	ldrb	r2, [r7, #12]
 8000b38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b3c:	7b7b      	ldrb	r3, [r7, #13]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	2301      	movs	r3, #1
 8000b42:	408b      	lsls	r3, r1
 8000b44:	4904      	ldr	r1, [pc, #16]	; (8000b58 <enable_IR+0x3c>)
 8000b46:	7b38      	ldrb	r0, [r7, #12]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	e000e100 	.word	0xe000e100

08000b5c <bin2bcd>:
 */

#include "RTC.h"
#include "stm32f4xx.h"

static uint16_t bin2bcd(uint8_t bin) {
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	uint8_t digit;
	uint8_t shift = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	73fb      	strb	r3, [r7, #15]
	uint16_t bcd = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	81bb      	strh	r3, [r7, #12]

	while (bin) {
 8000b6e:	e01d      	b.n	8000bac <bin2bcd+0x50>
		digit = bin % 10;
 8000b70:	79fa      	ldrb	r2, [r7, #7]
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <bin2bcd+0x64>)
 8000b74:	fba3 1302 	umull	r1, r3, r3, r2
 8000b78:	08d9      	lsrs	r1, r3, #3
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	440b      	add	r3, r1
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	72fb      	strb	r3, [r7, #11]
		bin /= 10;
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <bin2bcd+0x64>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	08db      	lsrs	r3, r3, #3
 8000b90:	71fb      	strb	r3, [r7, #7]
		bcd |= (0xFu & digit) << (4 * shift++);
 8000b92:	7afb      	ldrb	r3, [r7, #11]
 8000b94:	f003 020f 	and.w	r2, r3, #15
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	1c59      	adds	r1, r3, #1
 8000b9c:	73f9      	strb	r1, [r7, #15]
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	89bb      	ldrh	r3, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	81bb      	strh	r3, [r7, #12]
	while (bin) {
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1de      	bne.n	8000b70 <bin2bcd+0x14>
	}

	return bcd;
 8000bb2:	89bb      	ldrh	r3, [r7, #12]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	cccccccd 	.word	0xcccccccd

08000bc4 <RTC_init>:
	}

	return bin;
}

void RTC_init(date_time_type *time) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= 1u << 28;
 8000bcc:	4b53      	ldr	r3, [pc, #332]	; (8000d1c <RTC_init+0x158>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a52      	ldr	r2, [pc, #328]	; (8000d1c <RTC_init+0x158>)
 8000bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= 1u << 8;
 8000bd8:	4b51      	ldr	r3, [pc, #324]	; (8000d20 <RTC_init+0x15c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a50      	ldr	r2, [pc, #320]	; (8000d20 <RTC_init+0x15c>)
 8000bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be2:	6013      	str	r3, [r2, #0]
	RCC->BDCR |= 1u << 15;
 8000be4:	4b4d      	ldr	r3, [pc, #308]	; (8000d1c <RTC_init+0x158>)
 8000be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000be8:	4a4c      	ldr	r2, [pc, #304]	; (8000d1c <RTC_init+0x158>)
 8000bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bee:	6713      	str	r3, [r2, #112]	; 0x70

	//unlock the write protection
	RTC->WPR = 0xCAu;
 8000bf0:	4b4c      	ldr	r3, [pc, #304]	; (8000d24 <RTC_init+0x160>)
 8000bf2:	22ca      	movs	r2, #202	; 0xca
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53u;
 8000bf6:	4b4b      	ldr	r3, [pc, #300]	; (8000d24 <RTC_init+0x160>)
 8000bf8:	2253      	movs	r2, #83	; 0x53
 8000bfa:	625a      	str	r2, [r3, #36]	; 0x24

	//configure LSE clock for RTC
	RCC->BDCR |= 1u;
 8000bfc:	4b47      	ldr	r3, [pc, #284]	; (8000d1c <RTC_init+0x158>)
 8000bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c00:	4a46      	ldr	r2, [pc, #280]	; (8000d1c <RTC_init+0x158>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6713      	str	r3, [r2, #112]	; 0x70
	while (!(RCC->BDCR & 2u));
 8000c08:	bf00      	nop
 8000c0a:	4b44      	ldr	r3, [pc, #272]	; (8000d1c <RTC_init+0x158>)
 8000c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0f9      	beq.n	8000c0a <RTC_init+0x46>

	RCC->BDCR |= 1u << 8;
 8000c16:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <RTC_init+0x158>)
 8000c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c1a:	4a40      	ldr	r2, [pc, #256]	; (8000d1c <RTC_init+0x158>)
 8000c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c20:	6713      	str	r3, [r2, #112]	; 0x70

	//Set INIT bit to 1 in the RTC_ISR register to enter initialization mode
	RTC->ISR |= 1u << 7;
 8000c22:	4b40      	ldr	r3, [pc, #256]	; (8000d24 <RTC_init+0x160>)
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	4a3f      	ldr	r2, [pc, #252]	; (8000d24 <RTC_init+0x160>)
 8000c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2c:	60d3      	str	r3, [r2, #12]

	//Poll INITF bit of in the RTC_ISR register. The initialization phase mode is entered when
	//INITF is set to 1
	while (!(RTC->ISR & (1u << 6)))
 8000c2e:	bf00      	nop
 8000c30:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <RTC_init+0x160>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0f9      	beq.n	8000c30 <RTC_init+0x6c>
		;

	//configure date and time
	uint32_t time_tmp = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
	uint32_t date_tmp = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]

	time_tmp |= 0x7Fu & bin2bcd(time->seconds);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff87 	bl	8000b5c <bin2bcd>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
	time_tmp |= (0x7Fu & bin2bcd(time->minutes)) << 8;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	785b      	ldrb	r3, [r3, #1]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff7c 	bl	8000b5c <bin2bcd>
 8000c64:	4603      	mov	r3, r0
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
	time_tmp |= (0x3Fu & bin2bcd(time->hours)) << 16;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	789b      	ldrb	r3, [r3, #2]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff70 	bl	8000b5c <bin2bcd>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	041b      	lsls	r3, r3, #16
 8000c80:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]

	if (time->time_format == format_12) {
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	79db      	ldrb	r3, [r3, #7]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d10a      	bne.n	8000ca8 <RTC_init+0xe4>
		time_tmp |= 1u << 6;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c98:	60fb      	str	r3, [r7, #12]
		time_tmp |= time->am_pm << 22;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7a1b      	ldrb	r3, [r3, #8]
 8000c9e:	059b      	lsls	r3, r3, #22
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]
	}

	date_tmp |= 0x3Fu & bin2bcd(time->date);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	78db      	ldrb	r3, [r3, #3]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff55 	bl	8000b5c <bin2bcd>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000cb8:	68ba      	ldr	r2, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	60bb      	str	r3, [r7, #8]
	date_tmp |= (0x1Fu & bin2bcd(time->month)) << 8;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	795b      	ldrb	r3, [r3, #5]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff4a 	bl	8000b5c <bin2bcd>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60bb      	str	r3, [r7, #8]
	date_tmp |= (0x7u & time->day) << 13;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	791b      	ldrb	r3, [r3, #4]
 8000cda:	035b      	lsls	r3, r3, #13
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
	date_tmp |= (0xFFu & bin2bcd(time->year)) << 16;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	799b      	ldrb	r3, [r3, #6]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff37 	bl	8000b5c <bin2bcd>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	041b      	lsls	r3, r3, #16
 8000cf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]

	RTC->TR = time_tmp;
 8000cfc:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <RTC_init+0x160>)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	6013      	str	r3, [r2, #0]
	RTC->DR = date_tmp;
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <RTC_init+0x160>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	6053      	str	r3, [r2, #4]

	//exit the initialization mode
	RTC->ISR &= ~(1u << 7);
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <RTC_init+0x160>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <RTC_init+0x160>)
 8000d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d12:	60d3      	str	r3, [r2, #12]

}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40007000 	.word	0x40007000
 8000d24:	40002800 	.word	0x40002800

08000d28 <enable_uart_clock>:
 *      Author: toni
 */
#include "UART_lib.h"
#include "clocks_lib.h"

static void enable_uart_clock(USART_TypeDef* uart) {
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

	if (uart == USART2) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <enable_uart_clock+0x54>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d106      	bne.n	8000d46 <enable_uart_clock+0x1e>
		RCC->APB1ENR |= 1u << 17;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <enable_uart_clock+0x58>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <enable_uart_clock+0x58>)
 8000d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d42:	6413      	str	r3, [r2, #64]	; 0x40
		RCC->APB2ENR |= 1u << 4;
	} else if (uart == USART6) {
		RCC->APB2ENR |= 1u << 5;
	}

}
 8000d44:	e014      	b.n	8000d70 <enable_uart_clock+0x48>
	} else if (uart == USART1) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <enable_uart_clock+0x5c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d106      	bne.n	8000d5c <enable_uart_clock+0x34>
		RCC->APB2ENR |= 1u << 4;
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <enable_uart_clock+0x58>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <enable_uart_clock+0x58>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000d5a:	e009      	b.n	8000d70 <enable_uart_clock+0x48>
	} else if (uart == USART6) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <enable_uart_clock+0x60>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d105      	bne.n	8000d70 <enable_uart_clock+0x48>
		RCC->APB2ENR |= 1u << 5;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <enable_uart_clock+0x58>)
 8000d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d68:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <enable_uart_clock+0x58>)
 8000d6a:	f043 0320 	orr.w	r3, r3, #32
 8000d6e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	40004400 	.word	0x40004400
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40011000 	.word	0x40011000
 8000d88:	40011400 	.word	0x40011400

08000d8c <set_BRR>:

static void set_BRR(uint32_t baudrate, USART_TypeDef* uart) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	uint32_t clk_speed;
	if (uart == USART2) {
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <set_BRR+0x34>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d103      	bne.n	8000da6 <set_BRR+0x1a>
		clk_speed = get_APB1_clock();
 8000d9e:	f000 fa05 	bl	80011ac <get_APB1_clock>
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	e002      	b.n	8000dac <set_BRR+0x20>
	} else {
		clk_speed = get_APB2_clock();
 8000da6:	f000 fa0d 	bl	80011c4 <get_APB2_clock>
 8000daa:	60f8      	str	r0, [r7, #12]
	}

	uart->BRR = clk_speed / baudrate;
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	609a      	str	r2, [r3, #8]
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40004400 	.word	0x40004400

08000dc4 <uart_init>:


void uart_init(USART_TypeDef* uart, uint8_t word_length, uint8_t stop_bits, uint32_t baudrate) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	460b      	mov	r3, r1
 8000dd0:	72fb      	strb	r3, [r7, #11]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	72bb      	strb	r3, [r7, #10]
	enable_uart_clock(uart);
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f7ff ffa6 	bl	8000d28 <enable_uart_clock>

	uart_pins_init();
 8000ddc:	f000 fb8c 	bl	80014f8 <uart_pins_init>

	//Enable the USART
	uart->CR1 |= 1u << 13;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	60da      	str	r2, [r3, #12]

	//Program the M bit in USART_CR1 to define the word length
	uart->CR1 |= word_length << 12;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	7afa      	ldrb	r2, [r7, #11]
 8000df2:	0312      	lsls	r2, r2, #12
 8000df4:	431a      	orrs	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	60da      	str	r2, [r3, #12]

	//Program the number of stop bits in USART_CR2.
	uart->CR2 |= stop_bits << 12;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	7aba      	ldrb	r2, [r7, #10]
 8000e00:	0312      	lsls	r2, r2, #12
 8000e02:	431a      	orrs	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	611a      	str	r2, [r3, #16]

	//Select the desired baud rate using the baud rate register USART_BRR
	set_BRR(baudrate, uart);
 8000e08:	68f9      	ldr	r1, [r7, #12]
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffbe 	bl	8000d8c <set_BRR>

	//Set the RE bit USART_CR1. This enables the receiver which begins searching for a start bit.
	uart->CR1 |= 1u << 2;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	f043 0204 	orr.w	r2, r3, #4
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	60da      	str	r2, [r3, #12]

}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <uart_transmit_data>:

void uart_transmit_data(USART_TypeDef* uart, uint8_t* data_buffer, uint32_t len) {
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]

	//Set the TE bit in USART_CR1 to send an idle frame as first transmission.
	uart->CR1 |= 1u << 3;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	f043 0208 	orr.w	r2, r3, #8
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	60da      	str	r2, [r3, #12]

	//Write the data to send in the USART_DR register (this clears the TXE bit). Repeat this
	//for each data to be transmitted in case of single buffer.
	for (int i = 0; i < len; i++) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	e010      	b.n	8000e64 <uart_transmit_data+0x40>
		uart->DR = data_buffer[i];
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	4413      	add	r3, r2
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	605a      	str	r2, [r3, #4]

		while (!(uart->SR & (1u << 7)));
 8000e50:	bf00      	nop
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f9      	beq.n	8000e52 <uart_transmit_data+0x2e>
	for (int i = 0; i < len; i++) {
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3301      	adds	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8ea      	bhi.n	8000e42 <uart_transmit_data+0x1e>
	//After writing the last data into the USART_DR register, wait until TC=1. This indicates
	//that the transmission of the last frame is complete. This is required for instance when
	//the USART is disabled or enters the Halt mode to avoid corrupting the last
	//transmission.

	while(!(uart->SR & (1u << 6)));
 8000e6c:	bf00      	nop
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f9      	beq.n	8000e6e <uart_transmit_data+0x4a>

	//disable transmission and clear TC bit
	uint32_t temp = uart->SR;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	613b      	str	r3, [r7, #16]
	uart->DR = 0;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2200      	movs	r2, #0
 8000e84:	605a      	str	r2, [r3, #4]
	(void) temp;
	uart->CR1 &= ~(1u << 3);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	f023 0208 	bic.w	r2, r3, #8
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	60da      	str	r2, [r3, #12]


}
 8000e92:	bf00      	nop
 8000e94:	371c      	adds	r7, #28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <get_AHB_prescaler>:

static void select_clk_source(uint8_t clk_source) {
	RCC->CFGR |= clk_source;
}

static uint16_t get_AHB_prescaler() {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
	uint8_t bits = (15u << 4) & RCC->CFGR;
 8000ea6:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <get_AHB_prescaler+0x94>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f023 030f 	bic.w	r3, r3, #15
 8000eb0:	717b      	strb	r3, [r7, #5]
	uint16_t AHB_prescaler;

	if (!(bits & 8u)) {
 8000eb2:	797b      	ldrb	r3, [r7, #5]
 8000eb4:	f003 0308 	and.w	r3, r3, #8
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <get_AHB_prescaler+0x20>
		return 1;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e032      	b.n	8000f26 <get_AHB_prescaler+0x86>
	}

	switch (bits) {
 8000ec0:	797b      	ldrb	r3, [r7, #5]
 8000ec2:	3b08      	subs	r3, #8
 8000ec4:	2b07      	cmp	r3, #7
 8000ec6:	d82d      	bhi.n	8000f24 <get_AHB_prescaler+0x84>
 8000ec8:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <get_AHB_prescaler+0x30>)
 8000eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ece:	bf00      	nop
 8000ed0:	08000ef1 	.word	0x08000ef1
 8000ed4:	08000ef7 	.word	0x08000ef7
 8000ed8:	08000efd 	.word	0x08000efd
 8000edc:	08000f03 	.word	0x08000f03
 8000ee0:	08000f09 	.word	0x08000f09
 8000ee4:	08000f0f 	.word	0x08000f0f
 8000ee8:	08000f15 	.word	0x08000f15
 8000eec:	08000f1d 	.word	0x08000f1d
	case AHB_PRESCALER_2:
		AHB_prescaler = 2;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	80fb      	strh	r3, [r7, #6]
		break;
 8000ef4:	e016      	b.n	8000f24 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_4:
		AHB_prescaler = 4;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	80fb      	strh	r3, [r7, #6]
		break;
 8000efa:	e013      	b.n	8000f24 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_8:
		AHB_prescaler = 8;
 8000efc:	2308      	movs	r3, #8
 8000efe:	80fb      	strh	r3, [r7, #6]
		break;
 8000f00:	e010      	b.n	8000f24 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_16:
		AHB_prescaler = 16;
 8000f02:	2310      	movs	r3, #16
 8000f04:	80fb      	strh	r3, [r7, #6]
		break;
 8000f06:	e00d      	b.n	8000f24 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_64:
		AHB_prescaler = 64;
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	80fb      	strh	r3, [r7, #6]
		break;
 8000f0c:	e00a      	b.n	8000f24 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_128:
		AHB_prescaler = 128;
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	80fb      	strh	r3, [r7, #6]
		break;
 8000f12:	e007      	b.n	8000f24 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_256:
		AHB_prescaler = 256;
 8000f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f18:	80fb      	strh	r3, [r7, #6]
		break;
 8000f1a:	e003      	b.n	8000f24 <get_AHB_prescaler+0x84>
	case AHB_PRESCALER_512:
		AHB_prescaler = 512;
 8000f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f20:	80fb      	strh	r3, [r7, #6]
		break;
 8000f22:	bf00      	nop
	}

	return AHB_prescaler;
 8000f24:	88fb      	ldrh	r3, [r7, #6]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800

08000f38 <get_PLLM>:



static uint8_t get_PLLM() {
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

	return RCC->PLLCFGR & 63u;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <get_PLLM+0x1c>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f46:	b2db      	uxtb	r3, r3
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <get_PLLN>:

static uint16_t get_PLLN() {
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

	return (RCC->PLLCFGR & (511u << 6)) >> 6;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <get_PLLN+0x1c>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	099b      	lsrs	r3, r3, #6
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f68:	b29b      	uxth	r3, r3
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	40023800 	.word	0x40023800

08000f78 <get_PLLP>:

static uint8_t get_PLLP() {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
	uint8_t PLLP;

	switch ((RCC->PLLCFGR & (3u << 16)) >> 16) {
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <get_PLLP+0x54>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	0c1b      	lsrs	r3, r3, #16
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d817      	bhi.n	8000fbc <get_PLLP+0x44>
 8000f8c:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <get_PLLP+0x1c>)
 8000f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f92:	bf00      	nop
 8000f94:	08000fa5 	.word	0x08000fa5
 8000f98:	08000fab 	.word	0x08000fab
 8000f9c:	08000fb1 	.word	0x08000fb1
 8000fa0:	08000fb7 	.word	0x08000fb7
	case PLLP_2:
		PLLP = 2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	71fb      	strb	r3, [r7, #7]
		break;
 8000fa8:	e008      	b.n	8000fbc <get_PLLP+0x44>
	case PLLP_4:
		PLLP = 4;
 8000faa:	2304      	movs	r3, #4
 8000fac:	71fb      	strb	r3, [r7, #7]
		break;
 8000fae:	e005      	b.n	8000fbc <get_PLLP+0x44>
	case PLLP_6:
		PLLP = 6;
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	71fb      	strb	r3, [r7, #7]
		break;
 8000fb4:	e002      	b.n	8000fbc <get_PLLP+0x44>
	case PLLP_8:
		PLLP = 8;
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	71fb      	strb	r3, [r7, #7]
		break;
 8000fba:	bf00      	nop
	}

	return PLLP;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <get_clk_value>:

static uint32_t get_clk_value(uint8_t clk_source) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	uint32_t clk_value;
	if (clk_source == HSI) {
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <get_clk_value+0x16>
		clk_value = 16000000;
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <get_clk_value+0x30>)
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e004      	b.n	8000ff0 <get_clk_value+0x20>
	} else if (clk_source == HSE) {
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d101      	bne.n	8000ff0 <get_clk_value+0x20>
		clk_value = 8000000;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <get_clk_value+0x34>)
 8000fee:	60fb      	str	r3, [r7, #12]
	}

	return clk_value;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	00f42400 	.word	0x00f42400
 8001004:	007a1200 	.word	0x007a1200

08001008 <calculate_PLL_clk>:

static uint32_t calculate_PLL_clk(uint32_t clk_value, uint8_t PLLM,
		uint16_t PLLN, uint8_t PLLP) {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	4608      	mov	r0, r1
 8001012:	4611      	mov	r1, r2
 8001014:	461a      	mov	r2, r3
 8001016:	4603      	mov	r3, r0
 8001018:	70fb      	strb	r3, [r7, #3]
 800101a:	460b      	mov	r3, r1
 800101c:	803b      	strh	r3, [r7, #0]
 800101e:	4613      	mov	r3, r2
 8001020:	70bb      	strb	r3, [r7, #2]

	return clk_value / PLLM * PLLN / PLLP;
 8001022:	78fb      	ldrb	r3, [r7, #3]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	883a      	ldrh	r2, [r7, #0]
 800102c:	fb02 f203 	mul.w	r2, r2, r3
 8001030:	78bb      	ldrb	r3, [r7, #2]
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <get_APB1_prescaler>:
	RCC->CFGR |= AHB_prescaler << 4;
	RCC->CFGR |= APB1_prescaler << 10;
	RCC->CFGR |= APB2_prescaler << 13;
}

uint8_t get_APB1_prescaler() {
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
	uint8_t bits = ((7u << 10) & RCC->CFGR) >> 10;
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <get_APB1_prescaler+0x68>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	0a9b      	lsrs	r3, r3, #10
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	71bb      	strb	r3, [r7, #6]
	uint8_t APB1_prescaler;

	if (!(bits & 4u)) {
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <get_APB1_prescaler+0x22>
		return 1;
 8001062:	2301      	movs	r3, #1
 8001064:	e01b      	b.n	800109e <get_APB1_prescaler+0x5a>
	}

	switch (bits) {
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	3b04      	subs	r3, #4
 800106a:	2b03      	cmp	r3, #3
 800106c:	d816      	bhi.n	800109c <get_APB1_prescaler+0x58>
 800106e:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <get_APB1_prescaler+0x30>)
 8001070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001074:	08001085 	.word	0x08001085
 8001078:	0800108b 	.word	0x0800108b
 800107c:	08001091 	.word	0x08001091
 8001080:	08001097 	.word	0x08001097
	case APBx_PRESCALER_2:
		APB1_prescaler = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	71fb      	strb	r3, [r7, #7]
		break;
 8001088:	e008      	b.n	800109c <get_APB1_prescaler+0x58>
	case APBx_PRESCALER_4:
		APB1_prescaler = 4;
 800108a:	2304      	movs	r3, #4
 800108c:	71fb      	strb	r3, [r7, #7]
		break;
 800108e:	e005      	b.n	800109c <get_APB1_prescaler+0x58>
	case APBx_PRESCALER_8:
		APB1_prescaler = 8;
 8001090:	2308      	movs	r3, #8
 8001092:	71fb      	strb	r3, [r7, #7]
		break;
 8001094:	e002      	b.n	800109c <get_APB1_prescaler+0x58>
	case APBx_PRESCALER_16:
		APB1_prescaler = 16;
 8001096:	2310      	movs	r3, #16
 8001098:	71fb      	strb	r3, [r7, #7]
		break;
 800109a:	bf00      	nop
	}

	return APB1_prescaler;
 800109c:	79fb      	ldrb	r3, [r7, #7]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800

080010b0 <get_APB2_prescaler>:

uint8_t get_APB2_prescaler() {
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
	uint8_t bits = (7u << 13) & RCC->CFGR;
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <get_APB2_prescaler+0x64>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2300      	movs	r3, #0
 80010bc:	717b      	strb	r3, [r7, #5]
	uint16_t APB2_prescaler;

	if (!(bits & 4u)) {
 80010be:	797b      	ldrb	r3, [r7, #5]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <get_APB2_prescaler+0x1c>
		return 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e01d      	b.n	8001108 <get_APB2_prescaler+0x58>
	}

	switch (bits) {
 80010cc:	797b      	ldrb	r3, [r7, #5]
 80010ce:	3b04      	subs	r3, #4
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d817      	bhi.n	8001104 <get_APB2_prescaler+0x54>
 80010d4:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <get_APB2_prescaler+0x2c>)
 80010d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010da:	bf00      	nop
 80010dc:	080010ed 	.word	0x080010ed
 80010e0:	080010f3 	.word	0x080010f3
 80010e4:	080010f9 	.word	0x080010f9
 80010e8:	080010ff 	.word	0x080010ff
	case APBx_PRESCALER_2:
		APB2_prescaler = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	80fb      	strh	r3, [r7, #6]
		break;
 80010f0:	e008      	b.n	8001104 <get_APB2_prescaler+0x54>
	case APBx_PRESCALER_4:
		APB2_prescaler = 4;
 80010f2:	2304      	movs	r3, #4
 80010f4:	80fb      	strh	r3, [r7, #6]
		break;
 80010f6:	e005      	b.n	8001104 <get_APB2_prescaler+0x54>
	case APBx_PRESCALER_8:
		APB2_prescaler = 8;
 80010f8:	2308      	movs	r3, #8
 80010fa:	80fb      	strh	r3, [r7, #6]
		break;
 80010fc:	e002      	b.n	8001104 <get_APB2_prescaler+0x54>
	case APBx_PRESCALER_16:
		APB2_prescaler = 16;
 80010fe:	2310      	movs	r3, #16
 8001100:	80fb      	strh	r3, [r7, #6]
		break;
 8001102:	bf00      	nop
	}

	return APB2_prescaler;
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	b2db      	uxtb	r3, r3
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40023800 	.word	0x40023800

08001118 <get_SYSCLK>:

uint32_t get_SYSCLK() {
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0

	uint8_t clk_source = 3u & RCC->CFGR;
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <get_SYSCLK+0x70>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	70fb      	strb	r3, [r7, #3]
	uint32_t clk_speed;

	if (clk_source == HSI || clk_source == HSE) {
 800112a:	78fb      	ldrb	r3, [r7, #3]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <get_SYSCLK+0x1e>
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d107      	bne.n	8001146 <get_SYSCLK+0x2e>
		clk_speed = get_clk_value(clk_source);
 8001136:	78fb      	ldrb	r3, [r7, #3]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff49 	bl	8000fd0 <get_clk_value>
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	bf00      	nop

		return calculate_PLL_clk(clk_speed, get_PLLM(), get_PLLN(), get_PLLP());

	}

	return clk_speed;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	e01b      	b.n	800117e <get_SYSCLK+0x66>
		if ((1u << 22) & RCC->PLLCFGR) {
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <get_SYSCLK+0x70>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <get_SYSCLK+0x40>
			clk_speed = 8000000;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <get_SYSCLK+0x74>)
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	e001      	b.n	800115c <get_SYSCLK+0x44>
			clk_speed = 16000000;
 8001158:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <get_SYSCLK+0x78>)
 800115a:	607b      	str	r3, [r7, #4]
		return calculate_PLL_clk(clk_speed, get_PLLM(), get_PLLN(), get_PLLP());
 800115c:	f7ff feec 	bl	8000f38 <get_PLLM>
 8001160:	4603      	mov	r3, r0
 8001162:	461c      	mov	r4, r3
 8001164:	f7ff fef8 	bl	8000f58 <get_PLLN>
 8001168:	4603      	mov	r3, r0
 800116a:	461d      	mov	r5, r3
 800116c:	f7ff ff04 	bl	8000f78 <get_PLLP>
 8001170:	4603      	mov	r3, r0
 8001172:	462a      	mov	r2, r5
 8001174:	4621      	mov	r1, r4
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff46 	bl	8001008 <calculate_PLL_clk>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bdb0      	pop	{r4, r5, r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	007a1200 	.word	0x007a1200
 8001190:	00f42400 	.word	0x00f42400

08001194 <get_AHB_clock>:

uint32_t get_AHB_clock() {
 8001194:	b598      	push	{r3, r4, r7, lr}
 8001196:	af00      	add	r7, sp, #0

	return get_SYSCLK() / get_AHB_prescaler();
 8001198:	f7ff ffbe 	bl	8001118 <get_SYSCLK>
 800119c:	4604      	mov	r4, r0
 800119e:	f7ff fe7f 	bl	8000ea0 <get_AHB_prescaler>
 80011a2:	4603      	mov	r3, r0
 80011a4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	bd98      	pop	{r3, r4, r7, pc}

080011ac <get_APB1_clock>:

uint32_t get_APB1_clock() {
 80011ac:	b598      	push	{r3, r4, r7, lr}
 80011ae:	af00      	add	r7, sp, #0

	return get_AHB_clock() / get_APB1_prescaler();
 80011b0:	f7ff fff0 	bl	8001194 <get_AHB_clock>
 80011b4:	4604      	mov	r4, r0
 80011b6:	f7ff ff45 	bl	8001044 <get_APB1_prescaler>
 80011ba:	4603      	mov	r3, r0
 80011bc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	bd98      	pop	{r3, r4, r7, pc}

080011c4 <get_APB2_clock>:

uint32_t get_APB2_clock() {
 80011c4:	b598      	push	{r3, r4, r7, lr}
 80011c6:	af00      	add	r7, sp, #0

	return get_AHB_clock() / get_APB2_prescaler();
 80011c8:	f7ff ffe4 	bl	8001194 <get_AHB_clock>
 80011cc:	4604      	mov	r4, r0
 80011ce:	f7ff ff6f 	bl	80010b0 <get_APB2_prescaler>
 80011d2:	4603      	mov	r3, r0
 80011d4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	bd98      	pop	{r3, r4, r7, pc}

080011dc <enable_timer_clock>:
 *      Author: toni
 */
#include "delay_timer_lib.h"
#include "clocks_lib.h"

static void enable_timer_clock(TIM_TypeDef *timer) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	if (timer == TIM1) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a2e      	ldr	r2, [pc, #184]	; (80012a0 <enable_timer_clock+0xc4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d106      	bne.n	80011fa <enable_timer_clock+0x1e>
		RCC->APB2ENR |= 1u;
 80011ec:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <enable_timer_clock+0xc8>)
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	4a2c      	ldr	r2, [pc, #176]	; (80012a4 <enable_timer_clock+0xc8>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6453      	str	r3, [r2, #68]	; 0x44
	} else if (timer == TIM10) {
		RCC->APB2ENR |= 1u << 17;
	} else if (timer == TIM11) {
		RCC->APB2ENR |= 1u << 18;
	}
}
 80011f8:	e04b      	b.n	8001292 <enable_timer_clock+0xb6>
	} else if (timer == TIM2) {
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001200:	d106      	bne.n	8001210 <enable_timer_clock+0x34>
		RCC->APB1ENR |= 1u;
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <enable_timer_clock+0xc8>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a27      	ldr	r2, [pc, #156]	; (80012a4 <enable_timer_clock+0xc8>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800120e:	e040      	b.n	8001292 <enable_timer_clock+0xb6>
	} else if (timer == TIM3) {
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a25      	ldr	r2, [pc, #148]	; (80012a8 <enable_timer_clock+0xcc>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d106      	bne.n	8001226 <enable_timer_clock+0x4a>
		RCC->APB1ENR |= 2u;
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <enable_timer_clock+0xc8>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	4a21      	ldr	r2, [pc, #132]	; (80012a4 <enable_timer_clock+0xc8>)
 800121e:	f043 0302 	orr.w	r3, r3, #2
 8001222:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001224:	e035      	b.n	8001292 <enable_timer_clock+0xb6>
	} else if (timer == TIM4) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a20      	ldr	r2, [pc, #128]	; (80012ac <enable_timer_clock+0xd0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d106      	bne.n	800123c <enable_timer_clock+0x60>
		RCC->APB1ENR |= 4u;
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <enable_timer_clock+0xc8>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <enable_timer_clock+0xc8>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
}
 800123a:	e02a      	b.n	8001292 <enable_timer_clock+0xb6>
	} else if (timer == TIM5) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <enable_timer_clock+0xd4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d106      	bne.n	8001252 <enable_timer_clock+0x76>
		RCC->APB1ENR |= 8u;
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <enable_timer_clock+0xc8>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <enable_timer_clock+0xc8>)
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001250:	e01f      	b.n	8001292 <enable_timer_clock+0xb6>
	} else if (timer == TIM9) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <enable_timer_clock+0xd8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d106      	bne.n	8001268 <enable_timer_clock+0x8c>
		RCC->APB2ENR |= 1u << 16;
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <enable_timer_clock+0xc8>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <enable_timer_clock+0xc8>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001266:	e014      	b.n	8001292 <enable_timer_clock+0xb6>
	} else if (timer == TIM10) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <enable_timer_clock+0xdc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d106      	bne.n	800127e <enable_timer_clock+0xa2>
		RCC->APB2ENR |= 1u << 17;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <enable_timer_clock+0xc8>)
 8001272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001274:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <enable_timer_clock+0xc8>)
 8001276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800127c:	e009      	b.n	8001292 <enable_timer_clock+0xb6>
	} else if (timer == TIM11) {
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <enable_timer_clock+0xe0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d105      	bne.n	8001292 <enable_timer_clock+0xb6>
		RCC->APB2ENR |= 1u << 18;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <enable_timer_clock+0xc8>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <enable_timer_clock+0xc8>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40010000 	.word	0x40010000
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40000400 	.word	0x40000400
 80012ac:	40000800 	.word	0x40000800
 80012b0:	40000c00 	.word	0x40000c00
 80012b4:	40014000 	.word	0x40014000
 80012b8:	40014400 	.word	0x40014400
 80012bc:	40014800 	.word	0x40014800

080012c0 <init_timer>:
	uint16_t prescaler = timer->PSC;

	return get_timer_base_clock(timer) / (prescaler + 1);
}

void init_timer(TIM_TypeDef *timer, uint16_t prescaler) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
	enable_timer_clock(timer);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff85 	bl	80011dc <enable_timer_clock>
	timer->PSC = prescaler - 1;
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	629a      	str	r2, [r3, #40]	; 0x28

}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <read_bit>:
uint16_t temperature_tmp;
uint16_t humidity_tmp;

uint8_t bits_read;

static void read_bit(void) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	pin_state value = read_pin(&dht22);
 80012ea:	482b      	ldr	r0, [pc, #172]	; (8001398 <read_bit+0xb4>)
 80012ec:	f7ff f978 	bl	80005e0 <read_pin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]

	if (bits_read == 32) {
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <read_bit+0xb8>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b20      	cmp	r3, #32
 80012fa:	d119      	bne.n	8001330 <read_bit+0x4c>

		disable_EXTI(10);
 80012fc:	200a      	movs	r0, #10
 80012fe:	f7ff f843 	bl	8000388 <disable_EXTI>

		dht22_data.temperature = temperature_tmp;
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <read_bit+0xbc>)
 8001304:	881a      	ldrh	r2, [r3, #0]
 8001306:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <read_bit+0xc0>)
 8001308:	801a      	strh	r2, [r3, #0]
		dht22_data.humidity = humidity_tmp;
 800130a:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <read_bit+0xc4>)
 800130c:	881a      	ldrh	r2, [r3, #0]
 800130e:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <read_bit+0xc0>)
 8001310:	805a      	strh	r2, [r3, #2]

		temperature_tmp = 0;
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <read_bit+0xbc>)
 8001314:	2200      	movs	r2, #0
 8001316:	801a      	strh	r2, [r3, #0]
		humidity_tmp = 0;
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <read_bit+0xc4>)
 800131a:	2200      	movs	r2, #0
 800131c:	801a      	strh	r2, [r3, #0]
		bits_read = -1;
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <read_bit+0xb8>)
 8001320:	22ff      	movs	r2, #255	; 0xff
 8001322:	701a      	strb	r2, [r3, #0]

		dht_status = SLEEPING;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <read_bit+0xc8>)
 8001326:	2203      	movs	r2, #3
 8001328:	701a      	strb	r2, [r3, #0]
		dht22_application_callback();
 800132a:	f000 f8d1 	bl	80014d0 <dht22_application_callback>
 800132e:	e028      	b.n	8001382 <read_bit+0x9e>

	} else if (bits_read < 16) {
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <read_bit+0xb8>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d810      	bhi.n	800135a <read_bit+0x76>

		humidity_tmp |= (value << (15 - bits_read));
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <read_bit+0xb8>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	f1c3 030f 	rsb	r3, r3, #15
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	b21a      	sxth	r2, r3
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <read_bit+0xc4>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b21b      	sxth	r3, r3
 8001352:	b29a      	uxth	r2, r3
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <read_bit+0xc4>)
 8001356:	801a      	strh	r2, [r3, #0]
 8001358:	e013      	b.n	8001382 <read_bit+0x9e>

	} else if (bits_read < 32) {
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <read_bit+0xb8>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b1f      	cmp	r3, #31
 8001360:	d80f      	bhi.n	8001382 <read_bit+0x9e>

		temperature_tmp |= (value << (31 - bits_read));
 8001362:	79fa      	ldrb	r2, [r7, #7]
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <read_bit+0xb8>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	f1c3 031f 	rsb	r3, r3, #31
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <read_bit+0xbc>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21b      	sxth	r3, r3
 800137c:	b29a      	uxth	r2, r3
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <read_bit+0xbc>)
 8001380:	801a      	strh	r2, [r3, #0]

	}

	bits_read++;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <read_bit+0xb8>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <read_bit+0xb8>)
 800138c:	701a      	strb	r2, [r3, #0]

}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000144 	.word	0x20000144
 800139c:	2000013d 	.word	0x2000013d
 80013a0:	20000140 	.word	0x20000140
 80013a4:	20000138 	.word	0x20000138
 80013a8:	20000130 	.word	0x20000130
 80013ac:	2000013e 	.word	0x2000013e

080013b0 <dht22_handle_data_pin_IT>:

void dht22_handle_data_pin_IT() {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	IR_timer_micros(35);
 80013b4:	2023      	movs	r0, #35	; 0x23
 80013b6:	f000 f9cf 	bl	8001758 <IR_timer_micros>

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <dht22_handle_delay_IT>:


void dht22_handle_delay_IT(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0

	if (dht_status == INITIALIZING) {
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <dht22_handle_delay_IT+0x50>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d10c      	bne.n	80013e6 <dht22_handle_delay_IT+0x26>

		dht_status = INITIALIZING_2;
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <dht22_handle_delay_IT+0x50>)
 80013ce:	2202      	movs	r2, #2
 80013d0:	701a      	strb	r2, [r3, #0]

		dht22.mode = INPUT;
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <dht22_handle_delay_IT+0x54>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	715a      	strb	r2, [r3, #5]
		change_mode(&dht22);
 80013d8:	480e      	ldr	r0, [pc, #56]	; (8001414 <dht22_handle_delay_IT+0x54>)
 80013da:	f7ff f89f 	bl	800051c <change_mode>

		IR_timer_micros(185);
 80013de:	20b9      	movs	r0, #185	; 0xb9
 80013e0:	f000 f9ba 	bl	8001758 <IR_timer_micros>

	} else if (dht_status == SENDING_DATA) {
		read_bit();
	}

}
 80013e4:	e012      	b.n	800140c <dht22_handle_delay_IT+0x4c>
	} else if (dht_status == INITIALIZING_2) {
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <dht22_handle_delay_IT+0x50>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d108      	bne.n	8001400 <dht22_handle_delay_IT+0x40>
		dht_status = SENDING_DATA;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <dht22_handle_delay_IT+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
		enable_EXTI(10, EXTI_GPIOA, EXTI_RE);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	200a      	movs	r0, #10
 80013fa:	f7fe ff5d 	bl	80002b8 <enable_EXTI>
}
 80013fe:	e005      	b.n	800140c <dht22_handle_delay_IT+0x4c>
	} else if (dht_status == SENDING_DATA) {
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <dht22_handle_delay_IT+0x50>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <dht22_handle_delay_IT+0x4c>
		read_bit();
 8001408:	f7ff ff6c 	bl	80012e4 <read_bit>
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000013e 	.word	0x2000013e
 8001414:	20000144 	.word	0x20000144

08001418 <init_dht22>:

void init_dht22() {
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

	dht_status = SLEEPING;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <init_dht22+0x2c>)
 800141e:	2203      	movs	r2, #3
 8001420:	701a      	strb	r2, [r3, #0]

	dht22.PP_OD = PP;
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <init_dht22+0x30>)
 8001424:	2200      	movs	r2, #0
 8001426:	719a      	strb	r2, [r3, #6]
	dht22.mode = INPUT;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <init_dht22+0x30>)
 800142a:	2200      	movs	r2, #0
 800142c:	715a      	strb	r2, [r3, #5]
	dht22.push_pull = PULL_UP;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <init_dht22+0x30>)
 8001430:	2201      	movs	r2, #1
 8001432:	71da      	strb	r2, [r3, #7]

	init_pin(&dht22);
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <init_dht22+0x30>)
 8001436:	f7ff f843 	bl	80004c0 <init_pin>
	enable_IR(EXTI15_10_IRQn);
 800143a:	2028      	movs	r0, #40	; 0x28
 800143c:	f7ff fb6e 	bl	8000b1c <enable_IR>

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000013e 	.word	0x2000013e
 8001448:	20000144 	.word	0x20000144

0800144c <SysTick_Handler>:
#include "dht22.h"
#include "main.h"
#include "UART_lib.h"
#include "stdio.h"

void SysTick_Handler() {
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <SysTick_Handler+0x14>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
	dht22_handle_delay_IT();
 8001456:	f7ff ffb3 	bl	80013c0 <dht22_handle_delay_IT>

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler() {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0

	dht22_handle_data_pin_IT();
 8001468:	f7ff ffa2 	bl	80013b0 <dht22_handle_data_pin_IT>
	EXTI->PR |= 1u << 10;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <EXTI15_10_IRQHandler+0x18>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	4a02      	ldr	r2, [pc, #8]	; (800147c <EXTI15_10_IRQHandler+0x18>)
 8001472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001476:	6153      	str	r3, [r2, #20]

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40013c00 	.word	0x40013c00

08001480 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler() {
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	I2C_handle_EV(&I2C_handle);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <I2C1_EV_IRQHandler+0x10>)
 8001486:	f7ff fadb 	bl	8000a40 <I2C_handle_EV>
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000150 	.word	0x20000150

08001494 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler() {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
	uint8_t error_code = I2C_handle_ER(&I2C_handle);
 800149a:	480a      	ldr	r0, [pc, #40]	; (80014c4 <I2C1_ER_IRQHandler+0x30>)
 800149c:	f7ff fae7 	bl	8000a6e <I2C_handle_ER>
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
	char number[2];
	sprintf(number, "%d", error_code);
 80014a4:	79fa      	ldrb	r2, [r7, #7]
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4907      	ldr	r1, [pc, #28]	; (80014c8 <I2C1_ER_IRQHandler+0x34>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f9d8 	bl	8001860 <siprintf>

	uart_transmit_data(USART2, (uint8_t*) number, 2);
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2202      	movs	r2, #2
 80014b4:	4619      	mov	r1, r3
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <I2C1_ER_IRQHandler+0x38>)
 80014b8:	f7ff fcb4 	bl	8000e24 <uart_transmit_data>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000150 	.word	0x20000150
 80014c8:	08002d44 	.word	0x08002d44
 80014cc:	40004400 	.word	0x40004400

080014d0 <dht22_application_callback>:
#include "string.h"
#include "RTC.h"

pin_type test_pin;

void dht22_application_callback() {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	printf("%d\n", (int) dht22_data.temperature);
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <dht22_application_callback+0x20>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <dht22_application_callback+0x24>)
 80014dc:	f000 f9a8 	bl	8001830 <iprintf>
	printf("%d\n", (int) dht22_data.humidity);
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <dht22_application_callback+0x20>)
 80014e2:	885b      	ldrh	r3, [r3, #2]
 80014e4:	4619      	mov	r1, r3
 80014e6:	4803      	ldr	r0, [pc, #12]	; (80014f4 <dht22_application_callback+0x24>)
 80014e8:	f000 f9a2 	bl	8001830 <iprintf>

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000138 	.word	0x20000138
 80014f4:	08002d48 	.word	0x08002d48

080014f8 <uart_pins_init>:

void uart_pins_init() {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
	//pins PA2 and PA3
	pin_type uartTX, uartRX;
	uartTX.AF_num = 7;
 80014fe:	2307      	movs	r3, #7
 8001500:	753b      	strb	r3, [r7, #20]
	uartTX.PP_OD = PP;
 8001502:	2300      	movs	r3, #0
 8001504:	74bb      	strb	r3, [r7, #18]
	uartTX.gpio = GPIOA;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <uart_pins_init+0x48>)
 8001508:	60fb      	str	r3, [r7, #12]
	uartTX.mode = ALTERNATE_FUNCTION;
 800150a:	2302      	movs	r3, #2
 800150c:	747b      	strb	r3, [r7, #17]
	uartTX.pin_num = 2;
 800150e:	2302      	movs	r3, #2
 8001510:	743b      	strb	r3, [r7, #16]
	uartTX.push_pull = NO_PULL;
 8001512:	2300      	movs	r3, #0
 8001514:	74fb      	strb	r3, [r7, #19]

	uartRX = uartTX;
 8001516:	463b      	mov	r3, r7
 8001518:	f107 020c 	add.w	r2, r7, #12
 800151c:	ca07      	ldmia	r2, {r0, r1, r2}
 800151e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uartRX.pin_num = 3;
 8001522:	2303      	movs	r3, #3
 8001524:	713b      	strb	r3, [r7, #4]

	init_pin(&uartTX);
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ffc8 	bl	80004c0 <init_pin>
	init_pin(&uartRX);
 8001530:	463b      	mov	r3, r7
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe ffc4 	bl	80004c0 <init_pin>

}
 8001538:	bf00      	nop
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40020000 	.word	0x40020000

08001544 <I2C_pins_init>:

void I2C_pins_init() {
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
	pin_type SCL, SDA;
	SCL.AF_num = 4;
 800154a:	2304      	movs	r3, #4
 800154c:	753b      	strb	r3, [r7, #20]
	SCL.PP_OD = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	74bb      	strb	r3, [r7, #18]
	SCL.push_pull = PULL_UP;
 8001552:	2301      	movs	r3, #1
 8001554:	74fb      	strb	r3, [r7, #19]
	SCL.gpio = GPIOB;
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <I2C_pins_init+0x48>)
 8001558:	60fb      	str	r3, [r7, #12]
	SCL.mode = ALTERNATE_FUNCTION;
 800155a:	2302      	movs	r3, #2
 800155c:	747b      	strb	r3, [r7, #17]
	SCL.pin_num = 6;
 800155e:	2306      	movs	r3, #6
 8001560:	743b      	strb	r3, [r7, #16]

	SDA = SCL;
 8001562:	463b      	mov	r3, r7
 8001564:	f107 020c 	add.w	r2, r7, #12
 8001568:	ca07      	ldmia	r2, {r0, r1, r2}
 800156a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	SDA.pin_num = 7;
 800156e:	2307      	movs	r3, #7
 8001570:	713b      	strb	r3, [r7, #4]

	init_pin(&SCL);
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ffa2 	bl	80004c0 <init_pin>
	init_pin(&SDA);
 800157c:	463b      	mov	r3, r7
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ff9e 	bl	80004c0 <init_pin>

}
 8001584:	bf00      	nop
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40020400 	.word	0x40020400

08001590 <main>:
	sprintf(buffer, format, (int) date_time->hours, (int) date_time->minutes,
			(int) date_time->seconds, (int) date_time->date,
			(int) date_time->month, (int) date_time->year);
}

int main(void) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0

	init_systick();
 8001596:	f000 f8bd 	bl	8001714 <init_systick>
	init_timer(TIM2, 1);
 800159a:	2101      	movs	r1, #1
 800159c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015a0:	f7ff fe8e 	bl	80012c0 <init_timer>
	init_dht22();
 80015a4:	f7ff ff38 	bl	8001418 <init_dht22>


	uart_init(USART2, UART_8BIT, UART_1_STOP_BITS, 115200);
 80015a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	481e      	ldr	r0, [pc, #120]	; (800162c <main+0x9c>)
 80015b2:	f7ff fc07 	bl	8000dc4 <uart_init>
	uint8_t data[2] = {0xFF, 0x1};
 80015b6:	f240 13ff 	movw	r3, #511	; 0x1ff
 80015ba:	84bb      	strh	r3, [r7, #36]	; 0x24


	memset(&I2C_handle, 0, sizeof(I2C_handle));
 80015bc:	2214      	movs	r2, #20
 80015be:	2100      	movs	r1, #0
 80015c0:	481b      	ldr	r0, [pc, #108]	; (8001630 <main+0xa0>)
 80015c2:	f000 f92d 	bl	8001820 <memset>
	I2C_handle.addressing_mode = I2C_7_BIT_ADDRESSING;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <main+0xa0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	711a      	strb	r2, [r3, #4]
	I2C_handle.peripheral = I2C1;
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <main+0xa0>)
 80015ce:	4a19      	ldr	r2, [pc, #100]	; (8001634 <main+0xa4>)
 80015d0:	601a      	str	r2, [r3, #0]
	I2C_handle.slave_address = 0x27;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <main+0xa0>)
 80015d4:	2227      	movs	r2, #39	; 0x27
 80015d6:	80da      	strh	r2, [r3, #6]
	I2C_handle.data = data;
 80015d8:	4a15      	ldr	r2, [pc, #84]	; (8001630 <main+0xa0>)
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	6093      	str	r3, [r2, #8]
	I2C_handle.data_len = 2;
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <main+0xa0>)
 80015e2:	2202      	movs	r2, #2
 80015e4:	60da      	str	r2, [r3, #12]

	date_time_type date_time;
	date_time.date = 29;
 80015e6:	231d      	movs	r3, #29
 80015e8:	76fb      	strb	r3, [r7, #27]
	date_time.day = wednesday;
 80015ea:	2303      	movs	r3, #3
 80015ec:	773b      	strb	r3, [r7, #28]
	date_time.hours = 13;
 80015ee:	230d      	movs	r3, #13
 80015f0:	76bb      	strb	r3, [r7, #26]
	date_time.minutes = 40;
 80015f2:	2328      	movs	r3, #40	; 0x28
 80015f4:	767b      	strb	r3, [r7, #25]
	date_time.month = 12;
 80015f6:	230c      	movs	r3, #12
 80015f8:	777b      	strb	r3, [r7, #29]
	date_time.seconds = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	763b      	strb	r3, [r7, #24]
	date_time.time_format = format_24;
 80015fe:	2300      	movs	r3, #0
 8001600:	77fb      	strb	r3, [r7, #31]
	date_time.year = 21;
 8001602:	2315      	movs	r3, #21
 8001604:	77bb      	strb	r3, [r7, #30]

	RTC_init(&date_time);
 8001606:	f107 0318 	add.w	r3, r7, #24
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fada 	bl	8000bc4 <RTC_init>

	I2C_init(&I2C_handle);
 8001610:	4807      	ldr	r0, [pc, #28]	; (8001630 <main+0xa0>)
 8001612:	f7ff f867 	bl	80006e4 <I2C_init>
	char time[22];

	I2C_transmit_data_and_wait(&I2C_handle);
 8001616:	4806      	ldr	r0, [pc, #24]	; (8001630 <main+0xa0>)
 8001618:	f7ff f8e1 	bl	80007de <I2C_transmit_data_and_wait>

	//data = 0x1u;
	I2C_handle.data = &data;
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <main+0xa0>)
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	6093      	str	r3, [r2, #8]
	I2C_handle.data_len = 1;
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <main+0xa0>)
 8001626:	2201      	movs	r2, #1
 8001628:	60da      	str	r2, [r3, #12]

	//I2C_transmit_data(&I2C_handle);

	while (1) {
 800162a:	e7fe      	b.n	800162a <main+0x9a>
 800162c:	40004400 	.word	0x40004400
 8001630:	20000150 	.word	0x20000150
 8001634:	40005400 	.word	0x40005400

08001638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <_sbrk+0x5c>)
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <_sbrk+0x60>)
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <_sbrk+0x64>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <_sbrk+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001668:	f000 f8b0 	bl	80017cc <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	220c      	movs	r2, #12
 8001670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e009      	b.n	800168c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <_sbrk+0x64>)
 8001688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20018000 	.word	0x20018000
 8001698:	00000400 	.word	0x00000400
 800169c:	20000084 	.word	0x20000084
 80016a0:	20000180 	.word	0x20000180

080016a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <SystemInit+0x20>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <SystemInit+0x20>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <timer>:
#include <systick_IR_timer_lib.h>
#include "clocks_lib.h"
#include "stm32f4xx.h"

static void timer(uint32_t s, uint32_t unit) {
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]

	SysTick->CTRL = 0;
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <timer+0x48>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <timer+0x48>)
 80016da:	2200      	movs	r2, #0
 80016dc:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <timer+0x48>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]

	SysTick->LOAD |= s * unit - 1;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <timer+0x48>)
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6839      	ldr	r1, [r7, #0]
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	3b01      	subs	r3, #1
 80016f2:	4907      	ldr	r1, [pc, #28]	; (8001710 <timer+0x48>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]
	SysTick->CTRL |= 7u;
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <timer+0x48>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <timer+0x48>)
 80016fe:	f043 0307 	orr.w	r3, r3, #7
 8001702:	6013      	str	r3, [r2, #0]

}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e010 	.word	0xe000e010

08001714 <init_systick>:

void init_systick() {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0

	uint32_t processor_clock = get_AHB_clock();
 800171a:	f7ff fd3b 	bl	8001194 <get_AHB_clock>
 800171e:	6078      	str	r0, [r7, #4]
	MILLIS = processor_clock / 1000;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a09      	ldr	r2, [pc, #36]	; (8001748 <init_systick+0x34>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <init_systick+0x38>)
 800172c:	6013      	str	r3, [r2, #0]
	MICROS = processor_clock / 1000000;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a07      	ldr	r2, [pc, #28]	; (8001750 <init_systick+0x3c>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	0c9b      	lsrs	r3, r3, #18
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <init_systick+0x40>)
 800173c:	701a      	strb	r2, [r3, #0]
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	10624dd3 	.word	0x10624dd3
 800174c:	20000134 	.word	0x20000134
 8001750:	431bde83 	.word	0x431bde83
 8001754:	2000013c 	.word	0x2000013c

08001758 <IR_timer_micros>:

	timer(ms, MILLIS);

}

void IR_timer_micros(uint32_t micros) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

	timer(micros, MICROS);
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <IR_timer_micros+0x1c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ffae 	bl	80016c8 <timer>

}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000013c 	.word	0x2000013c

08001778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800177c:	480d      	ldr	r0, [pc, #52]	; (80017b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800177e:	490e      	ldr	r1, [pc, #56]	; (80017b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001780:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001794:	4c0b      	ldr	r4, [pc, #44]	; (80017c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017a2:	f7ff ff7f 	bl	80016a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a6:	f000 f817 	bl	80017d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017aa:	f7ff fef1 	bl	8001590 <main>
  bx  lr    
 80017ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80017bc:	08002e10 	.word	0x08002e10
  ldr r2, =_sbss
 80017c0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80017c4:	20000180 	.word	0x20000180

080017c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC_IRQHandler>
	...

080017cc <__errno>:
 80017cc:	4b01      	ldr	r3, [pc, #4]	; (80017d4 <__errno+0x8>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000000 	.word	0x20000000

080017d8 <__libc_init_array>:
 80017d8:	b570      	push	{r4, r5, r6, lr}
 80017da:	4d0d      	ldr	r5, [pc, #52]	; (8001810 <__libc_init_array+0x38>)
 80017dc:	4c0d      	ldr	r4, [pc, #52]	; (8001814 <__libc_init_array+0x3c>)
 80017de:	1b64      	subs	r4, r4, r5
 80017e0:	10a4      	asrs	r4, r4, #2
 80017e2:	2600      	movs	r6, #0
 80017e4:	42a6      	cmp	r6, r4
 80017e6:	d109      	bne.n	80017fc <__libc_init_array+0x24>
 80017e8:	4d0b      	ldr	r5, [pc, #44]	; (8001818 <__libc_init_array+0x40>)
 80017ea:	4c0c      	ldr	r4, [pc, #48]	; (800181c <__libc_init_array+0x44>)
 80017ec:	f001 fa9e 	bl	8002d2c <_init>
 80017f0:	1b64      	subs	r4, r4, r5
 80017f2:	10a4      	asrs	r4, r4, #2
 80017f4:	2600      	movs	r6, #0
 80017f6:	42a6      	cmp	r6, r4
 80017f8:	d105      	bne.n	8001806 <__libc_init_array+0x2e>
 80017fa:	bd70      	pop	{r4, r5, r6, pc}
 80017fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001800:	4798      	blx	r3
 8001802:	3601      	adds	r6, #1
 8001804:	e7ee      	b.n	80017e4 <__libc_init_array+0xc>
 8001806:	f855 3b04 	ldr.w	r3, [r5], #4
 800180a:	4798      	blx	r3
 800180c:	3601      	adds	r6, #1
 800180e:	e7f2      	b.n	80017f6 <__libc_init_array+0x1e>
 8001810:	08002e08 	.word	0x08002e08
 8001814:	08002e08 	.word	0x08002e08
 8001818:	08002e08 	.word	0x08002e08
 800181c:	08002e0c 	.word	0x08002e0c

08001820 <memset>:
 8001820:	4402      	add	r2, r0
 8001822:	4603      	mov	r3, r0
 8001824:	4293      	cmp	r3, r2
 8001826:	d100      	bne.n	800182a <memset+0xa>
 8001828:	4770      	bx	lr
 800182a:	f803 1b01 	strb.w	r1, [r3], #1
 800182e:	e7f9      	b.n	8001824 <memset+0x4>

08001830 <iprintf>:
 8001830:	b40f      	push	{r0, r1, r2, r3}
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <iprintf+0x2c>)
 8001834:	b513      	push	{r0, r1, r4, lr}
 8001836:	681c      	ldr	r4, [r3, #0]
 8001838:	b124      	cbz	r4, 8001844 <iprintf+0x14>
 800183a:	69a3      	ldr	r3, [r4, #24]
 800183c:	b913      	cbnz	r3, 8001844 <iprintf+0x14>
 800183e:	4620      	mov	r0, r4
 8001840:	f000 f886 	bl	8001950 <__sinit>
 8001844:	ab05      	add	r3, sp, #20
 8001846:	9a04      	ldr	r2, [sp, #16]
 8001848:	68a1      	ldr	r1, [r4, #8]
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	4620      	mov	r0, r4
 800184e:	f000 faff 	bl	8001e50 <_vfiprintf_r>
 8001852:	b002      	add	sp, #8
 8001854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001858:	b004      	add	sp, #16
 800185a:	4770      	bx	lr
 800185c:	20000000 	.word	0x20000000

08001860 <siprintf>:
 8001860:	b40e      	push	{r1, r2, r3}
 8001862:	b500      	push	{lr}
 8001864:	b09c      	sub	sp, #112	; 0x70
 8001866:	ab1d      	add	r3, sp, #116	; 0x74
 8001868:	9002      	str	r0, [sp, #8]
 800186a:	9006      	str	r0, [sp, #24]
 800186c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001870:	4809      	ldr	r0, [pc, #36]	; (8001898 <siprintf+0x38>)
 8001872:	9107      	str	r1, [sp, #28]
 8001874:	9104      	str	r1, [sp, #16]
 8001876:	4909      	ldr	r1, [pc, #36]	; (800189c <siprintf+0x3c>)
 8001878:	f853 2b04 	ldr.w	r2, [r3], #4
 800187c:	9105      	str	r1, [sp, #20]
 800187e:	6800      	ldr	r0, [r0, #0]
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	a902      	add	r1, sp, #8
 8001884:	f000 f9ba 	bl	8001bfc <_svfiprintf_r>
 8001888:	9b02      	ldr	r3, [sp, #8]
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
 800188e:	b01c      	add	sp, #112	; 0x70
 8001890:	f85d eb04 	ldr.w	lr, [sp], #4
 8001894:	b003      	add	sp, #12
 8001896:	4770      	bx	lr
 8001898:	20000000 	.word	0x20000000
 800189c:	ffff0208 	.word	0xffff0208

080018a0 <std>:
 80018a0:	2300      	movs	r3, #0
 80018a2:	b510      	push	{r4, lr}
 80018a4:	4604      	mov	r4, r0
 80018a6:	e9c0 3300 	strd	r3, r3, [r0]
 80018aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80018ae:	6083      	str	r3, [r0, #8]
 80018b0:	8181      	strh	r1, [r0, #12]
 80018b2:	6643      	str	r3, [r0, #100]	; 0x64
 80018b4:	81c2      	strh	r2, [r0, #14]
 80018b6:	6183      	str	r3, [r0, #24]
 80018b8:	4619      	mov	r1, r3
 80018ba:	2208      	movs	r2, #8
 80018bc:	305c      	adds	r0, #92	; 0x5c
 80018be:	f7ff ffaf 	bl	8001820 <memset>
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <std+0x38>)
 80018c4:	6263      	str	r3, [r4, #36]	; 0x24
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <std+0x3c>)
 80018c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <std+0x40>)
 80018cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <std+0x44>)
 80018d0:	6224      	str	r4, [r4, #32]
 80018d2:	6323      	str	r3, [r4, #48]	; 0x30
 80018d4:	bd10      	pop	{r4, pc}
 80018d6:	bf00      	nop
 80018d8:	080023f9 	.word	0x080023f9
 80018dc:	0800241b 	.word	0x0800241b
 80018e0:	08002453 	.word	0x08002453
 80018e4:	08002477 	.word	0x08002477

080018e8 <_cleanup_r>:
 80018e8:	4901      	ldr	r1, [pc, #4]	; (80018f0 <_cleanup_r+0x8>)
 80018ea:	f000 b8af 	b.w	8001a4c <_fwalk_reent>
 80018ee:	bf00      	nop
 80018f0:	08002751 	.word	0x08002751

080018f4 <__sfmoreglue>:
 80018f4:	b570      	push	{r4, r5, r6, lr}
 80018f6:	1e4a      	subs	r2, r1, #1
 80018f8:	2568      	movs	r5, #104	; 0x68
 80018fa:	4355      	muls	r5, r2
 80018fc:	460e      	mov	r6, r1
 80018fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001902:	f000 f8c5 	bl	8001a90 <_malloc_r>
 8001906:	4604      	mov	r4, r0
 8001908:	b140      	cbz	r0, 800191c <__sfmoreglue+0x28>
 800190a:	2100      	movs	r1, #0
 800190c:	e9c0 1600 	strd	r1, r6, [r0]
 8001910:	300c      	adds	r0, #12
 8001912:	60a0      	str	r0, [r4, #8]
 8001914:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001918:	f7ff ff82 	bl	8001820 <memset>
 800191c:	4620      	mov	r0, r4
 800191e:	bd70      	pop	{r4, r5, r6, pc}

08001920 <__sfp_lock_acquire>:
 8001920:	4801      	ldr	r0, [pc, #4]	; (8001928 <__sfp_lock_acquire+0x8>)
 8001922:	f000 b8b3 	b.w	8001a8c <__retarget_lock_acquire_recursive>
 8001926:	bf00      	nop
 8001928:	20000178 	.word	0x20000178

0800192c <__sfp_lock_release>:
 800192c:	4801      	ldr	r0, [pc, #4]	; (8001934 <__sfp_lock_release+0x8>)
 800192e:	f000 b8ae 	b.w	8001a8e <__retarget_lock_release_recursive>
 8001932:	bf00      	nop
 8001934:	20000178 	.word	0x20000178

08001938 <__sinit_lock_acquire>:
 8001938:	4801      	ldr	r0, [pc, #4]	; (8001940 <__sinit_lock_acquire+0x8>)
 800193a:	f000 b8a7 	b.w	8001a8c <__retarget_lock_acquire_recursive>
 800193e:	bf00      	nop
 8001940:	20000173 	.word	0x20000173

08001944 <__sinit_lock_release>:
 8001944:	4801      	ldr	r0, [pc, #4]	; (800194c <__sinit_lock_release+0x8>)
 8001946:	f000 b8a2 	b.w	8001a8e <__retarget_lock_release_recursive>
 800194a:	bf00      	nop
 800194c:	20000173 	.word	0x20000173

08001950 <__sinit>:
 8001950:	b510      	push	{r4, lr}
 8001952:	4604      	mov	r4, r0
 8001954:	f7ff fff0 	bl	8001938 <__sinit_lock_acquire>
 8001958:	69a3      	ldr	r3, [r4, #24]
 800195a:	b11b      	cbz	r3, 8001964 <__sinit+0x14>
 800195c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001960:	f7ff bff0 	b.w	8001944 <__sinit_lock_release>
 8001964:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001968:	6523      	str	r3, [r4, #80]	; 0x50
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <__sinit+0x68>)
 800196c:	4a13      	ldr	r2, [pc, #76]	; (80019bc <__sinit+0x6c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	62a2      	str	r2, [r4, #40]	; 0x28
 8001972:	42a3      	cmp	r3, r4
 8001974:	bf04      	itt	eq
 8001976:	2301      	moveq	r3, #1
 8001978:	61a3      	streq	r3, [r4, #24]
 800197a:	4620      	mov	r0, r4
 800197c:	f000 f820 	bl	80019c0 <__sfp>
 8001980:	6060      	str	r0, [r4, #4]
 8001982:	4620      	mov	r0, r4
 8001984:	f000 f81c 	bl	80019c0 <__sfp>
 8001988:	60a0      	str	r0, [r4, #8]
 800198a:	4620      	mov	r0, r4
 800198c:	f000 f818 	bl	80019c0 <__sfp>
 8001990:	2200      	movs	r2, #0
 8001992:	60e0      	str	r0, [r4, #12]
 8001994:	2104      	movs	r1, #4
 8001996:	6860      	ldr	r0, [r4, #4]
 8001998:	f7ff ff82 	bl	80018a0 <std>
 800199c:	68a0      	ldr	r0, [r4, #8]
 800199e:	2201      	movs	r2, #1
 80019a0:	2109      	movs	r1, #9
 80019a2:	f7ff ff7d 	bl	80018a0 <std>
 80019a6:	68e0      	ldr	r0, [r4, #12]
 80019a8:	2202      	movs	r2, #2
 80019aa:	2112      	movs	r1, #18
 80019ac:	f7ff ff78 	bl	80018a0 <std>
 80019b0:	2301      	movs	r3, #1
 80019b2:	61a3      	str	r3, [r4, #24]
 80019b4:	e7d2      	b.n	800195c <__sinit+0xc>
 80019b6:	bf00      	nop
 80019b8:	08002d70 	.word	0x08002d70
 80019bc:	080018e9 	.word	0x080018e9

080019c0 <__sfp>:
 80019c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c2:	4607      	mov	r7, r0
 80019c4:	f7ff ffac 	bl	8001920 <__sfp_lock_acquire>
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <__sfp+0x84>)
 80019ca:	681e      	ldr	r6, [r3, #0]
 80019cc:	69b3      	ldr	r3, [r6, #24]
 80019ce:	b913      	cbnz	r3, 80019d6 <__sfp+0x16>
 80019d0:	4630      	mov	r0, r6
 80019d2:	f7ff ffbd 	bl	8001950 <__sinit>
 80019d6:	3648      	adds	r6, #72	; 0x48
 80019d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80019dc:	3b01      	subs	r3, #1
 80019de:	d503      	bpl.n	80019e8 <__sfp+0x28>
 80019e0:	6833      	ldr	r3, [r6, #0]
 80019e2:	b30b      	cbz	r3, 8001a28 <__sfp+0x68>
 80019e4:	6836      	ldr	r6, [r6, #0]
 80019e6:	e7f7      	b.n	80019d8 <__sfp+0x18>
 80019e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80019ec:	b9d5      	cbnz	r5, 8001a24 <__sfp+0x64>
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <__sfp+0x88>)
 80019f0:	60e3      	str	r3, [r4, #12]
 80019f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80019f6:	6665      	str	r5, [r4, #100]	; 0x64
 80019f8:	f000 f847 	bl	8001a8a <__retarget_lock_init_recursive>
 80019fc:	f7ff ff96 	bl	800192c <__sfp_lock_release>
 8001a00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001a04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001a08:	6025      	str	r5, [r4, #0]
 8001a0a:	61a5      	str	r5, [r4, #24]
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	4629      	mov	r1, r5
 8001a10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a14:	f7ff ff04 	bl	8001820 <memset>
 8001a18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a20:	4620      	mov	r0, r4
 8001a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a24:	3468      	adds	r4, #104	; 0x68
 8001a26:	e7d9      	b.n	80019dc <__sfp+0x1c>
 8001a28:	2104      	movs	r1, #4
 8001a2a:	4638      	mov	r0, r7
 8001a2c:	f7ff ff62 	bl	80018f4 <__sfmoreglue>
 8001a30:	4604      	mov	r4, r0
 8001a32:	6030      	str	r0, [r6, #0]
 8001a34:	2800      	cmp	r0, #0
 8001a36:	d1d5      	bne.n	80019e4 <__sfp+0x24>
 8001a38:	f7ff ff78 	bl	800192c <__sfp_lock_release>
 8001a3c:	230c      	movs	r3, #12
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	e7ee      	b.n	8001a20 <__sfp+0x60>
 8001a42:	bf00      	nop
 8001a44:	08002d70 	.word	0x08002d70
 8001a48:	ffff0001 	.word	0xffff0001

08001a4c <_fwalk_reent>:
 8001a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a50:	4606      	mov	r6, r0
 8001a52:	4688      	mov	r8, r1
 8001a54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a58:	2700      	movs	r7, #0
 8001a5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a5e:	f1b9 0901 	subs.w	r9, r9, #1
 8001a62:	d505      	bpl.n	8001a70 <_fwalk_reent+0x24>
 8001a64:	6824      	ldr	r4, [r4, #0]
 8001a66:	2c00      	cmp	r4, #0
 8001a68:	d1f7      	bne.n	8001a5a <_fwalk_reent+0xe>
 8001a6a:	4638      	mov	r0, r7
 8001a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a70:	89ab      	ldrh	r3, [r5, #12]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d907      	bls.n	8001a86 <_fwalk_reent+0x3a>
 8001a76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	d003      	beq.n	8001a86 <_fwalk_reent+0x3a>
 8001a7e:	4629      	mov	r1, r5
 8001a80:	4630      	mov	r0, r6
 8001a82:	47c0      	blx	r8
 8001a84:	4307      	orrs	r7, r0
 8001a86:	3568      	adds	r5, #104	; 0x68
 8001a88:	e7e9      	b.n	8001a5e <_fwalk_reent+0x12>

08001a8a <__retarget_lock_init_recursive>:
 8001a8a:	4770      	bx	lr

08001a8c <__retarget_lock_acquire_recursive>:
 8001a8c:	4770      	bx	lr

08001a8e <__retarget_lock_release_recursive>:
 8001a8e:	4770      	bx	lr

08001a90 <_malloc_r>:
 8001a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a92:	1ccd      	adds	r5, r1, #3
 8001a94:	f025 0503 	bic.w	r5, r5, #3
 8001a98:	3508      	adds	r5, #8
 8001a9a:	2d0c      	cmp	r5, #12
 8001a9c:	bf38      	it	cc
 8001a9e:	250c      	movcc	r5, #12
 8001aa0:	2d00      	cmp	r5, #0
 8001aa2:	4606      	mov	r6, r0
 8001aa4:	db01      	blt.n	8001aaa <_malloc_r+0x1a>
 8001aa6:	42a9      	cmp	r1, r5
 8001aa8:	d903      	bls.n	8001ab2 <_malloc_r+0x22>
 8001aaa:	230c      	movs	r3, #12
 8001aac:	6033      	str	r3, [r6, #0]
 8001aae:	2000      	movs	r0, #0
 8001ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ab2:	f000 ff27 	bl	8002904 <__malloc_lock>
 8001ab6:	4921      	ldr	r1, [pc, #132]	; (8001b3c <_malloc_r+0xac>)
 8001ab8:	680a      	ldr	r2, [r1, #0]
 8001aba:	4614      	mov	r4, r2
 8001abc:	b99c      	cbnz	r4, 8001ae6 <_malloc_r+0x56>
 8001abe:	4f20      	ldr	r7, [pc, #128]	; (8001b40 <_malloc_r+0xb0>)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	b923      	cbnz	r3, 8001ace <_malloc_r+0x3e>
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f000 fc86 	bl	80023d8 <_sbrk_r>
 8001acc:	6038      	str	r0, [r7, #0]
 8001ace:	4629      	mov	r1, r5
 8001ad0:	4630      	mov	r0, r6
 8001ad2:	f000 fc81 	bl	80023d8 <_sbrk_r>
 8001ad6:	1c43      	adds	r3, r0, #1
 8001ad8:	d123      	bne.n	8001b22 <_malloc_r+0x92>
 8001ada:	230c      	movs	r3, #12
 8001adc:	6033      	str	r3, [r6, #0]
 8001ade:	4630      	mov	r0, r6
 8001ae0:	f000 ff16 	bl	8002910 <__malloc_unlock>
 8001ae4:	e7e3      	b.n	8001aae <_malloc_r+0x1e>
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	1b5b      	subs	r3, r3, r5
 8001aea:	d417      	bmi.n	8001b1c <_malloc_r+0x8c>
 8001aec:	2b0b      	cmp	r3, #11
 8001aee:	d903      	bls.n	8001af8 <_malloc_r+0x68>
 8001af0:	6023      	str	r3, [r4, #0]
 8001af2:	441c      	add	r4, r3
 8001af4:	6025      	str	r5, [r4, #0]
 8001af6:	e004      	b.n	8001b02 <_malloc_r+0x72>
 8001af8:	6863      	ldr	r3, [r4, #4]
 8001afa:	42a2      	cmp	r2, r4
 8001afc:	bf0c      	ite	eq
 8001afe:	600b      	streq	r3, [r1, #0]
 8001b00:	6053      	strne	r3, [r2, #4]
 8001b02:	4630      	mov	r0, r6
 8001b04:	f000 ff04 	bl	8002910 <__malloc_unlock>
 8001b08:	f104 000b 	add.w	r0, r4, #11
 8001b0c:	1d23      	adds	r3, r4, #4
 8001b0e:	f020 0007 	bic.w	r0, r0, #7
 8001b12:	1ac2      	subs	r2, r0, r3
 8001b14:	d0cc      	beq.n	8001ab0 <_malloc_r+0x20>
 8001b16:	1a1b      	subs	r3, r3, r0
 8001b18:	50a3      	str	r3, [r4, r2]
 8001b1a:	e7c9      	b.n	8001ab0 <_malloc_r+0x20>
 8001b1c:	4622      	mov	r2, r4
 8001b1e:	6864      	ldr	r4, [r4, #4]
 8001b20:	e7cc      	b.n	8001abc <_malloc_r+0x2c>
 8001b22:	1cc4      	adds	r4, r0, #3
 8001b24:	f024 0403 	bic.w	r4, r4, #3
 8001b28:	42a0      	cmp	r0, r4
 8001b2a:	d0e3      	beq.n	8001af4 <_malloc_r+0x64>
 8001b2c:	1a21      	subs	r1, r4, r0
 8001b2e:	4630      	mov	r0, r6
 8001b30:	f000 fc52 	bl	80023d8 <_sbrk_r>
 8001b34:	3001      	adds	r0, #1
 8001b36:	d1dd      	bne.n	8001af4 <_malloc_r+0x64>
 8001b38:	e7cf      	b.n	8001ada <_malloc_r+0x4a>
 8001b3a:	bf00      	nop
 8001b3c:	20000088 	.word	0x20000088
 8001b40:	2000008c 	.word	0x2000008c

08001b44 <__ssputs_r>:
 8001b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b48:	688e      	ldr	r6, [r1, #8]
 8001b4a:	429e      	cmp	r6, r3
 8001b4c:	4682      	mov	sl, r0
 8001b4e:	460c      	mov	r4, r1
 8001b50:	4690      	mov	r8, r2
 8001b52:	461f      	mov	r7, r3
 8001b54:	d838      	bhi.n	8001bc8 <__ssputs_r+0x84>
 8001b56:	898a      	ldrh	r2, [r1, #12]
 8001b58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001b5c:	d032      	beq.n	8001bc4 <__ssputs_r+0x80>
 8001b5e:	6825      	ldr	r5, [r4, #0]
 8001b60:	6909      	ldr	r1, [r1, #16]
 8001b62:	eba5 0901 	sub.w	r9, r5, r1
 8001b66:	6965      	ldr	r5, [r4, #20]
 8001b68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001b70:	3301      	adds	r3, #1
 8001b72:	444b      	add	r3, r9
 8001b74:	106d      	asrs	r5, r5, #1
 8001b76:	429d      	cmp	r5, r3
 8001b78:	bf38      	it	cc
 8001b7a:	461d      	movcc	r5, r3
 8001b7c:	0553      	lsls	r3, r2, #21
 8001b7e:	d531      	bpl.n	8001be4 <__ssputs_r+0xa0>
 8001b80:	4629      	mov	r1, r5
 8001b82:	f7ff ff85 	bl	8001a90 <_malloc_r>
 8001b86:	4606      	mov	r6, r0
 8001b88:	b950      	cbnz	r0, 8001ba0 <__ssputs_r+0x5c>
 8001b8a:	230c      	movs	r3, #12
 8001b8c:	f8ca 3000 	str.w	r3, [sl]
 8001b90:	89a3      	ldrh	r3, [r4, #12]
 8001b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b96:	81a3      	strh	r3, [r4, #12]
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ba0:	6921      	ldr	r1, [r4, #16]
 8001ba2:	464a      	mov	r2, r9
 8001ba4:	f000 fe86 	bl	80028b4 <memcpy>
 8001ba8:	89a3      	ldrh	r3, [r4, #12]
 8001baa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb2:	81a3      	strh	r3, [r4, #12]
 8001bb4:	6126      	str	r6, [r4, #16]
 8001bb6:	6165      	str	r5, [r4, #20]
 8001bb8:	444e      	add	r6, r9
 8001bba:	eba5 0509 	sub.w	r5, r5, r9
 8001bbe:	6026      	str	r6, [r4, #0]
 8001bc0:	60a5      	str	r5, [r4, #8]
 8001bc2:	463e      	mov	r6, r7
 8001bc4:	42be      	cmp	r6, r7
 8001bc6:	d900      	bls.n	8001bca <__ssputs_r+0x86>
 8001bc8:	463e      	mov	r6, r7
 8001bca:	4632      	mov	r2, r6
 8001bcc:	6820      	ldr	r0, [r4, #0]
 8001bce:	4641      	mov	r1, r8
 8001bd0:	f000 fe7e 	bl	80028d0 <memmove>
 8001bd4:	68a3      	ldr	r3, [r4, #8]
 8001bd6:	6822      	ldr	r2, [r4, #0]
 8001bd8:	1b9b      	subs	r3, r3, r6
 8001bda:	4432      	add	r2, r6
 8001bdc:	60a3      	str	r3, [r4, #8]
 8001bde:	6022      	str	r2, [r4, #0]
 8001be0:	2000      	movs	r0, #0
 8001be2:	e7db      	b.n	8001b9c <__ssputs_r+0x58>
 8001be4:	462a      	mov	r2, r5
 8001be6:	f000 fee9 	bl	80029bc <_realloc_r>
 8001bea:	4606      	mov	r6, r0
 8001bec:	2800      	cmp	r0, #0
 8001bee:	d1e1      	bne.n	8001bb4 <__ssputs_r+0x70>
 8001bf0:	6921      	ldr	r1, [r4, #16]
 8001bf2:	4650      	mov	r0, sl
 8001bf4:	f000 fe92 	bl	800291c <_free_r>
 8001bf8:	e7c7      	b.n	8001b8a <__ssputs_r+0x46>
	...

08001bfc <_svfiprintf_r>:
 8001bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c00:	4698      	mov	r8, r3
 8001c02:	898b      	ldrh	r3, [r1, #12]
 8001c04:	061b      	lsls	r3, r3, #24
 8001c06:	b09d      	sub	sp, #116	; 0x74
 8001c08:	4607      	mov	r7, r0
 8001c0a:	460d      	mov	r5, r1
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	d50e      	bpl.n	8001c2e <_svfiprintf_r+0x32>
 8001c10:	690b      	ldr	r3, [r1, #16]
 8001c12:	b963      	cbnz	r3, 8001c2e <_svfiprintf_r+0x32>
 8001c14:	2140      	movs	r1, #64	; 0x40
 8001c16:	f7ff ff3b 	bl	8001a90 <_malloc_r>
 8001c1a:	6028      	str	r0, [r5, #0]
 8001c1c:	6128      	str	r0, [r5, #16]
 8001c1e:	b920      	cbnz	r0, 8001c2a <_svfiprintf_r+0x2e>
 8001c20:	230c      	movs	r3, #12
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	e0d1      	b.n	8001dce <_svfiprintf_r+0x1d2>
 8001c2a:	2340      	movs	r3, #64	; 0x40
 8001c2c:	616b      	str	r3, [r5, #20]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	9309      	str	r3, [sp, #36]	; 0x24
 8001c32:	2320      	movs	r3, #32
 8001c34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c38:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c3c:	2330      	movs	r3, #48	; 0x30
 8001c3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001de8 <_svfiprintf_r+0x1ec>
 8001c42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c46:	f04f 0901 	mov.w	r9, #1
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	469a      	mov	sl, r3
 8001c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c52:	b10a      	cbz	r2, 8001c58 <_svfiprintf_r+0x5c>
 8001c54:	2a25      	cmp	r2, #37	; 0x25
 8001c56:	d1f9      	bne.n	8001c4c <_svfiprintf_r+0x50>
 8001c58:	ebba 0b04 	subs.w	fp, sl, r4
 8001c5c:	d00b      	beq.n	8001c76 <_svfiprintf_r+0x7a>
 8001c5e:	465b      	mov	r3, fp
 8001c60:	4622      	mov	r2, r4
 8001c62:	4629      	mov	r1, r5
 8001c64:	4638      	mov	r0, r7
 8001c66:	f7ff ff6d 	bl	8001b44 <__ssputs_r>
 8001c6a:	3001      	adds	r0, #1
 8001c6c:	f000 80aa 	beq.w	8001dc4 <_svfiprintf_r+0x1c8>
 8001c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c72:	445a      	add	r2, fp
 8001c74:	9209      	str	r2, [sp, #36]	; 0x24
 8001c76:	f89a 3000 	ldrb.w	r3, [sl]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80a2 	beq.w	8001dc4 <_svfiprintf_r+0x1c8>
 8001c80:	2300      	movs	r3, #0
 8001c82:	f04f 32ff 	mov.w	r2, #4294967295
 8001c86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c8a:	f10a 0a01 	add.w	sl, sl, #1
 8001c8e:	9304      	str	r3, [sp, #16]
 8001c90:	9307      	str	r3, [sp, #28]
 8001c92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c96:	931a      	str	r3, [sp, #104]	; 0x68
 8001c98:	4654      	mov	r4, sl
 8001c9a:	2205      	movs	r2, #5
 8001c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ca0:	4851      	ldr	r0, [pc, #324]	; (8001de8 <_svfiprintf_r+0x1ec>)
 8001ca2:	f7fe fa9d 	bl	80001e0 <memchr>
 8001ca6:	9a04      	ldr	r2, [sp, #16]
 8001ca8:	b9d8      	cbnz	r0, 8001ce2 <_svfiprintf_r+0xe6>
 8001caa:	06d0      	lsls	r0, r2, #27
 8001cac:	bf44      	itt	mi
 8001cae:	2320      	movmi	r3, #32
 8001cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cb4:	0711      	lsls	r1, r2, #28
 8001cb6:	bf44      	itt	mi
 8001cb8:	232b      	movmi	r3, #43	; 0x2b
 8001cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8001cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8001cc4:	d015      	beq.n	8001cf2 <_svfiprintf_r+0xf6>
 8001cc6:	9a07      	ldr	r2, [sp, #28]
 8001cc8:	4654      	mov	r4, sl
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f04f 0c0a 	mov.w	ip, #10
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cd6:	3b30      	subs	r3, #48	; 0x30
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	d94e      	bls.n	8001d7a <_svfiprintf_r+0x17e>
 8001cdc:	b1b0      	cbz	r0, 8001d0c <_svfiprintf_r+0x110>
 8001cde:	9207      	str	r2, [sp, #28]
 8001ce0:	e014      	b.n	8001d0c <_svfiprintf_r+0x110>
 8001ce2:	eba0 0308 	sub.w	r3, r0, r8
 8001ce6:	fa09 f303 	lsl.w	r3, r9, r3
 8001cea:	4313      	orrs	r3, r2
 8001cec:	9304      	str	r3, [sp, #16]
 8001cee:	46a2      	mov	sl, r4
 8001cf0:	e7d2      	b.n	8001c98 <_svfiprintf_r+0x9c>
 8001cf2:	9b03      	ldr	r3, [sp, #12]
 8001cf4:	1d19      	adds	r1, r3, #4
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	9103      	str	r1, [sp, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bfbb      	ittet	lt
 8001cfe:	425b      	neglt	r3, r3
 8001d00:	f042 0202 	orrlt.w	r2, r2, #2
 8001d04:	9307      	strge	r3, [sp, #28]
 8001d06:	9307      	strlt	r3, [sp, #28]
 8001d08:	bfb8      	it	lt
 8001d0a:	9204      	strlt	r2, [sp, #16]
 8001d0c:	7823      	ldrb	r3, [r4, #0]
 8001d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8001d10:	d10c      	bne.n	8001d2c <_svfiprintf_r+0x130>
 8001d12:	7863      	ldrb	r3, [r4, #1]
 8001d14:	2b2a      	cmp	r3, #42	; 0x2a
 8001d16:	d135      	bne.n	8001d84 <_svfiprintf_r+0x188>
 8001d18:	9b03      	ldr	r3, [sp, #12]
 8001d1a:	1d1a      	adds	r2, r3, #4
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	9203      	str	r2, [sp, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bfb8      	it	lt
 8001d24:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d28:	3402      	adds	r4, #2
 8001d2a:	9305      	str	r3, [sp, #20]
 8001d2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001df8 <_svfiprintf_r+0x1fc>
 8001d30:	7821      	ldrb	r1, [r4, #0]
 8001d32:	2203      	movs	r2, #3
 8001d34:	4650      	mov	r0, sl
 8001d36:	f7fe fa53 	bl	80001e0 <memchr>
 8001d3a:	b140      	cbz	r0, 8001d4e <_svfiprintf_r+0x152>
 8001d3c:	2340      	movs	r3, #64	; 0x40
 8001d3e:	eba0 000a 	sub.w	r0, r0, sl
 8001d42:	fa03 f000 	lsl.w	r0, r3, r0
 8001d46:	9b04      	ldr	r3, [sp, #16]
 8001d48:	4303      	orrs	r3, r0
 8001d4a:	3401      	adds	r4, #1
 8001d4c:	9304      	str	r3, [sp, #16]
 8001d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d52:	4826      	ldr	r0, [pc, #152]	; (8001dec <_svfiprintf_r+0x1f0>)
 8001d54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d58:	2206      	movs	r2, #6
 8001d5a:	f7fe fa41 	bl	80001e0 <memchr>
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	d038      	beq.n	8001dd4 <_svfiprintf_r+0x1d8>
 8001d62:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <_svfiprintf_r+0x1f4>)
 8001d64:	bb1b      	cbnz	r3, 8001dae <_svfiprintf_r+0x1b2>
 8001d66:	9b03      	ldr	r3, [sp, #12]
 8001d68:	3307      	adds	r3, #7
 8001d6a:	f023 0307 	bic.w	r3, r3, #7
 8001d6e:	3308      	adds	r3, #8
 8001d70:	9303      	str	r3, [sp, #12]
 8001d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d74:	4433      	add	r3, r6
 8001d76:	9309      	str	r3, [sp, #36]	; 0x24
 8001d78:	e767      	b.n	8001c4a <_svfiprintf_r+0x4e>
 8001d7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d7e:	460c      	mov	r4, r1
 8001d80:	2001      	movs	r0, #1
 8001d82:	e7a5      	b.n	8001cd0 <_svfiprintf_r+0xd4>
 8001d84:	2300      	movs	r3, #0
 8001d86:	3401      	adds	r4, #1
 8001d88:	9305      	str	r3, [sp, #20]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f04f 0c0a 	mov.w	ip, #10
 8001d90:	4620      	mov	r0, r4
 8001d92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d96:	3a30      	subs	r2, #48	; 0x30
 8001d98:	2a09      	cmp	r2, #9
 8001d9a:	d903      	bls.n	8001da4 <_svfiprintf_r+0x1a8>
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0c5      	beq.n	8001d2c <_svfiprintf_r+0x130>
 8001da0:	9105      	str	r1, [sp, #20]
 8001da2:	e7c3      	b.n	8001d2c <_svfiprintf_r+0x130>
 8001da4:	fb0c 2101 	mla	r1, ip, r1, r2
 8001da8:	4604      	mov	r4, r0
 8001daa:	2301      	movs	r3, #1
 8001dac:	e7f0      	b.n	8001d90 <_svfiprintf_r+0x194>
 8001dae:	ab03      	add	r3, sp, #12
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	462a      	mov	r2, r5
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <_svfiprintf_r+0x1f8>)
 8001db6:	a904      	add	r1, sp, #16
 8001db8:	4638      	mov	r0, r7
 8001dba:	f3af 8000 	nop.w
 8001dbe:	1c42      	adds	r2, r0, #1
 8001dc0:	4606      	mov	r6, r0
 8001dc2:	d1d6      	bne.n	8001d72 <_svfiprintf_r+0x176>
 8001dc4:	89ab      	ldrh	r3, [r5, #12]
 8001dc6:	065b      	lsls	r3, r3, #25
 8001dc8:	f53f af2c 	bmi.w	8001c24 <_svfiprintf_r+0x28>
 8001dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001dce:	b01d      	add	sp, #116	; 0x74
 8001dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dd4:	ab03      	add	r3, sp, #12
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	462a      	mov	r2, r5
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <_svfiprintf_r+0x1f8>)
 8001ddc:	a904      	add	r1, sp, #16
 8001dde:	4638      	mov	r0, r7
 8001de0:	f000 f9d4 	bl	800218c <_printf_i>
 8001de4:	e7eb      	b.n	8001dbe <_svfiprintf_r+0x1c2>
 8001de6:	bf00      	nop
 8001de8:	08002dd4 	.word	0x08002dd4
 8001dec:	08002dde 	.word	0x08002dde
 8001df0:	00000000 	.word	0x00000000
 8001df4:	08001b45 	.word	0x08001b45
 8001df8:	08002dda 	.word	0x08002dda

08001dfc <__sfputc_r>:
 8001dfc:	6893      	ldr	r3, [r2, #8]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	b410      	push	{r4}
 8001e04:	6093      	str	r3, [r2, #8]
 8001e06:	da08      	bge.n	8001e1a <__sfputc_r+0x1e>
 8001e08:	6994      	ldr	r4, [r2, #24]
 8001e0a:	42a3      	cmp	r3, r4
 8001e0c:	db01      	blt.n	8001e12 <__sfputc_r+0x16>
 8001e0e:	290a      	cmp	r1, #10
 8001e10:	d103      	bne.n	8001e1a <__sfputc_r+0x1e>
 8001e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e16:	f000 bb33 	b.w	8002480 <__swbuf_r>
 8001e1a:	6813      	ldr	r3, [r2, #0]
 8001e1c:	1c58      	adds	r0, r3, #1
 8001e1e:	6010      	str	r0, [r2, #0]
 8001e20:	7019      	strb	r1, [r3, #0]
 8001e22:	4608      	mov	r0, r1
 8001e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <__sfputs_r>:
 8001e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2c:	4606      	mov	r6, r0
 8001e2e:	460f      	mov	r7, r1
 8001e30:	4614      	mov	r4, r2
 8001e32:	18d5      	adds	r5, r2, r3
 8001e34:	42ac      	cmp	r4, r5
 8001e36:	d101      	bne.n	8001e3c <__sfputs_r+0x12>
 8001e38:	2000      	movs	r0, #0
 8001e3a:	e007      	b.n	8001e4c <__sfputs_r+0x22>
 8001e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e40:	463a      	mov	r2, r7
 8001e42:	4630      	mov	r0, r6
 8001e44:	f7ff ffda 	bl	8001dfc <__sfputc_r>
 8001e48:	1c43      	adds	r3, r0, #1
 8001e4a:	d1f3      	bne.n	8001e34 <__sfputs_r+0xa>
 8001e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e50 <_vfiprintf_r>:
 8001e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e54:	460d      	mov	r5, r1
 8001e56:	b09d      	sub	sp, #116	; 0x74
 8001e58:	4614      	mov	r4, r2
 8001e5a:	4698      	mov	r8, r3
 8001e5c:	4606      	mov	r6, r0
 8001e5e:	b118      	cbz	r0, 8001e68 <_vfiprintf_r+0x18>
 8001e60:	6983      	ldr	r3, [r0, #24]
 8001e62:	b90b      	cbnz	r3, 8001e68 <_vfiprintf_r+0x18>
 8001e64:	f7ff fd74 	bl	8001950 <__sinit>
 8001e68:	4b89      	ldr	r3, [pc, #548]	; (8002090 <_vfiprintf_r+0x240>)
 8001e6a:	429d      	cmp	r5, r3
 8001e6c:	d11b      	bne.n	8001ea6 <_vfiprintf_r+0x56>
 8001e6e:	6875      	ldr	r5, [r6, #4]
 8001e70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e72:	07d9      	lsls	r1, r3, #31
 8001e74:	d405      	bmi.n	8001e82 <_vfiprintf_r+0x32>
 8001e76:	89ab      	ldrh	r3, [r5, #12]
 8001e78:	059a      	lsls	r2, r3, #22
 8001e7a:	d402      	bmi.n	8001e82 <_vfiprintf_r+0x32>
 8001e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e7e:	f7ff fe05 	bl	8001a8c <__retarget_lock_acquire_recursive>
 8001e82:	89ab      	ldrh	r3, [r5, #12]
 8001e84:	071b      	lsls	r3, r3, #28
 8001e86:	d501      	bpl.n	8001e8c <_vfiprintf_r+0x3c>
 8001e88:	692b      	ldr	r3, [r5, #16]
 8001e8a:	b9eb      	cbnz	r3, 8001ec8 <_vfiprintf_r+0x78>
 8001e8c:	4629      	mov	r1, r5
 8001e8e:	4630      	mov	r0, r6
 8001e90:	f000 fb5a 	bl	8002548 <__swsetup_r>
 8001e94:	b1c0      	cbz	r0, 8001ec8 <_vfiprintf_r+0x78>
 8001e96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e98:	07dc      	lsls	r4, r3, #31
 8001e9a:	d50e      	bpl.n	8001eba <_vfiprintf_r+0x6a>
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	b01d      	add	sp, #116	; 0x74
 8001ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ea6:	4b7b      	ldr	r3, [pc, #492]	; (8002094 <_vfiprintf_r+0x244>)
 8001ea8:	429d      	cmp	r5, r3
 8001eaa:	d101      	bne.n	8001eb0 <_vfiprintf_r+0x60>
 8001eac:	68b5      	ldr	r5, [r6, #8]
 8001eae:	e7df      	b.n	8001e70 <_vfiprintf_r+0x20>
 8001eb0:	4b79      	ldr	r3, [pc, #484]	; (8002098 <_vfiprintf_r+0x248>)
 8001eb2:	429d      	cmp	r5, r3
 8001eb4:	bf08      	it	eq
 8001eb6:	68f5      	ldreq	r5, [r6, #12]
 8001eb8:	e7da      	b.n	8001e70 <_vfiprintf_r+0x20>
 8001eba:	89ab      	ldrh	r3, [r5, #12]
 8001ebc:	0598      	lsls	r0, r3, #22
 8001ebe:	d4ed      	bmi.n	8001e9c <_vfiprintf_r+0x4c>
 8001ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ec2:	f7ff fde4 	bl	8001a8e <__retarget_lock_release_recursive>
 8001ec6:	e7e9      	b.n	8001e9c <_vfiprintf_r+0x4c>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9309      	str	r3, [sp, #36]	; 0x24
 8001ecc:	2320      	movs	r3, #32
 8001ece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ed6:	2330      	movs	r3, #48	; 0x30
 8001ed8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800209c <_vfiprintf_r+0x24c>
 8001edc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ee0:	f04f 0901 	mov.w	r9, #1
 8001ee4:	4623      	mov	r3, r4
 8001ee6:	469a      	mov	sl, r3
 8001ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001eec:	b10a      	cbz	r2, 8001ef2 <_vfiprintf_r+0xa2>
 8001eee:	2a25      	cmp	r2, #37	; 0x25
 8001ef0:	d1f9      	bne.n	8001ee6 <_vfiprintf_r+0x96>
 8001ef2:	ebba 0b04 	subs.w	fp, sl, r4
 8001ef6:	d00b      	beq.n	8001f10 <_vfiprintf_r+0xc0>
 8001ef8:	465b      	mov	r3, fp
 8001efa:	4622      	mov	r2, r4
 8001efc:	4629      	mov	r1, r5
 8001efe:	4630      	mov	r0, r6
 8001f00:	f7ff ff93 	bl	8001e2a <__sfputs_r>
 8001f04:	3001      	adds	r0, #1
 8001f06:	f000 80aa 	beq.w	800205e <_vfiprintf_r+0x20e>
 8001f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f0c:	445a      	add	r2, fp
 8001f0e:	9209      	str	r2, [sp, #36]	; 0x24
 8001f10:	f89a 3000 	ldrb.w	r3, [sl]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80a2 	beq.w	800205e <_vfiprintf_r+0x20e>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f24:	f10a 0a01 	add.w	sl, sl, #1
 8001f28:	9304      	str	r3, [sp, #16]
 8001f2a:	9307      	str	r3, [sp, #28]
 8001f2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f30:	931a      	str	r3, [sp, #104]	; 0x68
 8001f32:	4654      	mov	r4, sl
 8001f34:	2205      	movs	r2, #5
 8001f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f3a:	4858      	ldr	r0, [pc, #352]	; (800209c <_vfiprintf_r+0x24c>)
 8001f3c:	f7fe f950 	bl	80001e0 <memchr>
 8001f40:	9a04      	ldr	r2, [sp, #16]
 8001f42:	b9d8      	cbnz	r0, 8001f7c <_vfiprintf_r+0x12c>
 8001f44:	06d1      	lsls	r1, r2, #27
 8001f46:	bf44      	itt	mi
 8001f48:	2320      	movmi	r3, #32
 8001f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f4e:	0713      	lsls	r3, r2, #28
 8001f50:	bf44      	itt	mi
 8001f52:	232b      	movmi	r3, #43	; 0x2b
 8001f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f58:	f89a 3000 	ldrb.w	r3, [sl]
 8001f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8001f5e:	d015      	beq.n	8001f8c <_vfiprintf_r+0x13c>
 8001f60:	9a07      	ldr	r2, [sp, #28]
 8001f62:	4654      	mov	r4, sl
 8001f64:	2000      	movs	r0, #0
 8001f66:	f04f 0c0a 	mov.w	ip, #10
 8001f6a:	4621      	mov	r1, r4
 8001f6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f70:	3b30      	subs	r3, #48	; 0x30
 8001f72:	2b09      	cmp	r3, #9
 8001f74:	d94e      	bls.n	8002014 <_vfiprintf_r+0x1c4>
 8001f76:	b1b0      	cbz	r0, 8001fa6 <_vfiprintf_r+0x156>
 8001f78:	9207      	str	r2, [sp, #28]
 8001f7a:	e014      	b.n	8001fa6 <_vfiprintf_r+0x156>
 8001f7c:	eba0 0308 	sub.w	r3, r0, r8
 8001f80:	fa09 f303 	lsl.w	r3, r9, r3
 8001f84:	4313      	orrs	r3, r2
 8001f86:	9304      	str	r3, [sp, #16]
 8001f88:	46a2      	mov	sl, r4
 8001f8a:	e7d2      	b.n	8001f32 <_vfiprintf_r+0xe2>
 8001f8c:	9b03      	ldr	r3, [sp, #12]
 8001f8e:	1d19      	adds	r1, r3, #4
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	9103      	str	r1, [sp, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bfbb      	ittet	lt
 8001f98:	425b      	neglt	r3, r3
 8001f9a:	f042 0202 	orrlt.w	r2, r2, #2
 8001f9e:	9307      	strge	r3, [sp, #28]
 8001fa0:	9307      	strlt	r3, [sp, #28]
 8001fa2:	bfb8      	it	lt
 8001fa4:	9204      	strlt	r2, [sp, #16]
 8001fa6:	7823      	ldrb	r3, [r4, #0]
 8001fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8001faa:	d10c      	bne.n	8001fc6 <_vfiprintf_r+0x176>
 8001fac:	7863      	ldrb	r3, [r4, #1]
 8001fae:	2b2a      	cmp	r3, #42	; 0x2a
 8001fb0:	d135      	bne.n	800201e <_vfiprintf_r+0x1ce>
 8001fb2:	9b03      	ldr	r3, [sp, #12]
 8001fb4:	1d1a      	adds	r2, r3, #4
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	9203      	str	r2, [sp, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bfb8      	it	lt
 8001fbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8001fc2:	3402      	adds	r4, #2
 8001fc4:	9305      	str	r3, [sp, #20]
 8001fc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80020ac <_vfiprintf_r+0x25c>
 8001fca:	7821      	ldrb	r1, [r4, #0]
 8001fcc:	2203      	movs	r2, #3
 8001fce:	4650      	mov	r0, sl
 8001fd0:	f7fe f906 	bl	80001e0 <memchr>
 8001fd4:	b140      	cbz	r0, 8001fe8 <_vfiprintf_r+0x198>
 8001fd6:	2340      	movs	r3, #64	; 0x40
 8001fd8:	eba0 000a 	sub.w	r0, r0, sl
 8001fdc:	fa03 f000 	lsl.w	r0, r3, r0
 8001fe0:	9b04      	ldr	r3, [sp, #16]
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	3401      	adds	r4, #1
 8001fe6:	9304      	str	r3, [sp, #16]
 8001fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fec:	482c      	ldr	r0, [pc, #176]	; (80020a0 <_vfiprintf_r+0x250>)
 8001fee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ff2:	2206      	movs	r2, #6
 8001ff4:	f7fe f8f4 	bl	80001e0 <memchr>
 8001ff8:	2800      	cmp	r0, #0
 8001ffa:	d03f      	beq.n	800207c <_vfiprintf_r+0x22c>
 8001ffc:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <_vfiprintf_r+0x254>)
 8001ffe:	bb1b      	cbnz	r3, 8002048 <_vfiprintf_r+0x1f8>
 8002000:	9b03      	ldr	r3, [sp, #12]
 8002002:	3307      	adds	r3, #7
 8002004:	f023 0307 	bic.w	r3, r3, #7
 8002008:	3308      	adds	r3, #8
 800200a:	9303      	str	r3, [sp, #12]
 800200c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800200e:	443b      	add	r3, r7
 8002010:	9309      	str	r3, [sp, #36]	; 0x24
 8002012:	e767      	b.n	8001ee4 <_vfiprintf_r+0x94>
 8002014:	fb0c 3202 	mla	r2, ip, r2, r3
 8002018:	460c      	mov	r4, r1
 800201a:	2001      	movs	r0, #1
 800201c:	e7a5      	b.n	8001f6a <_vfiprintf_r+0x11a>
 800201e:	2300      	movs	r3, #0
 8002020:	3401      	adds	r4, #1
 8002022:	9305      	str	r3, [sp, #20]
 8002024:	4619      	mov	r1, r3
 8002026:	f04f 0c0a 	mov.w	ip, #10
 800202a:	4620      	mov	r0, r4
 800202c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002030:	3a30      	subs	r2, #48	; 0x30
 8002032:	2a09      	cmp	r2, #9
 8002034:	d903      	bls.n	800203e <_vfiprintf_r+0x1ee>
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0c5      	beq.n	8001fc6 <_vfiprintf_r+0x176>
 800203a:	9105      	str	r1, [sp, #20]
 800203c:	e7c3      	b.n	8001fc6 <_vfiprintf_r+0x176>
 800203e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002042:	4604      	mov	r4, r0
 8002044:	2301      	movs	r3, #1
 8002046:	e7f0      	b.n	800202a <_vfiprintf_r+0x1da>
 8002048:	ab03      	add	r3, sp, #12
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	462a      	mov	r2, r5
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <_vfiprintf_r+0x258>)
 8002050:	a904      	add	r1, sp, #16
 8002052:	4630      	mov	r0, r6
 8002054:	f3af 8000 	nop.w
 8002058:	4607      	mov	r7, r0
 800205a:	1c78      	adds	r0, r7, #1
 800205c:	d1d6      	bne.n	800200c <_vfiprintf_r+0x1bc>
 800205e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002060:	07d9      	lsls	r1, r3, #31
 8002062:	d405      	bmi.n	8002070 <_vfiprintf_r+0x220>
 8002064:	89ab      	ldrh	r3, [r5, #12]
 8002066:	059a      	lsls	r2, r3, #22
 8002068:	d402      	bmi.n	8002070 <_vfiprintf_r+0x220>
 800206a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800206c:	f7ff fd0f 	bl	8001a8e <__retarget_lock_release_recursive>
 8002070:	89ab      	ldrh	r3, [r5, #12]
 8002072:	065b      	lsls	r3, r3, #25
 8002074:	f53f af12 	bmi.w	8001e9c <_vfiprintf_r+0x4c>
 8002078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800207a:	e711      	b.n	8001ea0 <_vfiprintf_r+0x50>
 800207c:	ab03      	add	r3, sp, #12
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	462a      	mov	r2, r5
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <_vfiprintf_r+0x258>)
 8002084:	a904      	add	r1, sp, #16
 8002086:	4630      	mov	r0, r6
 8002088:	f000 f880 	bl	800218c <_printf_i>
 800208c:	e7e4      	b.n	8002058 <_vfiprintf_r+0x208>
 800208e:	bf00      	nop
 8002090:	08002d94 	.word	0x08002d94
 8002094:	08002db4 	.word	0x08002db4
 8002098:	08002d74 	.word	0x08002d74
 800209c:	08002dd4 	.word	0x08002dd4
 80020a0:	08002dde 	.word	0x08002dde
 80020a4:	00000000 	.word	0x00000000
 80020a8:	08001e2b 	.word	0x08001e2b
 80020ac:	08002dda 	.word	0x08002dda

080020b0 <_printf_common>:
 80020b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020b4:	4616      	mov	r6, r2
 80020b6:	4699      	mov	r9, r3
 80020b8:	688a      	ldr	r2, [r1, #8]
 80020ba:	690b      	ldr	r3, [r1, #16]
 80020bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020c0:	4293      	cmp	r3, r2
 80020c2:	bfb8      	it	lt
 80020c4:	4613      	movlt	r3, r2
 80020c6:	6033      	str	r3, [r6, #0]
 80020c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020cc:	4607      	mov	r7, r0
 80020ce:	460c      	mov	r4, r1
 80020d0:	b10a      	cbz	r2, 80020d6 <_printf_common+0x26>
 80020d2:	3301      	adds	r3, #1
 80020d4:	6033      	str	r3, [r6, #0]
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	0699      	lsls	r1, r3, #26
 80020da:	bf42      	ittt	mi
 80020dc:	6833      	ldrmi	r3, [r6, #0]
 80020de:	3302      	addmi	r3, #2
 80020e0:	6033      	strmi	r3, [r6, #0]
 80020e2:	6825      	ldr	r5, [r4, #0]
 80020e4:	f015 0506 	ands.w	r5, r5, #6
 80020e8:	d106      	bne.n	80020f8 <_printf_common+0x48>
 80020ea:	f104 0a19 	add.w	sl, r4, #25
 80020ee:	68e3      	ldr	r3, [r4, #12]
 80020f0:	6832      	ldr	r2, [r6, #0]
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	42ab      	cmp	r3, r5
 80020f6:	dc26      	bgt.n	8002146 <_printf_common+0x96>
 80020f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80020fc:	1e13      	subs	r3, r2, #0
 80020fe:	6822      	ldr	r2, [r4, #0]
 8002100:	bf18      	it	ne
 8002102:	2301      	movne	r3, #1
 8002104:	0692      	lsls	r2, r2, #26
 8002106:	d42b      	bmi.n	8002160 <_printf_common+0xb0>
 8002108:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800210c:	4649      	mov	r1, r9
 800210e:	4638      	mov	r0, r7
 8002110:	47c0      	blx	r8
 8002112:	3001      	adds	r0, #1
 8002114:	d01e      	beq.n	8002154 <_printf_common+0xa4>
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	68e5      	ldr	r5, [r4, #12]
 800211a:	6832      	ldr	r2, [r6, #0]
 800211c:	f003 0306 	and.w	r3, r3, #6
 8002120:	2b04      	cmp	r3, #4
 8002122:	bf08      	it	eq
 8002124:	1aad      	subeq	r5, r5, r2
 8002126:	68a3      	ldr	r3, [r4, #8]
 8002128:	6922      	ldr	r2, [r4, #16]
 800212a:	bf0c      	ite	eq
 800212c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002130:	2500      	movne	r5, #0
 8002132:	4293      	cmp	r3, r2
 8002134:	bfc4      	itt	gt
 8002136:	1a9b      	subgt	r3, r3, r2
 8002138:	18ed      	addgt	r5, r5, r3
 800213a:	2600      	movs	r6, #0
 800213c:	341a      	adds	r4, #26
 800213e:	42b5      	cmp	r5, r6
 8002140:	d11a      	bne.n	8002178 <_printf_common+0xc8>
 8002142:	2000      	movs	r0, #0
 8002144:	e008      	b.n	8002158 <_printf_common+0xa8>
 8002146:	2301      	movs	r3, #1
 8002148:	4652      	mov	r2, sl
 800214a:	4649      	mov	r1, r9
 800214c:	4638      	mov	r0, r7
 800214e:	47c0      	blx	r8
 8002150:	3001      	adds	r0, #1
 8002152:	d103      	bne.n	800215c <_printf_common+0xac>
 8002154:	f04f 30ff 	mov.w	r0, #4294967295
 8002158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800215c:	3501      	adds	r5, #1
 800215e:	e7c6      	b.n	80020ee <_printf_common+0x3e>
 8002160:	18e1      	adds	r1, r4, r3
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	2030      	movs	r0, #48	; 0x30
 8002166:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800216a:	4422      	add	r2, r4
 800216c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002170:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002174:	3302      	adds	r3, #2
 8002176:	e7c7      	b.n	8002108 <_printf_common+0x58>
 8002178:	2301      	movs	r3, #1
 800217a:	4622      	mov	r2, r4
 800217c:	4649      	mov	r1, r9
 800217e:	4638      	mov	r0, r7
 8002180:	47c0      	blx	r8
 8002182:	3001      	adds	r0, #1
 8002184:	d0e6      	beq.n	8002154 <_printf_common+0xa4>
 8002186:	3601      	adds	r6, #1
 8002188:	e7d9      	b.n	800213e <_printf_common+0x8e>
	...

0800218c <_printf_i>:
 800218c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002190:	460c      	mov	r4, r1
 8002192:	4691      	mov	r9, r2
 8002194:	7e27      	ldrb	r7, [r4, #24]
 8002196:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002198:	2f78      	cmp	r7, #120	; 0x78
 800219a:	4680      	mov	r8, r0
 800219c:	469a      	mov	sl, r3
 800219e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021a2:	d807      	bhi.n	80021b4 <_printf_i+0x28>
 80021a4:	2f62      	cmp	r7, #98	; 0x62
 80021a6:	d80a      	bhi.n	80021be <_printf_i+0x32>
 80021a8:	2f00      	cmp	r7, #0
 80021aa:	f000 80d8 	beq.w	800235e <_printf_i+0x1d2>
 80021ae:	2f58      	cmp	r7, #88	; 0x58
 80021b0:	f000 80a3 	beq.w	80022fa <_printf_i+0x16e>
 80021b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80021b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80021bc:	e03a      	b.n	8002234 <_printf_i+0xa8>
 80021be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80021c2:	2b15      	cmp	r3, #21
 80021c4:	d8f6      	bhi.n	80021b4 <_printf_i+0x28>
 80021c6:	a001      	add	r0, pc, #4	; (adr r0, 80021cc <_printf_i+0x40>)
 80021c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80021cc:	08002225 	.word	0x08002225
 80021d0:	08002239 	.word	0x08002239
 80021d4:	080021b5 	.word	0x080021b5
 80021d8:	080021b5 	.word	0x080021b5
 80021dc:	080021b5 	.word	0x080021b5
 80021e0:	080021b5 	.word	0x080021b5
 80021e4:	08002239 	.word	0x08002239
 80021e8:	080021b5 	.word	0x080021b5
 80021ec:	080021b5 	.word	0x080021b5
 80021f0:	080021b5 	.word	0x080021b5
 80021f4:	080021b5 	.word	0x080021b5
 80021f8:	08002345 	.word	0x08002345
 80021fc:	08002269 	.word	0x08002269
 8002200:	08002327 	.word	0x08002327
 8002204:	080021b5 	.word	0x080021b5
 8002208:	080021b5 	.word	0x080021b5
 800220c:	08002367 	.word	0x08002367
 8002210:	080021b5 	.word	0x080021b5
 8002214:	08002269 	.word	0x08002269
 8002218:	080021b5 	.word	0x080021b5
 800221c:	080021b5 	.word	0x080021b5
 8002220:	0800232f 	.word	0x0800232f
 8002224:	680b      	ldr	r3, [r1, #0]
 8002226:	1d1a      	adds	r2, r3, #4
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	600a      	str	r2, [r1, #0]
 800222c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002234:	2301      	movs	r3, #1
 8002236:	e0a3      	b.n	8002380 <_printf_i+0x1f4>
 8002238:	6825      	ldr	r5, [r4, #0]
 800223a:	6808      	ldr	r0, [r1, #0]
 800223c:	062e      	lsls	r6, r5, #24
 800223e:	f100 0304 	add.w	r3, r0, #4
 8002242:	d50a      	bpl.n	800225a <_printf_i+0xce>
 8002244:	6805      	ldr	r5, [r0, #0]
 8002246:	600b      	str	r3, [r1, #0]
 8002248:	2d00      	cmp	r5, #0
 800224a:	da03      	bge.n	8002254 <_printf_i+0xc8>
 800224c:	232d      	movs	r3, #45	; 0x2d
 800224e:	426d      	negs	r5, r5
 8002250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002254:	485e      	ldr	r0, [pc, #376]	; (80023d0 <_printf_i+0x244>)
 8002256:	230a      	movs	r3, #10
 8002258:	e019      	b.n	800228e <_printf_i+0x102>
 800225a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800225e:	6805      	ldr	r5, [r0, #0]
 8002260:	600b      	str	r3, [r1, #0]
 8002262:	bf18      	it	ne
 8002264:	b22d      	sxthne	r5, r5
 8002266:	e7ef      	b.n	8002248 <_printf_i+0xbc>
 8002268:	680b      	ldr	r3, [r1, #0]
 800226a:	6825      	ldr	r5, [r4, #0]
 800226c:	1d18      	adds	r0, r3, #4
 800226e:	6008      	str	r0, [r1, #0]
 8002270:	0628      	lsls	r0, r5, #24
 8002272:	d501      	bpl.n	8002278 <_printf_i+0xec>
 8002274:	681d      	ldr	r5, [r3, #0]
 8002276:	e002      	b.n	800227e <_printf_i+0xf2>
 8002278:	0669      	lsls	r1, r5, #25
 800227a:	d5fb      	bpl.n	8002274 <_printf_i+0xe8>
 800227c:	881d      	ldrh	r5, [r3, #0]
 800227e:	4854      	ldr	r0, [pc, #336]	; (80023d0 <_printf_i+0x244>)
 8002280:	2f6f      	cmp	r7, #111	; 0x6f
 8002282:	bf0c      	ite	eq
 8002284:	2308      	moveq	r3, #8
 8002286:	230a      	movne	r3, #10
 8002288:	2100      	movs	r1, #0
 800228a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800228e:	6866      	ldr	r6, [r4, #4]
 8002290:	60a6      	str	r6, [r4, #8]
 8002292:	2e00      	cmp	r6, #0
 8002294:	bfa2      	ittt	ge
 8002296:	6821      	ldrge	r1, [r4, #0]
 8002298:	f021 0104 	bicge.w	r1, r1, #4
 800229c:	6021      	strge	r1, [r4, #0]
 800229e:	b90d      	cbnz	r5, 80022a4 <_printf_i+0x118>
 80022a0:	2e00      	cmp	r6, #0
 80022a2:	d04d      	beq.n	8002340 <_printf_i+0x1b4>
 80022a4:	4616      	mov	r6, r2
 80022a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80022aa:	fb03 5711 	mls	r7, r3, r1, r5
 80022ae:	5dc7      	ldrb	r7, [r0, r7]
 80022b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80022b4:	462f      	mov	r7, r5
 80022b6:	42bb      	cmp	r3, r7
 80022b8:	460d      	mov	r5, r1
 80022ba:	d9f4      	bls.n	80022a6 <_printf_i+0x11a>
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d10b      	bne.n	80022d8 <_printf_i+0x14c>
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	07df      	lsls	r7, r3, #31
 80022c4:	d508      	bpl.n	80022d8 <_printf_i+0x14c>
 80022c6:	6923      	ldr	r3, [r4, #16]
 80022c8:	6861      	ldr	r1, [r4, #4]
 80022ca:	4299      	cmp	r1, r3
 80022cc:	bfde      	ittt	le
 80022ce:	2330      	movle	r3, #48	; 0x30
 80022d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80022d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80022d8:	1b92      	subs	r2, r2, r6
 80022da:	6122      	str	r2, [r4, #16]
 80022dc:	f8cd a000 	str.w	sl, [sp]
 80022e0:	464b      	mov	r3, r9
 80022e2:	aa03      	add	r2, sp, #12
 80022e4:	4621      	mov	r1, r4
 80022e6:	4640      	mov	r0, r8
 80022e8:	f7ff fee2 	bl	80020b0 <_printf_common>
 80022ec:	3001      	adds	r0, #1
 80022ee:	d14c      	bne.n	800238a <_printf_i+0x1fe>
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	b004      	add	sp, #16
 80022f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022fa:	4835      	ldr	r0, [pc, #212]	; (80023d0 <_printf_i+0x244>)
 80022fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002300:	6823      	ldr	r3, [r4, #0]
 8002302:	680e      	ldr	r6, [r1, #0]
 8002304:	061f      	lsls	r7, r3, #24
 8002306:	f856 5b04 	ldr.w	r5, [r6], #4
 800230a:	600e      	str	r6, [r1, #0]
 800230c:	d514      	bpl.n	8002338 <_printf_i+0x1ac>
 800230e:	07d9      	lsls	r1, r3, #31
 8002310:	bf44      	itt	mi
 8002312:	f043 0320 	orrmi.w	r3, r3, #32
 8002316:	6023      	strmi	r3, [r4, #0]
 8002318:	b91d      	cbnz	r5, 8002322 <_printf_i+0x196>
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	f023 0320 	bic.w	r3, r3, #32
 8002320:	6023      	str	r3, [r4, #0]
 8002322:	2310      	movs	r3, #16
 8002324:	e7b0      	b.n	8002288 <_printf_i+0xfc>
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	f043 0320 	orr.w	r3, r3, #32
 800232c:	6023      	str	r3, [r4, #0]
 800232e:	2378      	movs	r3, #120	; 0x78
 8002330:	4828      	ldr	r0, [pc, #160]	; (80023d4 <_printf_i+0x248>)
 8002332:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002336:	e7e3      	b.n	8002300 <_printf_i+0x174>
 8002338:	065e      	lsls	r6, r3, #25
 800233a:	bf48      	it	mi
 800233c:	b2ad      	uxthmi	r5, r5
 800233e:	e7e6      	b.n	800230e <_printf_i+0x182>
 8002340:	4616      	mov	r6, r2
 8002342:	e7bb      	b.n	80022bc <_printf_i+0x130>
 8002344:	680b      	ldr	r3, [r1, #0]
 8002346:	6826      	ldr	r6, [r4, #0]
 8002348:	6960      	ldr	r0, [r4, #20]
 800234a:	1d1d      	adds	r5, r3, #4
 800234c:	600d      	str	r5, [r1, #0]
 800234e:	0635      	lsls	r5, r6, #24
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	d501      	bpl.n	8002358 <_printf_i+0x1cc>
 8002354:	6018      	str	r0, [r3, #0]
 8002356:	e002      	b.n	800235e <_printf_i+0x1d2>
 8002358:	0671      	lsls	r1, r6, #25
 800235a:	d5fb      	bpl.n	8002354 <_printf_i+0x1c8>
 800235c:	8018      	strh	r0, [r3, #0]
 800235e:	2300      	movs	r3, #0
 8002360:	6123      	str	r3, [r4, #16]
 8002362:	4616      	mov	r6, r2
 8002364:	e7ba      	b.n	80022dc <_printf_i+0x150>
 8002366:	680b      	ldr	r3, [r1, #0]
 8002368:	1d1a      	adds	r2, r3, #4
 800236a:	600a      	str	r2, [r1, #0]
 800236c:	681e      	ldr	r6, [r3, #0]
 800236e:	6862      	ldr	r2, [r4, #4]
 8002370:	2100      	movs	r1, #0
 8002372:	4630      	mov	r0, r6
 8002374:	f7fd ff34 	bl	80001e0 <memchr>
 8002378:	b108      	cbz	r0, 800237e <_printf_i+0x1f2>
 800237a:	1b80      	subs	r0, r0, r6
 800237c:	6060      	str	r0, [r4, #4]
 800237e:	6863      	ldr	r3, [r4, #4]
 8002380:	6123      	str	r3, [r4, #16]
 8002382:	2300      	movs	r3, #0
 8002384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002388:	e7a8      	b.n	80022dc <_printf_i+0x150>
 800238a:	6923      	ldr	r3, [r4, #16]
 800238c:	4632      	mov	r2, r6
 800238e:	4649      	mov	r1, r9
 8002390:	4640      	mov	r0, r8
 8002392:	47d0      	blx	sl
 8002394:	3001      	adds	r0, #1
 8002396:	d0ab      	beq.n	80022f0 <_printf_i+0x164>
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	079b      	lsls	r3, r3, #30
 800239c:	d413      	bmi.n	80023c6 <_printf_i+0x23a>
 800239e:	68e0      	ldr	r0, [r4, #12]
 80023a0:	9b03      	ldr	r3, [sp, #12]
 80023a2:	4298      	cmp	r0, r3
 80023a4:	bfb8      	it	lt
 80023a6:	4618      	movlt	r0, r3
 80023a8:	e7a4      	b.n	80022f4 <_printf_i+0x168>
 80023aa:	2301      	movs	r3, #1
 80023ac:	4632      	mov	r2, r6
 80023ae:	4649      	mov	r1, r9
 80023b0:	4640      	mov	r0, r8
 80023b2:	47d0      	blx	sl
 80023b4:	3001      	adds	r0, #1
 80023b6:	d09b      	beq.n	80022f0 <_printf_i+0x164>
 80023b8:	3501      	adds	r5, #1
 80023ba:	68e3      	ldr	r3, [r4, #12]
 80023bc:	9903      	ldr	r1, [sp, #12]
 80023be:	1a5b      	subs	r3, r3, r1
 80023c0:	42ab      	cmp	r3, r5
 80023c2:	dcf2      	bgt.n	80023aa <_printf_i+0x21e>
 80023c4:	e7eb      	b.n	800239e <_printf_i+0x212>
 80023c6:	2500      	movs	r5, #0
 80023c8:	f104 0619 	add.w	r6, r4, #25
 80023cc:	e7f5      	b.n	80023ba <_printf_i+0x22e>
 80023ce:	bf00      	nop
 80023d0:	08002de5 	.word	0x08002de5
 80023d4:	08002df6 	.word	0x08002df6

080023d8 <_sbrk_r>:
 80023d8:	b538      	push	{r3, r4, r5, lr}
 80023da:	4d06      	ldr	r5, [pc, #24]	; (80023f4 <_sbrk_r+0x1c>)
 80023dc:	2300      	movs	r3, #0
 80023de:	4604      	mov	r4, r0
 80023e0:	4608      	mov	r0, r1
 80023e2:	602b      	str	r3, [r5, #0]
 80023e4:	f7ff f928 	bl	8001638 <_sbrk>
 80023e8:	1c43      	adds	r3, r0, #1
 80023ea:	d102      	bne.n	80023f2 <_sbrk_r+0x1a>
 80023ec:	682b      	ldr	r3, [r5, #0]
 80023ee:	b103      	cbz	r3, 80023f2 <_sbrk_r+0x1a>
 80023f0:	6023      	str	r3, [r4, #0]
 80023f2:	bd38      	pop	{r3, r4, r5, pc}
 80023f4:	2000017c 	.word	0x2000017c

080023f8 <__sread>:
 80023f8:	b510      	push	{r4, lr}
 80023fa:	460c      	mov	r4, r1
 80023fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002400:	f000 fb02 	bl	8002a08 <_read_r>
 8002404:	2800      	cmp	r0, #0
 8002406:	bfab      	itete	ge
 8002408:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800240a:	89a3      	ldrhlt	r3, [r4, #12]
 800240c:	181b      	addge	r3, r3, r0
 800240e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002412:	bfac      	ite	ge
 8002414:	6563      	strge	r3, [r4, #84]	; 0x54
 8002416:	81a3      	strhlt	r3, [r4, #12]
 8002418:	bd10      	pop	{r4, pc}

0800241a <__swrite>:
 800241a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800241e:	461f      	mov	r7, r3
 8002420:	898b      	ldrh	r3, [r1, #12]
 8002422:	05db      	lsls	r3, r3, #23
 8002424:	4605      	mov	r5, r0
 8002426:	460c      	mov	r4, r1
 8002428:	4616      	mov	r6, r2
 800242a:	d505      	bpl.n	8002438 <__swrite+0x1e>
 800242c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002430:	2302      	movs	r3, #2
 8002432:	2200      	movs	r2, #0
 8002434:	f000 f9c8 	bl	80027c8 <_lseek_r>
 8002438:	89a3      	ldrh	r3, [r4, #12]
 800243a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800243e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002442:	81a3      	strh	r3, [r4, #12]
 8002444:	4632      	mov	r2, r6
 8002446:	463b      	mov	r3, r7
 8002448:	4628      	mov	r0, r5
 800244a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800244e:	f000 b869 	b.w	8002524 <_write_r>

08002452 <__sseek>:
 8002452:	b510      	push	{r4, lr}
 8002454:	460c      	mov	r4, r1
 8002456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800245a:	f000 f9b5 	bl	80027c8 <_lseek_r>
 800245e:	1c43      	adds	r3, r0, #1
 8002460:	89a3      	ldrh	r3, [r4, #12]
 8002462:	bf15      	itete	ne
 8002464:	6560      	strne	r0, [r4, #84]	; 0x54
 8002466:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800246a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800246e:	81a3      	strheq	r3, [r4, #12]
 8002470:	bf18      	it	ne
 8002472:	81a3      	strhne	r3, [r4, #12]
 8002474:	bd10      	pop	{r4, pc}

08002476 <__sclose>:
 8002476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800247a:	f000 b8d3 	b.w	8002624 <_close_r>
	...

08002480 <__swbuf_r>:
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002482:	460e      	mov	r6, r1
 8002484:	4614      	mov	r4, r2
 8002486:	4605      	mov	r5, r0
 8002488:	b118      	cbz	r0, 8002492 <__swbuf_r+0x12>
 800248a:	6983      	ldr	r3, [r0, #24]
 800248c:	b90b      	cbnz	r3, 8002492 <__swbuf_r+0x12>
 800248e:	f7ff fa5f 	bl	8001950 <__sinit>
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <__swbuf_r+0x98>)
 8002494:	429c      	cmp	r4, r3
 8002496:	d12b      	bne.n	80024f0 <__swbuf_r+0x70>
 8002498:	686c      	ldr	r4, [r5, #4]
 800249a:	69a3      	ldr	r3, [r4, #24]
 800249c:	60a3      	str	r3, [r4, #8]
 800249e:	89a3      	ldrh	r3, [r4, #12]
 80024a0:	071a      	lsls	r2, r3, #28
 80024a2:	d52f      	bpl.n	8002504 <__swbuf_r+0x84>
 80024a4:	6923      	ldr	r3, [r4, #16]
 80024a6:	b36b      	cbz	r3, 8002504 <__swbuf_r+0x84>
 80024a8:	6923      	ldr	r3, [r4, #16]
 80024aa:	6820      	ldr	r0, [r4, #0]
 80024ac:	1ac0      	subs	r0, r0, r3
 80024ae:	6963      	ldr	r3, [r4, #20]
 80024b0:	b2f6      	uxtb	r6, r6
 80024b2:	4283      	cmp	r3, r0
 80024b4:	4637      	mov	r7, r6
 80024b6:	dc04      	bgt.n	80024c2 <__swbuf_r+0x42>
 80024b8:	4621      	mov	r1, r4
 80024ba:	4628      	mov	r0, r5
 80024bc:	f000 f948 	bl	8002750 <_fflush_r>
 80024c0:	bb30      	cbnz	r0, 8002510 <__swbuf_r+0x90>
 80024c2:	68a3      	ldr	r3, [r4, #8]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	60a3      	str	r3, [r4, #8]
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	6022      	str	r2, [r4, #0]
 80024ce:	701e      	strb	r6, [r3, #0]
 80024d0:	6963      	ldr	r3, [r4, #20]
 80024d2:	3001      	adds	r0, #1
 80024d4:	4283      	cmp	r3, r0
 80024d6:	d004      	beq.n	80024e2 <__swbuf_r+0x62>
 80024d8:	89a3      	ldrh	r3, [r4, #12]
 80024da:	07db      	lsls	r3, r3, #31
 80024dc:	d506      	bpl.n	80024ec <__swbuf_r+0x6c>
 80024de:	2e0a      	cmp	r6, #10
 80024e0:	d104      	bne.n	80024ec <__swbuf_r+0x6c>
 80024e2:	4621      	mov	r1, r4
 80024e4:	4628      	mov	r0, r5
 80024e6:	f000 f933 	bl	8002750 <_fflush_r>
 80024ea:	b988      	cbnz	r0, 8002510 <__swbuf_r+0x90>
 80024ec:	4638      	mov	r0, r7
 80024ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <__swbuf_r+0x9c>)
 80024f2:	429c      	cmp	r4, r3
 80024f4:	d101      	bne.n	80024fa <__swbuf_r+0x7a>
 80024f6:	68ac      	ldr	r4, [r5, #8]
 80024f8:	e7cf      	b.n	800249a <__swbuf_r+0x1a>
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <__swbuf_r+0xa0>)
 80024fc:	429c      	cmp	r4, r3
 80024fe:	bf08      	it	eq
 8002500:	68ec      	ldreq	r4, [r5, #12]
 8002502:	e7ca      	b.n	800249a <__swbuf_r+0x1a>
 8002504:	4621      	mov	r1, r4
 8002506:	4628      	mov	r0, r5
 8002508:	f000 f81e 	bl	8002548 <__swsetup_r>
 800250c:	2800      	cmp	r0, #0
 800250e:	d0cb      	beq.n	80024a8 <__swbuf_r+0x28>
 8002510:	f04f 37ff 	mov.w	r7, #4294967295
 8002514:	e7ea      	b.n	80024ec <__swbuf_r+0x6c>
 8002516:	bf00      	nop
 8002518:	08002d94 	.word	0x08002d94
 800251c:	08002db4 	.word	0x08002db4
 8002520:	08002d74 	.word	0x08002d74

08002524 <_write_r>:
 8002524:	b538      	push	{r3, r4, r5, lr}
 8002526:	4d07      	ldr	r5, [pc, #28]	; (8002544 <_write_r+0x20>)
 8002528:	4604      	mov	r4, r0
 800252a:	4608      	mov	r0, r1
 800252c:	4611      	mov	r1, r2
 800252e:	2200      	movs	r2, #0
 8002530:	602a      	str	r2, [r5, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	f000 fb56 	bl	8002be4 <_write>
 8002538:	1c43      	adds	r3, r0, #1
 800253a:	d102      	bne.n	8002542 <_write_r+0x1e>
 800253c:	682b      	ldr	r3, [r5, #0]
 800253e:	b103      	cbz	r3, 8002542 <_write_r+0x1e>
 8002540:	6023      	str	r3, [r4, #0]
 8002542:	bd38      	pop	{r3, r4, r5, pc}
 8002544:	2000017c 	.word	0x2000017c

08002548 <__swsetup_r>:
 8002548:	4b32      	ldr	r3, [pc, #200]	; (8002614 <__swsetup_r+0xcc>)
 800254a:	b570      	push	{r4, r5, r6, lr}
 800254c:	681d      	ldr	r5, [r3, #0]
 800254e:	4606      	mov	r6, r0
 8002550:	460c      	mov	r4, r1
 8002552:	b125      	cbz	r5, 800255e <__swsetup_r+0x16>
 8002554:	69ab      	ldr	r3, [r5, #24]
 8002556:	b913      	cbnz	r3, 800255e <__swsetup_r+0x16>
 8002558:	4628      	mov	r0, r5
 800255a:	f7ff f9f9 	bl	8001950 <__sinit>
 800255e:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <__swsetup_r+0xd0>)
 8002560:	429c      	cmp	r4, r3
 8002562:	d10f      	bne.n	8002584 <__swsetup_r+0x3c>
 8002564:	686c      	ldr	r4, [r5, #4]
 8002566:	89a3      	ldrh	r3, [r4, #12]
 8002568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800256c:	0719      	lsls	r1, r3, #28
 800256e:	d42c      	bmi.n	80025ca <__swsetup_r+0x82>
 8002570:	06dd      	lsls	r5, r3, #27
 8002572:	d411      	bmi.n	8002598 <__swsetup_r+0x50>
 8002574:	2309      	movs	r3, #9
 8002576:	6033      	str	r3, [r6, #0]
 8002578:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800257c:	81a3      	strh	r3, [r4, #12]
 800257e:	f04f 30ff 	mov.w	r0, #4294967295
 8002582:	e03e      	b.n	8002602 <__swsetup_r+0xba>
 8002584:	4b25      	ldr	r3, [pc, #148]	; (800261c <__swsetup_r+0xd4>)
 8002586:	429c      	cmp	r4, r3
 8002588:	d101      	bne.n	800258e <__swsetup_r+0x46>
 800258a:	68ac      	ldr	r4, [r5, #8]
 800258c:	e7eb      	b.n	8002566 <__swsetup_r+0x1e>
 800258e:	4b24      	ldr	r3, [pc, #144]	; (8002620 <__swsetup_r+0xd8>)
 8002590:	429c      	cmp	r4, r3
 8002592:	bf08      	it	eq
 8002594:	68ec      	ldreq	r4, [r5, #12]
 8002596:	e7e6      	b.n	8002566 <__swsetup_r+0x1e>
 8002598:	0758      	lsls	r0, r3, #29
 800259a:	d512      	bpl.n	80025c2 <__swsetup_r+0x7a>
 800259c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800259e:	b141      	cbz	r1, 80025b2 <__swsetup_r+0x6a>
 80025a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025a4:	4299      	cmp	r1, r3
 80025a6:	d002      	beq.n	80025ae <__swsetup_r+0x66>
 80025a8:	4630      	mov	r0, r6
 80025aa:	f000 f9b7 	bl	800291c <_free_r>
 80025ae:	2300      	movs	r3, #0
 80025b0:	6363      	str	r3, [r4, #52]	; 0x34
 80025b2:	89a3      	ldrh	r3, [r4, #12]
 80025b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80025b8:	81a3      	strh	r3, [r4, #12]
 80025ba:	2300      	movs	r3, #0
 80025bc:	6063      	str	r3, [r4, #4]
 80025be:	6923      	ldr	r3, [r4, #16]
 80025c0:	6023      	str	r3, [r4, #0]
 80025c2:	89a3      	ldrh	r3, [r4, #12]
 80025c4:	f043 0308 	orr.w	r3, r3, #8
 80025c8:	81a3      	strh	r3, [r4, #12]
 80025ca:	6923      	ldr	r3, [r4, #16]
 80025cc:	b94b      	cbnz	r3, 80025e2 <__swsetup_r+0x9a>
 80025ce:	89a3      	ldrh	r3, [r4, #12]
 80025d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80025d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d8:	d003      	beq.n	80025e2 <__swsetup_r+0x9a>
 80025da:	4621      	mov	r1, r4
 80025dc:	4630      	mov	r0, r6
 80025de:	f000 f929 	bl	8002834 <__smakebuf_r>
 80025e2:	89a0      	ldrh	r0, [r4, #12]
 80025e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025e8:	f010 0301 	ands.w	r3, r0, #1
 80025ec:	d00a      	beq.n	8002604 <__swsetup_r+0xbc>
 80025ee:	2300      	movs	r3, #0
 80025f0:	60a3      	str	r3, [r4, #8]
 80025f2:	6963      	ldr	r3, [r4, #20]
 80025f4:	425b      	negs	r3, r3
 80025f6:	61a3      	str	r3, [r4, #24]
 80025f8:	6923      	ldr	r3, [r4, #16]
 80025fa:	b943      	cbnz	r3, 800260e <__swsetup_r+0xc6>
 80025fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002600:	d1ba      	bne.n	8002578 <__swsetup_r+0x30>
 8002602:	bd70      	pop	{r4, r5, r6, pc}
 8002604:	0781      	lsls	r1, r0, #30
 8002606:	bf58      	it	pl
 8002608:	6963      	ldrpl	r3, [r4, #20]
 800260a:	60a3      	str	r3, [r4, #8]
 800260c:	e7f4      	b.n	80025f8 <__swsetup_r+0xb0>
 800260e:	2000      	movs	r0, #0
 8002610:	e7f7      	b.n	8002602 <__swsetup_r+0xba>
 8002612:	bf00      	nop
 8002614:	20000000 	.word	0x20000000
 8002618:	08002d94 	.word	0x08002d94
 800261c:	08002db4 	.word	0x08002db4
 8002620:	08002d74 	.word	0x08002d74

08002624 <_close_r>:
 8002624:	b538      	push	{r3, r4, r5, lr}
 8002626:	4d06      	ldr	r5, [pc, #24]	; (8002640 <_close_r+0x1c>)
 8002628:	2300      	movs	r3, #0
 800262a:	4604      	mov	r4, r0
 800262c:	4608      	mov	r0, r1
 800262e:	602b      	str	r3, [r5, #0]
 8002630:	f000 fb0a 	bl	8002c48 <_close>
 8002634:	1c43      	adds	r3, r0, #1
 8002636:	d102      	bne.n	800263e <_close_r+0x1a>
 8002638:	682b      	ldr	r3, [r5, #0]
 800263a:	b103      	cbz	r3, 800263e <_close_r+0x1a>
 800263c:	6023      	str	r3, [r4, #0]
 800263e:	bd38      	pop	{r3, r4, r5, pc}
 8002640:	2000017c 	.word	0x2000017c

08002644 <__sflush_r>:
 8002644:	898a      	ldrh	r2, [r1, #12]
 8002646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800264a:	4605      	mov	r5, r0
 800264c:	0710      	lsls	r0, r2, #28
 800264e:	460c      	mov	r4, r1
 8002650:	d458      	bmi.n	8002704 <__sflush_r+0xc0>
 8002652:	684b      	ldr	r3, [r1, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	dc05      	bgt.n	8002664 <__sflush_r+0x20>
 8002658:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	dc02      	bgt.n	8002664 <__sflush_r+0x20>
 800265e:	2000      	movs	r0, #0
 8002660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002666:	2e00      	cmp	r6, #0
 8002668:	d0f9      	beq.n	800265e <__sflush_r+0x1a>
 800266a:	2300      	movs	r3, #0
 800266c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002670:	682f      	ldr	r7, [r5, #0]
 8002672:	602b      	str	r3, [r5, #0]
 8002674:	d032      	beq.n	80026dc <__sflush_r+0x98>
 8002676:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002678:	89a3      	ldrh	r3, [r4, #12]
 800267a:	075a      	lsls	r2, r3, #29
 800267c:	d505      	bpl.n	800268a <__sflush_r+0x46>
 800267e:	6863      	ldr	r3, [r4, #4]
 8002680:	1ac0      	subs	r0, r0, r3
 8002682:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002684:	b10b      	cbz	r3, 800268a <__sflush_r+0x46>
 8002686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002688:	1ac0      	subs	r0, r0, r3
 800268a:	2300      	movs	r3, #0
 800268c:	4602      	mov	r2, r0
 800268e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002690:	6a21      	ldr	r1, [r4, #32]
 8002692:	4628      	mov	r0, r5
 8002694:	47b0      	blx	r6
 8002696:	1c43      	adds	r3, r0, #1
 8002698:	89a3      	ldrh	r3, [r4, #12]
 800269a:	d106      	bne.n	80026aa <__sflush_r+0x66>
 800269c:	6829      	ldr	r1, [r5, #0]
 800269e:	291d      	cmp	r1, #29
 80026a0:	d82c      	bhi.n	80026fc <__sflush_r+0xb8>
 80026a2:	4a2a      	ldr	r2, [pc, #168]	; (800274c <__sflush_r+0x108>)
 80026a4:	40ca      	lsrs	r2, r1
 80026a6:	07d6      	lsls	r6, r2, #31
 80026a8:	d528      	bpl.n	80026fc <__sflush_r+0xb8>
 80026aa:	2200      	movs	r2, #0
 80026ac:	6062      	str	r2, [r4, #4]
 80026ae:	04d9      	lsls	r1, r3, #19
 80026b0:	6922      	ldr	r2, [r4, #16]
 80026b2:	6022      	str	r2, [r4, #0]
 80026b4:	d504      	bpl.n	80026c0 <__sflush_r+0x7c>
 80026b6:	1c42      	adds	r2, r0, #1
 80026b8:	d101      	bne.n	80026be <__sflush_r+0x7a>
 80026ba:	682b      	ldr	r3, [r5, #0]
 80026bc:	b903      	cbnz	r3, 80026c0 <__sflush_r+0x7c>
 80026be:	6560      	str	r0, [r4, #84]	; 0x54
 80026c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026c2:	602f      	str	r7, [r5, #0]
 80026c4:	2900      	cmp	r1, #0
 80026c6:	d0ca      	beq.n	800265e <__sflush_r+0x1a>
 80026c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026cc:	4299      	cmp	r1, r3
 80026ce:	d002      	beq.n	80026d6 <__sflush_r+0x92>
 80026d0:	4628      	mov	r0, r5
 80026d2:	f000 f923 	bl	800291c <_free_r>
 80026d6:	2000      	movs	r0, #0
 80026d8:	6360      	str	r0, [r4, #52]	; 0x34
 80026da:	e7c1      	b.n	8002660 <__sflush_r+0x1c>
 80026dc:	6a21      	ldr	r1, [r4, #32]
 80026de:	2301      	movs	r3, #1
 80026e0:	4628      	mov	r0, r5
 80026e2:	47b0      	blx	r6
 80026e4:	1c41      	adds	r1, r0, #1
 80026e6:	d1c7      	bne.n	8002678 <__sflush_r+0x34>
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0c4      	beq.n	8002678 <__sflush_r+0x34>
 80026ee:	2b1d      	cmp	r3, #29
 80026f0:	d001      	beq.n	80026f6 <__sflush_r+0xb2>
 80026f2:	2b16      	cmp	r3, #22
 80026f4:	d101      	bne.n	80026fa <__sflush_r+0xb6>
 80026f6:	602f      	str	r7, [r5, #0]
 80026f8:	e7b1      	b.n	800265e <__sflush_r+0x1a>
 80026fa:	89a3      	ldrh	r3, [r4, #12]
 80026fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002700:	81a3      	strh	r3, [r4, #12]
 8002702:	e7ad      	b.n	8002660 <__sflush_r+0x1c>
 8002704:	690f      	ldr	r7, [r1, #16]
 8002706:	2f00      	cmp	r7, #0
 8002708:	d0a9      	beq.n	800265e <__sflush_r+0x1a>
 800270a:	0793      	lsls	r3, r2, #30
 800270c:	680e      	ldr	r6, [r1, #0]
 800270e:	bf08      	it	eq
 8002710:	694b      	ldreq	r3, [r1, #20]
 8002712:	600f      	str	r7, [r1, #0]
 8002714:	bf18      	it	ne
 8002716:	2300      	movne	r3, #0
 8002718:	eba6 0807 	sub.w	r8, r6, r7
 800271c:	608b      	str	r3, [r1, #8]
 800271e:	f1b8 0f00 	cmp.w	r8, #0
 8002722:	dd9c      	ble.n	800265e <__sflush_r+0x1a>
 8002724:	6a21      	ldr	r1, [r4, #32]
 8002726:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002728:	4643      	mov	r3, r8
 800272a:	463a      	mov	r2, r7
 800272c:	4628      	mov	r0, r5
 800272e:	47b0      	blx	r6
 8002730:	2800      	cmp	r0, #0
 8002732:	dc06      	bgt.n	8002742 <__sflush_r+0xfe>
 8002734:	89a3      	ldrh	r3, [r4, #12]
 8002736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800273a:	81a3      	strh	r3, [r4, #12]
 800273c:	f04f 30ff 	mov.w	r0, #4294967295
 8002740:	e78e      	b.n	8002660 <__sflush_r+0x1c>
 8002742:	4407      	add	r7, r0
 8002744:	eba8 0800 	sub.w	r8, r8, r0
 8002748:	e7e9      	b.n	800271e <__sflush_r+0xda>
 800274a:	bf00      	nop
 800274c:	20400001 	.word	0x20400001

08002750 <_fflush_r>:
 8002750:	b538      	push	{r3, r4, r5, lr}
 8002752:	690b      	ldr	r3, [r1, #16]
 8002754:	4605      	mov	r5, r0
 8002756:	460c      	mov	r4, r1
 8002758:	b913      	cbnz	r3, 8002760 <_fflush_r+0x10>
 800275a:	2500      	movs	r5, #0
 800275c:	4628      	mov	r0, r5
 800275e:	bd38      	pop	{r3, r4, r5, pc}
 8002760:	b118      	cbz	r0, 800276a <_fflush_r+0x1a>
 8002762:	6983      	ldr	r3, [r0, #24]
 8002764:	b90b      	cbnz	r3, 800276a <_fflush_r+0x1a>
 8002766:	f7ff f8f3 	bl	8001950 <__sinit>
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <_fflush_r+0x6c>)
 800276c:	429c      	cmp	r4, r3
 800276e:	d11b      	bne.n	80027a8 <_fflush_r+0x58>
 8002770:	686c      	ldr	r4, [r5, #4]
 8002772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0ef      	beq.n	800275a <_fflush_r+0xa>
 800277a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800277c:	07d0      	lsls	r0, r2, #31
 800277e:	d404      	bmi.n	800278a <_fflush_r+0x3a>
 8002780:	0599      	lsls	r1, r3, #22
 8002782:	d402      	bmi.n	800278a <_fflush_r+0x3a>
 8002784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002786:	f7ff f981 	bl	8001a8c <__retarget_lock_acquire_recursive>
 800278a:	4628      	mov	r0, r5
 800278c:	4621      	mov	r1, r4
 800278e:	f7ff ff59 	bl	8002644 <__sflush_r>
 8002792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002794:	07da      	lsls	r2, r3, #31
 8002796:	4605      	mov	r5, r0
 8002798:	d4e0      	bmi.n	800275c <_fflush_r+0xc>
 800279a:	89a3      	ldrh	r3, [r4, #12]
 800279c:	059b      	lsls	r3, r3, #22
 800279e:	d4dd      	bmi.n	800275c <_fflush_r+0xc>
 80027a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027a2:	f7ff f974 	bl	8001a8e <__retarget_lock_release_recursive>
 80027a6:	e7d9      	b.n	800275c <_fflush_r+0xc>
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <_fflush_r+0x70>)
 80027aa:	429c      	cmp	r4, r3
 80027ac:	d101      	bne.n	80027b2 <_fflush_r+0x62>
 80027ae:	68ac      	ldr	r4, [r5, #8]
 80027b0:	e7df      	b.n	8002772 <_fflush_r+0x22>
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <_fflush_r+0x74>)
 80027b4:	429c      	cmp	r4, r3
 80027b6:	bf08      	it	eq
 80027b8:	68ec      	ldreq	r4, [r5, #12]
 80027ba:	e7da      	b.n	8002772 <_fflush_r+0x22>
 80027bc:	08002d94 	.word	0x08002d94
 80027c0:	08002db4 	.word	0x08002db4
 80027c4:	08002d74 	.word	0x08002d74

080027c8 <_lseek_r>:
 80027c8:	b538      	push	{r3, r4, r5, lr}
 80027ca:	4d07      	ldr	r5, [pc, #28]	; (80027e8 <_lseek_r+0x20>)
 80027cc:	4604      	mov	r4, r0
 80027ce:	4608      	mov	r0, r1
 80027d0:	4611      	mov	r1, r2
 80027d2:	2200      	movs	r2, #0
 80027d4:	602a      	str	r2, [r5, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	f000 f9f2 	bl	8002bc0 <_lseek>
 80027dc:	1c43      	adds	r3, r0, #1
 80027de:	d102      	bne.n	80027e6 <_lseek_r+0x1e>
 80027e0:	682b      	ldr	r3, [r5, #0]
 80027e2:	b103      	cbz	r3, 80027e6 <_lseek_r+0x1e>
 80027e4:	6023      	str	r3, [r4, #0]
 80027e6:	bd38      	pop	{r3, r4, r5, pc}
 80027e8:	2000017c 	.word	0x2000017c

080027ec <__swhatbuf_r>:
 80027ec:	b570      	push	{r4, r5, r6, lr}
 80027ee:	460e      	mov	r6, r1
 80027f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027f4:	2900      	cmp	r1, #0
 80027f6:	b096      	sub	sp, #88	; 0x58
 80027f8:	4614      	mov	r4, r2
 80027fa:	461d      	mov	r5, r3
 80027fc:	da07      	bge.n	800280e <__swhatbuf_r+0x22>
 80027fe:	2300      	movs	r3, #0
 8002800:	602b      	str	r3, [r5, #0]
 8002802:	89b3      	ldrh	r3, [r6, #12]
 8002804:	061a      	lsls	r2, r3, #24
 8002806:	d410      	bmi.n	800282a <__swhatbuf_r+0x3e>
 8002808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800280c:	e00e      	b.n	800282c <__swhatbuf_r+0x40>
 800280e:	466a      	mov	r2, sp
 8002810:	f000 f90c 	bl	8002a2c <_fstat_r>
 8002814:	2800      	cmp	r0, #0
 8002816:	dbf2      	blt.n	80027fe <__swhatbuf_r+0x12>
 8002818:	9a01      	ldr	r2, [sp, #4]
 800281a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800281e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002822:	425a      	negs	r2, r3
 8002824:	415a      	adcs	r2, r3
 8002826:	602a      	str	r2, [r5, #0]
 8002828:	e7ee      	b.n	8002808 <__swhatbuf_r+0x1c>
 800282a:	2340      	movs	r3, #64	; 0x40
 800282c:	2000      	movs	r0, #0
 800282e:	6023      	str	r3, [r4, #0]
 8002830:	b016      	add	sp, #88	; 0x58
 8002832:	bd70      	pop	{r4, r5, r6, pc}

08002834 <__smakebuf_r>:
 8002834:	898b      	ldrh	r3, [r1, #12]
 8002836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002838:	079d      	lsls	r5, r3, #30
 800283a:	4606      	mov	r6, r0
 800283c:	460c      	mov	r4, r1
 800283e:	d507      	bpl.n	8002850 <__smakebuf_r+0x1c>
 8002840:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002844:	6023      	str	r3, [r4, #0]
 8002846:	6123      	str	r3, [r4, #16]
 8002848:	2301      	movs	r3, #1
 800284a:	6163      	str	r3, [r4, #20]
 800284c:	b002      	add	sp, #8
 800284e:	bd70      	pop	{r4, r5, r6, pc}
 8002850:	ab01      	add	r3, sp, #4
 8002852:	466a      	mov	r2, sp
 8002854:	f7ff ffca 	bl	80027ec <__swhatbuf_r>
 8002858:	9900      	ldr	r1, [sp, #0]
 800285a:	4605      	mov	r5, r0
 800285c:	4630      	mov	r0, r6
 800285e:	f7ff f917 	bl	8001a90 <_malloc_r>
 8002862:	b948      	cbnz	r0, 8002878 <__smakebuf_r+0x44>
 8002864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002868:	059a      	lsls	r2, r3, #22
 800286a:	d4ef      	bmi.n	800284c <__smakebuf_r+0x18>
 800286c:	f023 0303 	bic.w	r3, r3, #3
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	81a3      	strh	r3, [r4, #12]
 8002876:	e7e3      	b.n	8002840 <__smakebuf_r+0xc>
 8002878:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <__smakebuf_r+0x7c>)
 800287a:	62b3      	str	r3, [r6, #40]	; 0x28
 800287c:	89a3      	ldrh	r3, [r4, #12]
 800287e:	6020      	str	r0, [r4, #0]
 8002880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002884:	81a3      	strh	r3, [r4, #12]
 8002886:	9b00      	ldr	r3, [sp, #0]
 8002888:	6163      	str	r3, [r4, #20]
 800288a:	9b01      	ldr	r3, [sp, #4]
 800288c:	6120      	str	r0, [r4, #16]
 800288e:	b15b      	cbz	r3, 80028a8 <__smakebuf_r+0x74>
 8002890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002894:	4630      	mov	r0, r6
 8002896:	f000 f8db 	bl	8002a50 <_isatty_r>
 800289a:	b128      	cbz	r0, 80028a8 <__smakebuf_r+0x74>
 800289c:	89a3      	ldrh	r3, [r4, #12]
 800289e:	f023 0303 	bic.w	r3, r3, #3
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	81a3      	strh	r3, [r4, #12]
 80028a8:	89a0      	ldrh	r0, [r4, #12]
 80028aa:	4305      	orrs	r5, r0
 80028ac:	81a5      	strh	r5, [r4, #12]
 80028ae:	e7cd      	b.n	800284c <__smakebuf_r+0x18>
 80028b0:	080018e9 	.word	0x080018e9

080028b4 <memcpy>:
 80028b4:	440a      	add	r2, r1
 80028b6:	4291      	cmp	r1, r2
 80028b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80028bc:	d100      	bne.n	80028c0 <memcpy+0xc>
 80028be:	4770      	bx	lr
 80028c0:	b510      	push	{r4, lr}
 80028c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028ca:	4291      	cmp	r1, r2
 80028cc:	d1f9      	bne.n	80028c2 <memcpy+0xe>
 80028ce:	bd10      	pop	{r4, pc}

080028d0 <memmove>:
 80028d0:	4288      	cmp	r0, r1
 80028d2:	b510      	push	{r4, lr}
 80028d4:	eb01 0402 	add.w	r4, r1, r2
 80028d8:	d902      	bls.n	80028e0 <memmove+0x10>
 80028da:	4284      	cmp	r4, r0
 80028dc:	4623      	mov	r3, r4
 80028de:	d807      	bhi.n	80028f0 <memmove+0x20>
 80028e0:	1e43      	subs	r3, r0, #1
 80028e2:	42a1      	cmp	r1, r4
 80028e4:	d008      	beq.n	80028f8 <memmove+0x28>
 80028e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80028ee:	e7f8      	b.n	80028e2 <memmove+0x12>
 80028f0:	4402      	add	r2, r0
 80028f2:	4601      	mov	r1, r0
 80028f4:	428a      	cmp	r2, r1
 80028f6:	d100      	bne.n	80028fa <memmove+0x2a>
 80028f8:	bd10      	pop	{r4, pc}
 80028fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80028fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002902:	e7f7      	b.n	80028f4 <memmove+0x24>

08002904 <__malloc_lock>:
 8002904:	4801      	ldr	r0, [pc, #4]	; (800290c <__malloc_lock+0x8>)
 8002906:	f7ff b8c1 	b.w	8001a8c <__retarget_lock_acquire_recursive>
 800290a:	bf00      	nop
 800290c:	20000174 	.word	0x20000174

08002910 <__malloc_unlock>:
 8002910:	4801      	ldr	r0, [pc, #4]	; (8002918 <__malloc_unlock+0x8>)
 8002912:	f7ff b8bc 	b.w	8001a8e <__retarget_lock_release_recursive>
 8002916:	bf00      	nop
 8002918:	20000174 	.word	0x20000174

0800291c <_free_r>:
 800291c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800291e:	2900      	cmp	r1, #0
 8002920:	d048      	beq.n	80029b4 <_free_r+0x98>
 8002922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002926:	9001      	str	r0, [sp, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f1a1 0404 	sub.w	r4, r1, #4
 800292e:	bfb8      	it	lt
 8002930:	18e4      	addlt	r4, r4, r3
 8002932:	f7ff ffe7 	bl	8002904 <__malloc_lock>
 8002936:	4a20      	ldr	r2, [pc, #128]	; (80029b8 <_free_r+0x9c>)
 8002938:	9801      	ldr	r0, [sp, #4]
 800293a:	6813      	ldr	r3, [r2, #0]
 800293c:	4615      	mov	r5, r2
 800293e:	b933      	cbnz	r3, 800294e <_free_r+0x32>
 8002940:	6063      	str	r3, [r4, #4]
 8002942:	6014      	str	r4, [r2, #0]
 8002944:	b003      	add	sp, #12
 8002946:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800294a:	f7ff bfe1 	b.w	8002910 <__malloc_unlock>
 800294e:	42a3      	cmp	r3, r4
 8002950:	d90b      	bls.n	800296a <_free_r+0x4e>
 8002952:	6821      	ldr	r1, [r4, #0]
 8002954:	1862      	adds	r2, r4, r1
 8002956:	4293      	cmp	r3, r2
 8002958:	bf04      	itt	eq
 800295a:	681a      	ldreq	r2, [r3, #0]
 800295c:	685b      	ldreq	r3, [r3, #4]
 800295e:	6063      	str	r3, [r4, #4]
 8002960:	bf04      	itt	eq
 8002962:	1852      	addeq	r2, r2, r1
 8002964:	6022      	streq	r2, [r4, #0]
 8002966:	602c      	str	r4, [r5, #0]
 8002968:	e7ec      	b.n	8002944 <_free_r+0x28>
 800296a:	461a      	mov	r2, r3
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	b10b      	cbz	r3, 8002974 <_free_r+0x58>
 8002970:	42a3      	cmp	r3, r4
 8002972:	d9fa      	bls.n	800296a <_free_r+0x4e>
 8002974:	6811      	ldr	r1, [r2, #0]
 8002976:	1855      	adds	r5, r2, r1
 8002978:	42a5      	cmp	r5, r4
 800297a:	d10b      	bne.n	8002994 <_free_r+0x78>
 800297c:	6824      	ldr	r4, [r4, #0]
 800297e:	4421      	add	r1, r4
 8002980:	1854      	adds	r4, r2, r1
 8002982:	42a3      	cmp	r3, r4
 8002984:	6011      	str	r1, [r2, #0]
 8002986:	d1dd      	bne.n	8002944 <_free_r+0x28>
 8002988:	681c      	ldr	r4, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	6053      	str	r3, [r2, #4]
 800298e:	4421      	add	r1, r4
 8002990:	6011      	str	r1, [r2, #0]
 8002992:	e7d7      	b.n	8002944 <_free_r+0x28>
 8002994:	d902      	bls.n	800299c <_free_r+0x80>
 8002996:	230c      	movs	r3, #12
 8002998:	6003      	str	r3, [r0, #0]
 800299a:	e7d3      	b.n	8002944 <_free_r+0x28>
 800299c:	6825      	ldr	r5, [r4, #0]
 800299e:	1961      	adds	r1, r4, r5
 80029a0:	428b      	cmp	r3, r1
 80029a2:	bf04      	itt	eq
 80029a4:	6819      	ldreq	r1, [r3, #0]
 80029a6:	685b      	ldreq	r3, [r3, #4]
 80029a8:	6063      	str	r3, [r4, #4]
 80029aa:	bf04      	itt	eq
 80029ac:	1949      	addeq	r1, r1, r5
 80029ae:	6021      	streq	r1, [r4, #0]
 80029b0:	6054      	str	r4, [r2, #4]
 80029b2:	e7c7      	b.n	8002944 <_free_r+0x28>
 80029b4:	b003      	add	sp, #12
 80029b6:	bd30      	pop	{r4, r5, pc}
 80029b8:	20000088 	.word	0x20000088

080029bc <_realloc_r>:
 80029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029be:	4607      	mov	r7, r0
 80029c0:	4614      	mov	r4, r2
 80029c2:	460e      	mov	r6, r1
 80029c4:	b921      	cbnz	r1, 80029d0 <_realloc_r+0x14>
 80029c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80029ca:	4611      	mov	r1, r2
 80029cc:	f7ff b860 	b.w	8001a90 <_malloc_r>
 80029d0:	b922      	cbnz	r2, 80029dc <_realloc_r+0x20>
 80029d2:	f7ff ffa3 	bl	800291c <_free_r>
 80029d6:	4625      	mov	r5, r4
 80029d8:	4628      	mov	r0, r5
 80029da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029dc:	f000 f848 	bl	8002a70 <_malloc_usable_size_r>
 80029e0:	42a0      	cmp	r0, r4
 80029e2:	d20f      	bcs.n	8002a04 <_realloc_r+0x48>
 80029e4:	4621      	mov	r1, r4
 80029e6:	4638      	mov	r0, r7
 80029e8:	f7ff f852 	bl	8001a90 <_malloc_r>
 80029ec:	4605      	mov	r5, r0
 80029ee:	2800      	cmp	r0, #0
 80029f0:	d0f2      	beq.n	80029d8 <_realloc_r+0x1c>
 80029f2:	4631      	mov	r1, r6
 80029f4:	4622      	mov	r2, r4
 80029f6:	f7ff ff5d 	bl	80028b4 <memcpy>
 80029fa:	4631      	mov	r1, r6
 80029fc:	4638      	mov	r0, r7
 80029fe:	f7ff ff8d 	bl	800291c <_free_r>
 8002a02:	e7e9      	b.n	80029d8 <_realloc_r+0x1c>
 8002a04:	4635      	mov	r5, r6
 8002a06:	e7e7      	b.n	80029d8 <_realloc_r+0x1c>

08002a08 <_read_r>:
 8002a08:	b538      	push	{r3, r4, r5, lr}
 8002a0a:	4d07      	ldr	r5, [pc, #28]	; (8002a28 <_read_r+0x20>)
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	4608      	mov	r0, r1
 8002a10:	4611      	mov	r1, r2
 8002a12:	2200      	movs	r2, #0
 8002a14:	602a      	str	r2, [r5, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f000 f87a 	bl	8002b10 <_read>
 8002a1c:	1c43      	adds	r3, r0, #1
 8002a1e:	d102      	bne.n	8002a26 <_read_r+0x1e>
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	b103      	cbz	r3, 8002a26 <_read_r+0x1e>
 8002a24:	6023      	str	r3, [r4, #0]
 8002a26:	bd38      	pop	{r3, r4, r5, pc}
 8002a28:	2000017c 	.word	0x2000017c

08002a2c <_fstat_r>:
 8002a2c:	b538      	push	{r3, r4, r5, lr}
 8002a2e:	4d07      	ldr	r5, [pc, #28]	; (8002a4c <_fstat_r+0x20>)
 8002a30:	2300      	movs	r3, #0
 8002a32:	4604      	mov	r4, r0
 8002a34:	4608      	mov	r0, r1
 8002a36:	4611      	mov	r1, r2
 8002a38:	602b      	str	r3, [r5, #0]
 8002a3a:	f000 f94c 	bl	8002cd6 <_fstat>
 8002a3e:	1c43      	adds	r3, r0, #1
 8002a40:	d102      	bne.n	8002a48 <_fstat_r+0x1c>
 8002a42:	682b      	ldr	r3, [r5, #0]
 8002a44:	b103      	cbz	r3, 8002a48 <_fstat_r+0x1c>
 8002a46:	6023      	str	r3, [r4, #0]
 8002a48:	bd38      	pop	{r3, r4, r5, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000017c 	.word	0x2000017c

08002a50 <_isatty_r>:
 8002a50:	b538      	push	{r3, r4, r5, lr}
 8002a52:	4d06      	ldr	r5, [pc, #24]	; (8002a6c <_isatty_r+0x1c>)
 8002a54:	2300      	movs	r3, #0
 8002a56:	4604      	mov	r4, r0
 8002a58:	4608      	mov	r0, r1
 8002a5a:	602b      	str	r3, [r5, #0]
 8002a5c:	f000 f949 	bl	8002cf2 <_isatty>
 8002a60:	1c43      	adds	r3, r0, #1
 8002a62:	d102      	bne.n	8002a6a <_isatty_r+0x1a>
 8002a64:	682b      	ldr	r3, [r5, #0]
 8002a66:	b103      	cbz	r3, 8002a6a <_isatty_r+0x1a>
 8002a68:	6023      	str	r3, [r4, #0]
 8002a6a:	bd38      	pop	{r3, r4, r5, pc}
 8002a6c:	2000017c 	.word	0x2000017c

08002a70 <_malloc_usable_size_r>:
 8002a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a74:	1f18      	subs	r0, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bfbc      	itt	lt
 8002a7a:	580b      	ldrlt	r3, [r1, r0]
 8002a7c:	18c0      	addlt	r0, r0, r3
 8002a7e:	4770      	bx	lr

08002a80 <findslot>:
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <findslot+0x2c>)
 8002a82:	b510      	push	{r4, lr}
 8002a84:	4604      	mov	r4, r0
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	b118      	cbz	r0, 8002a92 <findslot+0x12>
 8002a8a:	6983      	ldr	r3, [r0, #24]
 8002a8c:	b90b      	cbnz	r3, 8002a92 <findslot+0x12>
 8002a8e:	f7fe ff5f 	bl	8001950 <__sinit>
 8002a92:	2c13      	cmp	r4, #19
 8002a94:	d807      	bhi.n	8002aa6 <findslot+0x26>
 8002a96:	4806      	ldr	r0, [pc, #24]	; (8002ab0 <findslot+0x30>)
 8002a98:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002a9c:	3201      	adds	r2, #1
 8002a9e:	d002      	beq.n	8002aa6 <findslot+0x26>
 8002aa0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002aa4:	bd10      	pop	{r4, pc}
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	e7fc      	b.n	8002aa4 <findslot+0x24>
 8002aaa:	bf00      	nop
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	20000090 	.word	0x20000090

08002ab4 <checkerror>:
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	1c43      	adds	r3, r0, #1
 8002ab8:	4604      	mov	r4, r0
 8002aba:	d109      	bne.n	8002ad0 <checkerror+0x1c>
 8002abc:	f7fe fe86 	bl	80017cc <__errno>
 8002ac0:	2613      	movs	r6, #19
 8002ac2:	4605      	mov	r5, r0
 8002ac4:	2700      	movs	r7, #0
 8002ac6:	4630      	mov	r0, r6
 8002ac8:	4639      	mov	r1, r7
 8002aca:	beab      	bkpt	0x00ab
 8002acc:	4606      	mov	r6, r0
 8002ace:	602e      	str	r6, [r5, #0]
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ad4 <error>:
 8002ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad6:	4604      	mov	r4, r0
 8002ad8:	f7fe fe78 	bl	80017cc <__errno>
 8002adc:	2613      	movs	r6, #19
 8002ade:	4605      	mov	r5, r0
 8002ae0:	2700      	movs	r7, #0
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	4639      	mov	r1, r7
 8002ae6:	beab      	bkpt	0x00ab
 8002ae8:	4606      	mov	r6, r0
 8002aea:	602e      	str	r6, [r5, #0]
 8002aec:	4620      	mov	r0, r4
 8002aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002af0 <_swiread>:
 8002af0:	b530      	push	{r4, r5, lr}
 8002af2:	b085      	sub	sp, #20
 8002af4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002af8:	9203      	str	r2, [sp, #12]
 8002afa:	2406      	movs	r4, #6
 8002afc:	ad01      	add	r5, sp, #4
 8002afe:	4620      	mov	r0, r4
 8002b00:	4629      	mov	r1, r5
 8002b02:	beab      	bkpt	0x00ab
 8002b04:	4604      	mov	r4, r0
 8002b06:	4620      	mov	r0, r4
 8002b08:	f7ff ffd4 	bl	8002ab4 <checkerror>
 8002b0c:	b005      	add	sp, #20
 8002b0e:	bd30      	pop	{r4, r5, pc}

08002b10 <_read>:
 8002b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b12:	4615      	mov	r5, r2
 8002b14:	9101      	str	r1, [sp, #4]
 8002b16:	f7ff ffb3 	bl	8002a80 <findslot>
 8002b1a:	9901      	ldr	r1, [sp, #4]
 8002b1c:	4604      	mov	r4, r0
 8002b1e:	b938      	cbnz	r0, 8002b30 <_read+0x20>
 8002b20:	f7fe fe54 	bl	80017cc <__errno>
 8002b24:	2309      	movs	r3, #9
 8002b26:	6003      	str	r3, [r0, #0]
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	b003      	add	sp, #12
 8002b2e:	bd30      	pop	{r4, r5, pc}
 8002b30:	6800      	ldr	r0, [r0, #0]
 8002b32:	462a      	mov	r2, r5
 8002b34:	f7ff ffdc 	bl	8002af0 <_swiread>
 8002b38:	1c43      	adds	r3, r0, #1
 8002b3a:	d0f7      	beq.n	8002b2c <_read+0x1c>
 8002b3c:	6863      	ldr	r3, [r4, #4]
 8002b3e:	1a2a      	subs	r2, r5, r0
 8002b40:	4413      	add	r3, r2
 8002b42:	6063      	str	r3, [r4, #4]
 8002b44:	4610      	mov	r0, r2
 8002b46:	e7f1      	b.n	8002b2c <_read+0x1c>

08002b48 <_swilseek>:
 8002b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b4a:	460c      	mov	r4, r1
 8002b4c:	4616      	mov	r6, r2
 8002b4e:	f7ff ff97 	bl	8002a80 <findslot>
 8002b52:	4605      	mov	r5, r0
 8002b54:	b940      	cbnz	r0, 8002b68 <_swilseek+0x20>
 8002b56:	f7fe fe39 	bl	80017cc <__errno>
 8002b5a:	2309      	movs	r3, #9
 8002b5c:	6003      	str	r3, [r0, #0]
 8002b5e:	f04f 34ff 	mov.w	r4, #4294967295
 8002b62:	4620      	mov	r0, r4
 8002b64:	b003      	add	sp, #12
 8002b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b68:	2e02      	cmp	r6, #2
 8002b6a:	d903      	bls.n	8002b74 <_swilseek+0x2c>
 8002b6c:	f7fe fe2e 	bl	80017cc <__errno>
 8002b70:	2316      	movs	r3, #22
 8002b72:	e7f3      	b.n	8002b5c <_swilseek+0x14>
 8002b74:	2e01      	cmp	r6, #1
 8002b76:	d112      	bne.n	8002b9e <_swilseek+0x56>
 8002b78:	6843      	ldr	r3, [r0, #4]
 8002b7a:	18e4      	adds	r4, r4, r3
 8002b7c:	d4f6      	bmi.n	8002b6c <_swilseek+0x24>
 8002b7e:	682b      	ldr	r3, [r5, #0]
 8002b80:	260a      	movs	r6, #10
 8002b82:	e9cd 3400 	strd	r3, r4, [sp]
 8002b86:	466f      	mov	r7, sp
 8002b88:	4630      	mov	r0, r6
 8002b8a:	4639      	mov	r1, r7
 8002b8c:	beab      	bkpt	0x00ab
 8002b8e:	4606      	mov	r6, r0
 8002b90:	4630      	mov	r0, r6
 8002b92:	f7ff ff8f 	bl	8002ab4 <checkerror>
 8002b96:	2800      	cmp	r0, #0
 8002b98:	dbe1      	blt.n	8002b5e <_swilseek+0x16>
 8002b9a:	606c      	str	r4, [r5, #4]
 8002b9c:	e7e1      	b.n	8002b62 <_swilseek+0x1a>
 8002b9e:	2e02      	cmp	r6, #2
 8002ba0:	d1ed      	bne.n	8002b7e <_swilseek+0x36>
 8002ba2:	6803      	ldr	r3, [r0, #0]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	260c      	movs	r6, #12
 8002ba8:	466f      	mov	r7, sp
 8002baa:	4630      	mov	r0, r6
 8002bac:	4639      	mov	r1, r7
 8002bae:	beab      	bkpt	0x00ab
 8002bb0:	4606      	mov	r6, r0
 8002bb2:	4630      	mov	r0, r6
 8002bb4:	f7ff ff7e 	bl	8002ab4 <checkerror>
 8002bb8:	1c43      	adds	r3, r0, #1
 8002bba:	d0d0      	beq.n	8002b5e <_swilseek+0x16>
 8002bbc:	4404      	add	r4, r0
 8002bbe:	e7de      	b.n	8002b7e <_swilseek+0x36>

08002bc0 <_lseek>:
 8002bc0:	f7ff bfc2 	b.w	8002b48 <_swilseek>

08002bc4 <_swiwrite>:
 8002bc4:	b530      	push	{r4, r5, lr}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002bcc:	9203      	str	r2, [sp, #12]
 8002bce:	2405      	movs	r4, #5
 8002bd0:	ad01      	add	r5, sp, #4
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	4629      	mov	r1, r5
 8002bd6:	beab      	bkpt	0x00ab
 8002bd8:	4604      	mov	r4, r0
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f7ff ff6a 	bl	8002ab4 <checkerror>
 8002be0:	b005      	add	sp, #20
 8002be2:	bd30      	pop	{r4, r5, pc}

08002be4 <_write>:
 8002be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002be6:	4615      	mov	r5, r2
 8002be8:	9101      	str	r1, [sp, #4]
 8002bea:	f7ff ff49 	bl	8002a80 <findslot>
 8002bee:	9901      	ldr	r1, [sp, #4]
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	b930      	cbnz	r0, 8002c02 <_write+0x1e>
 8002bf4:	f7fe fdea 	bl	80017cc <__errno>
 8002bf8:	2309      	movs	r3, #9
 8002bfa:	6003      	str	r3, [r0, #0]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	e012      	b.n	8002c28 <_write+0x44>
 8002c02:	6800      	ldr	r0, [r0, #0]
 8002c04:	462a      	mov	r2, r5
 8002c06:	f7ff ffdd 	bl	8002bc4 <_swiwrite>
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	dbf6      	blt.n	8002bfc <_write+0x18>
 8002c0e:	6862      	ldr	r2, [r4, #4]
 8002c10:	1a2b      	subs	r3, r5, r0
 8002c12:	441a      	add	r2, r3
 8002c14:	42a8      	cmp	r0, r5
 8002c16:	6062      	str	r2, [r4, #4]
 8002c18:	d105      	bne.n	8002c26 <_write+0x42>
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	b003      	add	sp, #12
 8002c1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c22:	f7ff bf57 	b.w	8002ad4 <error>
 8002c26:	4618      	mov	r0, r3
 8002c28:	b003      	add	sp, #12
 8002c2a:	bd30      	pop	{r4, r5, pc}

08002c2c <_swiclose>:
 8002c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c2e:	2402      	movs	r4, #2
 8002c30:	9001      	str	r0, [sp, #4]
 8002c32:	ad01      	add	r5, sp, #4
 8002c34:	4620      	mov	r0, r4
 8002c36:	4629      	mov	r1, r5
 8002c38:	beab      	bkpt	0x00ab
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f7ff ff39 	bl	8002ab4 <checkerror>
 8002c42:	b003      	add	sp, #12
 8002c44:	bd30      	pop	{r4, r5, pc}
	...

08002c48 <_close>:
 8002c48:	b538      	push	{r3, r4, r5, lr}
 8002c4a:	4605      	mov	r5, r0
 8002c4c:	f7ff ff18 	bl	8002a80 <findslot>
 8002c50:	4604      	mov	r4, r0
 8002c52:	b930      	cbnz	r0, 8002c62 <_close+0x1a>
 8002c54:	f7fe fdba 	bl	80017cc <__errno>
 8002c58:	2309      	movs	r3, #9
 8002c5a:	6003      	str	r3, [r0, #0]
 8002c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c60:	bd38      	pop	{r3, r4, r5, pc}
 8002c62:	3d01      	subs	r5, #1
 8002c64:	2d01      	cmp	r5, #1
 8002c66:	d809      	bhi.n	8002c7c <_close+0x34>
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <_close+0x48>)
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d104      	bne.n	8002c7c <_close+0x34>
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
 8002c76:	6003      	str	r3, [r0, #0]
 8002c78:	2000      	movs	r0, #0
 8002c7a:	e7f1      	b.n	8002c60 <_close+0x18>
 8002c7c:	6820      	ldr	r0, [r4, #0]
 8002c7e:	f7ff ffd5 	bl	8002c2c <_swiclose>
 8002c82:	2800      	cmp	r0, #0
 8002c84:	d1ec      	bne.n	8002c60 <_close+0x18>
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8a:	6023      	str	r3, [r4, #0]
 8002c8c:	e7e8      	b.n	8002c60 <_close+0x18>
 8002c8e:	bf00      	nop
 8002c90:	20000090 	.word	0x20000090

08002c94 <_swistat>:
 8002c94:	b570      	push	{r4, r5, r6, lr}
 8002c96:	460c      	mov	r4, r1
 8002c98:	f7ff fef2 	bl	8002a80 <findslot>
 8002c9c:	4605      	mov	r5, r0
 8002c9e:	b930      	cbnz	r0, 8002cae <_swistat+0x1a>
 8002ca0:	f7fe fd94 	bl	80017cc <__errno>
 8002ca4:	2309      	movs	r3, #9
 8002ca6:	6003      	str	r3, [r0, #0]
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cac:	bd70      	pop	{r4, r5, r6, pc}
 8002cae:	6863      	ldr	r3, [r4, #4]
 8002cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cb4:	6063      	str	r3, [r4, #4]
 8002cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cba:	64a3      	str	r3, [r4, #72]	; 0x48
 8002cbc:	260c      	movs	r6, #12
 8002cbe:	4630      	mov	r0, r6
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	beab      	bkpt	0x00ab
 8002cc4:	4605      	mov	r5, r0
 8002cc6:	4628      	mov	r0, r5
 8002cc8:	f7ff fef4 	bl	8002ab4 <checkerror>
 8002ccc:	1c43      	adds	r3, r0, #1
 8002cce:	bf1c      	itt	ne
 8002cd0:	6120      	strne	r0, [r4, #16]
 8002cd2:	2000      	movne	r0, #0
 8002cd4:	e7ea      	b.n	8002cac <_swistat+0x18>

08002cd6 <_fstat>:
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	b510      	push	{r4, lr}
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4604      	mov	r4, r0
 8002cde:	2258      	movs	r2, #88	; 0x58
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe fd9d 	bl	8001820 <memset>
 8002ce6:	4601      	mov	r1, r0
 8002ce8:	4620      	mov	r0, r4
 8002cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cee:	f7ff bfd1 	b.w	8002c94 <_swistat>

08002cf2 <_isatty>:
 8002cf2:	b570      	push	{r4, r5, r6, lr}
 8002cf4:	f7ff fec4 	bl	8002a80 <findslot>
 8002cf8:	2509      	movs	r5, #9
 8002cfa:	4604      	mov	r4, r0
 8002cfc:	b920      	cbnz	r0, 8002d08 <_isatty+0x16>
 8002cfe:	f7fe fd65 	bl	80017cc <__errno>
 8002d02:	6005      	str	r5, [r0, #0]
 8002d04:	4620      	mov	r0, r4
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
 8002d08:	4628      	mov	r0, r5
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	beab      	bkpt	0x00ab
 8002d0e:	4604      	mov	r4, r0
 8002d10:	2c01      	cmp	r4, #1
 8002d12:	d0f7      	beq.n	8002d04 <_isatty+0x12>
 8002d14:	f7fe fd5a 	bl	80017cc <__errno>
 8002d18:	2400      	movs	r4, #0
 8002d1a:	4605      	mov	r5, r0
 8002d1c:	2613      	movs	r6, #19
 8002d1e:	4630      	mov	r0, r6
 8002d20:	4621      	mov	r1, r4
 8002d22:	beab      	bkpt	0x00ab
 8002d24:	4606      	mov	r6, r0
 8002d26:	602e      	str	r6, [r5, #0]
 8002d28:	e7ec      	b.n	8002d04 <_isatty+0x12>
	...

08002d2c <_init>:
 8002d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2e:	bf00      	nop
 8002d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d32:	bc08      	pop	{r3}
 8002d34:	469e      	mov	lr, r3
 8002d36:	4770      	bx	lr

08002d38 <_fini>:
 8002d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3a:	bf00      	nop
 8002d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3e:	bc08      	pop	{r3}
 8002d40:	469e      	mov	lr, r3
 8002d42:	4770      	bx	lr
